[{"id":"a54d7ce809671e2e","type":"tab","label":"SQL_TABLES","disabled":false,"info":"","env":[]},{"id":"3aaa0fce23f69204","type":"tab","label":"Telegram","disabled":false,"info":"","env":[]},{"id":"60138d0ce5443227","type":"tab","label":"WeatherData_API","disabled":false,"info":"","env":[]},{"id":"15690565a7bc7bb7","type":"tab","label":"Flow 10","disabled":false,"info":"","env":[]},{"id":"cf7fd95287b4d4a1","type":"tab","label":"EarthQuake_Flow","disabled":false,"info":"","env":[]},{"id":"34490142aa88368a","type":"tab","label":"Kmeans_v3","disabled":false,"info":""},{"id":"e1","type":"tab","label":"TomTom_Find","disabled":false,"info":""},{"id":"traffic_api","type":"tab","label":"Traffic_Incidents","disabled":false,"info":""},{"id":"f1","type":"tab","label":"Traffic_OnDemand","disabled":false,"info":""},{"id":"0536c0de48143757","type":"tab","label":"Threshold_Status","disabled":false,"info":""},{"id":"loc_info_tab","type":"tab","label":"Loc_InstantInfo","disabled":true,"info":""},{"id":"tab_loc_v3","type":"tab","label":"Loc InstantInfo_v3","disabled":false,"info":""},{"id":"8998a2850ec4892c","type":"tab","label":"Kmeans","disabled":true,"info":"","env":[]},{"id":"b583a63a49201d7f","type":"tab","label":"Kmeans_v2","disabled":true},{"id":"9f9b26a721ad1b8e","type":"subflow","name":"WRAP_TELEGRAM_MESSAGEs","info":"","category":"","in":[{"x":60,"y":80,"wires":[{"id":"95b1a80a1fc1e6f3"}]}],"out":[{"x":540,"y":60,"wires":[{"id":"95b1a80a1fc1e6f3","port":0}]},{"x":520,"y":180,"wires":[{"id":"95b1a80a1fc1e6f3","port":1}]}],"env":[],"meta":{},"color":"#DDAA99"},{"id":"59a72ce7cc02f596","type":"subflow","name":"getThreshold","info":"","category":"","in":[{"x":140,"y":180,"wires":[{"id":"fb39bf8bd3cbf6a9"}]}],"out":[{"x":640,"y":180,"wires":[{"id":"fb39bf8bd3cbf6a9","port":0}]}],"env":[],"meta":{},"color":"#DDAA99"},{"id":"25bc3f9b27c564a8","type":"telegram bot","botname":"MyNodeRedAwesome_bot","usernames":"@aimiliosdark","chatids":"","baseapiurl":"","testenvironment":false,"updatemode":"polling","pollinterval":300,"usesocks":false,"sockshost":"","socksprotocol":"socks5","socksport":6667,"socksusername":"anonymous","sockspassword":"","bothost":"","botpath":"","localbothost":"0.0.0.0","localbotport":8443,"publicbotport":8443,"privatekey":"","certificate":"","useselfsignedcertificate":false,"sslterminated":false,"verboselogging":false},{"id":"473f5bc0183beb94","type":"sqlitedb","db":"./sql_fin","mode":"RWC"},{"id":"95b1a80a1fc1e6f3","type":"function","z":"9f9b26a721ad1b8e","name":"WRAP_TELEGRAM_MSG","func":"/* -------------- CONFIG -------------- */\nconst DEFAULT_TYPE = 'message';          // text\nconst FALLBACK_CHAT = global.get('default_chat');   // optional\n\n/* -------------- DETECT & FORMAT -------------- */\nlet chatId = msg.chatId || msg.payload?.chatId || FALLBACK_CHAT;\nlet textOut = msg.text || msg.payload?.content || msg.payload;\n\nif (!chatId || !textOut) {\n    node.warn('Build Telegram Msg: missing chatId or content');\n    return [null, msg];                 // skip Telegram, keep flow alive\n}\n\nconst telMsg = {\n    payload: {\n        chatId: chatId,\n        type: DEFAULT_TYPE,\n        content: String(textOut)\n    }\n};\n\n/* If this came from a command, remember last chat for alerts */\nglobal.set('default_chat', chatId);\n\n/* Output 0 → telegram sender\n * Output 1 → original msg for SQL or other flows            */\nreturn [telMsg, msg];\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":260,"y":80,"wires":[[],[]]},{"id":"fb39bf8bd3cbf6a9","type":"function","z":"59a72ce7cc02f596","name":"function 7","func":"/** Inputs:\n *  msg.chatId  – numeric chat\n *  msg.key     – threshold key\n *  msg.def     – default value\n * Outputs:\n *  msg.value   – resolved value\n */\nconst v = global.get(`threshold:${msg.chatId}:${msg.key}`);\nmsg.value = (v === undefined) ? msg.def : v;\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":380,"y":180,"wires":[[]]},{"id":"0dbcfb639865f842","type":"inject","z":"a54d7ce809671e2e","name":"CREATE_TABLES","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":370,"y":560,"wires":[["525c304d0b275a01","e7f62ea7ea82d18e","019ead4e9d3cf6e7","1882572bde314ddd","c9224119c58af65f","151a2da590db504a","95273eeee3831188","d8456a8114936fd6","e2904f753fe47c19","f405cdfdcec88204","0ee4beb0547a795b"]]},{"id":"37501662bdd218ac","type":"link in","z":"a54d7ce809671e2e","name":"AirData_Link_In","links":["8eabb42f7ced07d6"],"x":1575,"y":140,"wires":[["df5598e4de8dc042"]]},{"id":"525c304d0b275a01","type":"function","z":"a54d7ce809671e2e","name":"create_air_data","func":"// Create the air_data table if it doesn't exist\nmsg.topic ='CREATE TABLE air_data (ts_utc TEXT,latitude REAL,city_name TEXT,city_code  TEXT,longitude REAL,source TEXT,overall_aqi INTEGER,pm2_5 REAL,pm10 REAL,dust REAL,no2 REAL,so2 REAL,o3 REAL,co REAL,ch4 REAL,nh3 REAL,co2 REAL, pm2_5_aqi INTEGER, pm10_aqi INTEGER,co_aqi INTEGER ,o3_aqi INTEGER,no2_aqi INTEGER ,so2_aqi INTEGER ,uv_index REAL,uv_index_clear_sky REAL,aod REAL,alder_pollen REAL,birch_pollen REAL,grass_pollen REAL,mugwort_pollen REAL,olive_pollen REAL,ragweed_pollen REAL,PRIMARY KEY (ts_utc, latitude, longitude, source))';\nreturn msg;\n\n//source apininjas or meteo\n//aqi api ninjas only\n//co api ninja only","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1040,"y":520,"wires":[["df5598e4de8dc042"]]},{"id":"e7f62ea7ea82d18e","type":"function","z":"a54d7ce809671e2e","name":"user_coordinates ","func":"// Create the user_location table if it doesn't exist\nmsg.topic = 'CREATE TABLE user_location (id INTEGER PRIMARY KEY,timestamp TEXT,city_name TEXT,city_code  TEXT,latitude  REAL,longitude REAL,place TEXT)';\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1050,"y":580,"wires":[["df5598e4de8dc042"]]},{"id":"df5598e4de8dc042","type":"sqlite","z":"a54d7ce809671e2e","mydb":"473f5bc0183beb94","sqlquery":"msg.topic","sql":"","name":"project_f","x":1520,"y":480,"wires":[["042a0351676eebd5"]]},{"id":"019ead4e9d3cf6e7","type":"function","z":"a54d7ce809671e2e","name":"create weather_codes","func":"// Create the weather_codes lookup table (code → short text)\nmsg.topic = 'CREATE TABLE weather_codes (code INTEGER PRIMARY KEY,description TEXT)';\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1060,"y":760,"wires":[["df5598e4de8dc042"]]},{"id":"1882572bde314ddd","type":"mp-function","z":"a54d7ce809671e2e","name":"create_current_OpenWeather","rqs":"","func":"msg.topic = `\nCREATE TABLE IF NOT EXISTS weather_current_ow (\n  timestamp     TEXT ,\n  latitude      REAL,\n  longitude     REAL, \n  city_name     TEXT,\n  city_code    TEXT,\n  temperature   REAL,\n  humidity      REAL,\n  uv_index      REAL,\n  wind_speed    REAL,\n  wind_dir      REAL,\n  wind_gust     REAL,\n  weathercode   INTEGER,\n  pressure      REAL,\n  sunrise       TEXT,\n  sunset        TEXT,\n  PRIMARY KEY (timestamp,latitude,longitude)\n);\n`;\n\nreturn msg;","persistent":false,"outputs":1,"threads":1,"noerr":0,"x":1050,"y":160,"wires":[["df5598e4de8dc042"]]},{"id":"c9224119c58af65f","type":"mp-function","z":"a54d7ce809671e2e","name":"create_forecast_OpenWeather","rqs":"","func":"msg.topic = `\nCREATE TABLE IF NOT EXISTS weather_forecast_ow (\n  ts_utc        TEXT,\n  latitude      REAL,\n  longitude     REAL,                    -- time of API call\n  forecast_day  TEXT,                   -- YYYY-MM-DD (of the day being forecast)\n  city_name     TEXT,\n  city_code     TEXT,\n  temp_max      REAL,\n  temp_min      REAL,\n  humidity      REAL,\n  uv_index      REAL,\n  pop           REAL,                   -- probability of precipitation\n  weathercode   INTEGER,\n  sunrise       TEXT,\n  sunset        TEXT,\n  PRIMARY KEY (ts_utc, forecast_day,latitude,longitude)\n);\n`;\n\nreturn msg;","persistent":false,"outputs":1,"threads":1,"noerr":0,"x":1070,"y":280,"wires":[["df5598e4de8dc042"]]},{"id":"151a2da590db504a","type":"mp-function","z":"a54d7ce809671e2e","name":"create_past_OpenMeteo","rqs":"","func":"msg.topic = `\nCREATE TABLE IF NOT EXISTS weather_climate_history(\n  date_utc   TEXT, \n  lat_round  REAL, \n  lon_round  REAL, \n  city_name  TEXT,\n  city_code  TEXT,\n  temp_max   REAL,\n  temp_min   REAL,\n  temp_mean  REAL,\n  data_points REAL,\n  PRIMARY KEY(date_utc, lat_round, lon_round)\n);\n`;\n\nreturn msg;","persistent":false,"outputs":1,"threads":1,"noerr":0,"x":1070,"y":440,"wires":[["df5598e4de8dc042"]]},{"id":"95273eeee3831188","type":"mp-function","z":"a54d7ce809671e2e","name":"create_current_OpenMeteo","rqs":"","func":"msg.topic = `\nCREATE TABLE IF NOT EXISTS weather_current_om (\n  timestamp               TEXT,\n  latitude                REAL,\n  longitude               REAL,\n  city_name               TEXT,\n  city_code               TEXT,\n  temperature_2m          REAL,\n  relative_humidity_2m    REAL,\n  apparent_temperature    REAL,\n  is_day                  INTEGER,\n  precipitation           REAL,\n  rain                    REAL,\n  showers                 REAL,\n  snowfall                REAL,\n  weather_code            INTEGER,\n  cloud_cover             REAL,\n  pressure_msl            REAL,\n  surface_pressure        REAL,\n  wind_speed_10m          REAL,\n  wind_direction_10m      REAL,\n  wind_gusts_10m          REAL,\n  PRIMARY KEY (timestamp,latitude,longitude)\n);\n`;\n\nreturn msg;","persistent":false,"outputs":1,"threads":1,"noerr":0,"x":1080,"y":360,"wires":[["df5598e4de8dc042"]]},{"id":"651ed0b9d7d105ff","type":"inject","z":"a54d7ce809671e2e","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":520,"y":180,"wires":[["1882572bde314ddd"]]},{"id":"4a3c35849decf5a1","type":"link in","z":"a54d7ce809671e2e","name":"WeatherData_Link_IN","links":["fd66f09790a51569"],"x":1585,"y":860,"wires":[["df5598e4de8dc042"]]},{"id":"963a8236cb3161b3","type":"inject","z":"a54d7ce809671e2e","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":540,"y":440,"wires":[["151a2da590db504a"]]},{"id":"f1a74762d89bb0c8","type":"inject","z":"a54d7ce809671e2e","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":540,"y":760,"wires":[["019ead4e9d3cf6e7"]]},{"id":"871e83a8247ca285","type":"inject","z":"a54d7ce809671e2e","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":540,"y":700,"wires":[["d8456a8114936fd6"]]},{"id":"d8456a8114936fd6","type":"mp-function","z":"a54d7ce809671e2e","name":"create_threshold_table","rqs":"","func":"msg.topic = `\nCREATE TABLE IF NOT EXISTS thresholds (\n  chat_id INTEGER,\n  key     TEXT,\n  value   TEXT,\n  PRIMARY KEY (chat_id, key)\n);\n\n`;\n\nreturn msg;","persistent":false,"outputs":1,"threads":1,"noerr":0,"x":1060,"y":700,"wires":[["df5598e4de8dc042"]]},{"id":"f405cdfdcec88204","type":"mp-function","z":"a54d7ce809671e2e","name":"CREATE_EARTHQUAKE_TABLE","rqs":"","func":"msg.topic = `\n\nCREATE TABLE eq_events (\n    quake_id        TEXT PRIMARY KEY,   \n    ts_utc          TEXT,               \n    last_update_utc TEXT,               \n    lat             REAL,              \n    lon             REAL,               \n    depth_km        REAL,              \n    magnitude       REAL,               \n    mag_type        TEXT,               \n    region          TEXT,                \n    ev_type         TEXT,               \n    auth            TEXT,                \n    source_id       TEXT,               \n    source_catalog  TEXT,             \n    src             TEXT,\n    felt            INTEGER,\n    significance    INTEGER               \n);\n\n\n`;\n\nreturn msg;","persistent":false,"outputs":1,"threads":1,"noerr":0,"x":1060,"y":940,"wires":[["df5598e4de8dc042"]]},{"id":"3b5e8f2f1552367b","type":"inject","z":"a54d7ce809671e2e","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":560,"y":940,"wires":[["f405cdfdcec88204"]]},{"id":"042a0351676eebd5","type":"debug","z":"a54d7ce809671e2e","name":"debug 40","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1730,"y":500,"wires":[]},{"id":"0ee4beb0547a795b","type":"mp-function","z":"a54d7ce809671e2e","name":"CREATE_CLIMATE_CENTROIDS","rqs":"","func":"msg.topic = `\n\nCREATE TABLE IF NOT EXISTS climate_centroids (\n  mm_dd TEXT,                 -- \"06-15\"\n  lat_round REAL,\n  lon_round REAL,\n  k INTEGER,\n  mu REAL,                    -- cluster mean °C\n  sigma REAL,                 -- cluster std-dev °C\n  updated_at TEXT,\n  PRIMARY KEY (mm_dd, lat_round, lon_round)\n);\n\n\n`;\n\nreturn msg;","persistent":false,"outputs":1,"threads":1,"noerr":0,"x":1080,"y":1080,"wires":[["df5598e4de8dc042"]]},{"id":"cc76190e7aca32eb","type":"inject","z":"a54d7ce809671e2e","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":580,"y":1080,"wires":[["0ee4beb0547a795b"]]},{"id":"e2904f753fe47c19","type":"function","z":"a54d7ce809671e2e","name":"create traffic_insidents","func":"// Create the weather_codes lookup table (code → short text)\nmsg.topic = `CREATE TABLE IF NOT EXISTS traffic_incidents (\n  ts_utc     TEXT    NOT NULL,          -- ISO-8601 UTC timestamp\n  lat        REAL    NOT NULL,          -- latitude  (first vertex)\n  lon        REAL    NOT NULL,          -- longitude (first vertex)\n  severity   INTEGER NOT NULL,          -- 0–5 (TomTom's \"severity\")\n  delay_sec  INTEGER NOT NULL,          -- seconds of extra delay (0 if n/a)\n  category   INTEGER NOT NULL,          -- iconCategory (integer 0-14)\n  src        TEXT    NOT NULL,          -- always 'tomtom' for now\n\n  PRIMARY KEY (ts_utc, lat, lon, src)   -- de-dupe identical incident reports\n) WITHOUT ROWID;\n`;\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1080,"y":900,"wires":[["df5598e4de8dc042"]]},{"id":"0ccb78676a98202d","type":"inject","z":"a54d7ce809671e2e","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":560,"y":900,"wires":[["e2904f753fe47c19"]]},{"id":"1031930549d16705","type":"function","z":"a54d7ce809671e2e","name":"function 1","func":"// Create the weather_codes lookup table (code → short text)\nmsg.topic = ` SELECT \n    overall_aqi,\n    pm2_5, pm10, no2, so2, o3, co,\n    pm2_5_aqi, pm10_aqi, no2_aqi, so2_aqi, o3_aqi, co_aqi,\n    uv_index, \n    alder_pollen, birch_pollen, grass_pollen, olive_pollen, ragweed_pollen,\n    source,\n    ROUND((julianday('now') - julianday(ts_utc)) * 24, 1) as hours_ago\n  FROM air_data \n  WHERE ROUND(latitude,3) =  38.369 AND ROUND(longitude,3) =  26.137\n  ORDER BY ts_utc DESC LIMIT 1\n`;\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1020,"y":1220,"wires":[["df5598e4de8dc042"]]},{"id":"0468a803860d0140","type":"inject","z":"a54d7ce809671e2e","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":640,"y":1220,"wires":[["1031930549d16705"]]},{"id":"416f4ed558def55e","type":"function","z":"a54d7ce809671e2e","name":"function 2","func":"// Create the weather_codes lookup table (code → short text)\nmsg.topic = `select * from air_data where source=\"openweather\"\n`;\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1040,"y":1340,"wires":[["df5598e4de8dc042"]]},{"id":"f4fd3a269828b247","type":"inject","z":"a54d7ce809671e2e","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":660,"y":1340,"wires":[["416f4ed558def55e"]]},{"id":"60635f608ace19c4","type":"function","z":"a54d7ce809671e2e","name":"function 14","func":"// Create the weather_codes lookup table (code → short text)\nmsg.topic = `select * from air_data where source=\"api_ninjas\"\n`;\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1010,"y":1440,"wires":[["df5598e4de8dc042"]]},{"id":"52a0aebfc52e7b0e","type":"inject","z":"a54d7ce809671e2e","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":630,"y":1440,"wires":[["60635f608ace19c4"]]},{"id":"98379ff95dbfad6d","type":"telegram receiver","z":"3aaa0fce23f69204","name":"Jarvisv0.1","bot":"25bc3f9b27c564a8","saveDataDir":"","filterCommands":false,"x":220,"y":680,"wires":[[],["7e242131f80be702"]]},{"id":"7e242131f80be702","type":"switch","z":"3aaa0fce23f69204","name":"PIN OR TEXT","property":"payload.type","propertyType":"msg","rules":[{"t":"eq","v":"location","vt":"str"},{"t":"else"}],"checkall":"true","repair":false,"outputs":2,"x":460,"y":680,"wires":[["b2773481b38bec94"],["f3c0c4c6f3e9d116"]]},{"id":"f3c0c4c6f3e9d116","type":"mp-function","z":"3aaa0fce23f69204","name":"Process_Text","rqs":"","func":"/* ---------- Enhanced Process_Text with shorter, friendlier commands ---------- */\nconst textIn = msg.originalMessage?.text || msg.payload?.content || '';\nconst txt = textIn.trim();\nconst chatId = msg.payload.chatId;\n\n/* ---------- /set <param> <value> ---------- */\nconst setCmd = txt.match(/^\\/set\\s+(\\w+)\\s+([\\d.]+)$/i);\nif (setCmd) {\n    msg.route = 'threshold';\n    msg.param = setCmd[1].toLowerCase();\n    msg.value = Number(setCmd[2]);\n    msg.chat = chatId;\n    return msg;\n}\n\n/* ---------- /limits or /settings ---------- */\nif (/^\\/(?:limits|settings)$/i.test(txt)) {\n    msg.route = 'thresholdStatus';\n    msg.chat = chatId;\n    return msg;\n}\n\n/* ---------- /help or /start ---------- */\nif (/^\\/(?:help|start|commands)$/i.test(txt)) {\n    msg.route = 'help';\n    msg.chat = chatId;\n    return msg;\n}\n\n/* ---------- /config (show available settings) ---------- */\nif (/^\\/config$/i.test(txt)) {\n    msg.route = 'thresholdCheat';\n    msg.chat = chatId;\n    return msg;\n}\n\n/* ---------- /find <query> ---------- */\nconst fnd = txt.match(/^\\/find\\s+(.+)/i);\nif (fnd) {\n    msg.route = 'find';\n    msg.query = fnd[1].trim();\n    msg.chat = chatId;\n    return msg;\n}\n\n\n\n/* ---------- /traffic ---------- */\nif (/^\\/traffic$/i.test(txt)) {\n    msg.route = 'traffic';\n    msg.chat = chatId;\n    return msg;\n}\n/* ---------- /status ---------- */\nif (/^\\/status$/i.test(txt)) {\n    msg.route = 'status';\n    msg.chat = chatId;\n    return msg;\n}\n/* ---------- /location <city> [CC] ---------- */\nconst loc = txt.match(/^\\/(?:location|loc)\\s+(.+)/i);\nif (loc) {\n    let raw = loc[1]\n        .replace(/\\s*,\\s*/g, ',')\n        .replace(/\\s+/g, ' ')\n        .trim();\n\n    let cityPart = raw;\n    let ccPart = '';\n    const ccRE = /^[A-Z]{2}$/;\n\n    if (raw.includes(',')) {\n        const parts = raw.split(',');\n        cityPart = parts[0].trim();\n        ccPart = parts[1].trim().toUpperCase();\n    } else {\n        const parts = raw.split(' ');\n        if (ccRE.test(parts.at(-1).toUpperCase())) {\n            ccPart = parts.pop().toUpperCase();\n            cityPart = parts.join(' ');\n        }\n    }\n\n    msg.route = 'location';\n    msg.cityName = cityPart;\n    msg.country = ccPart;\n    msg.chat = chatId;\n    return msg;\n}\n\n/* ---------- Enhanced fallback help ---------- */\nmsg.payload = {\n    chatId,\n    type: 'message',\n    content:\n        '🤖 *Jarvis Assistant Commands*\\n\\n' +\n        '📍 **Location**\\n' +\n        '• `/pin` – share your GPS location\\n' +\n        '• `/loc athens gr` – set location by city\\n\\n' +\n        '🔍 **Search & Status**\\n' +\n        '• `/find coffee` – find nearby places\\n' +\n        '• `/traffic` – check nearby traffic incidents\\n' +\n        '• `/status` – gives back info for the place\\n\\n' +\n        '⚙️ **Settings**\\n' +\n        '• `/set temp_high 35` – adjust alert limits\\n' +\n        '• `/set search_radius 5` – set search distance\\n' +\n        '• `/limits` – view your current settings\\n' +\n        '• `/config` – see all available settings\\n\\n' +\n        '❓ `/help` – show this menu',\n    options: { parse_mode: 'Markdown' }\n};\nreturn msg;","persistent":false,"outputs":1,"threads":1,"noerr":0,"x":680,"y":1000,"wires":[["072c49a9f919b283"]]},{"id":"b2773481b38bec94","type":"function","z":"3aaa0fce23f69204","name":"Process_PIN","func":"/**************************************************************************\n * process_pin  –  handles Telegram “location” share\n * Now rounds lat/lon to 3 dp so pins and /location behave identically.\n **************************************************************************/\n\n// ---------- helper ------------------------------------------------------\nconst roundCoord = v => Number(v.toFixed(3));   // 3 dp ≈ 110 m grid\n// ------------------------------------------------------------------------\n\nconst loc    = msg.payload.content;   // incoming Telegram pin\nconst chatId = msg.payload.chatId;\n\n// full-precision values (keep these for API calls if you need them)\nmsg.lat  = loc.latitude;\nmsg.lon  = loc.longitude;\n\n// rounded values – canonical for DB keys & hashes\nconst latRnd = roundCoord(loc.latitude);\nconst lonRnd = roundCoord(loc.longitude);\n\n// ----------- globals used elsewhere -------------------------------------\nglobal.set('user_lat',  latRnd);                      // << changed\nglobal.set('user_lon',  lonRnd);                      // << changed\nglobal.set('location_hash', `${latRnd},${lonRnd}`);   // << changed\nglobal.set('baseline_ready', false);\n// ------------------------------------------------------------------------\n\n// make rounded coords available to the next nodes, too\nmsg.chatId = chatId;\nmsg.lat_round = latRnd;\nmsg.lon_round = lonRnd;\n\n// ---------- human-readable reply back to chat ---------------------------\nmsg.chatId  = chatId;\nmsg.payload = {               // <- wrapper wants an object\n  chatId : chatId,            //   (harmless duplication)\n  type   : 'message',         //   defaults to 'message' if omitted\n  content: `📍 Location saved.\\nLat ${latRnd.toFixed(3)}, Lon ${lonRnd.toFixed(3)}.`\n};\n\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":690,"y":360,"wires":[["27137f87c71cd086"]]},{"id":"325da55869244cff","type":"telegram sender","z":"3aaa0fce23f69204","name":"","bot":"25bc3f9b27c564a8","haserroroutput":false,"outputs":1,"x":2530,"y":200,"wires":[[]]},{"id":"072c49a9f919b283","type":"switch","z":"3aaa0fce23f69204","name":"","property":"route","propertyType":"msg","rules":[{"t":"eq","v":"location","vt":"str"},{"t":"eq","v":"threshold","vt":"str"},{"t":"eq","v":"thresholdCheat","vt":"str"},{"t":"eq","v":"help","vt":"str"},{"t":"eq","v":"find","vt":"str"},{"t":"eq","v":"traffic","vt":"str"},{"t":"eq","v":"thresholdStatus","vt":"str"},{"t":"eq","v":"status","vt":"str"},{"t":"else"}],"checkall":"true","repair":false,"outputs":9,"x":990,"y":1000,"wires":[["8fa4772a23f35942"],["e074"],["a19921b18c0dbd1a"],["33be3bbb2245bb3d"],["5f9380041e16b837"],["cce7b190c5acac5c"],["77476dac05e877c3"],["b107cba5e50f70a1"],["89cc9c1e637fadb2"]]},{"id":"8fa4772a23f35942","type":"function","z":"3aaa0fce23f69204","name":"function 34","func":"const city = encodeURIComponent(msg.cityName);\nconst cc = msg.country ? `&country_code=${msg.country}` : '';\n\nmsg.url =\n    `https://geocoding-api.open-meteo.com/v1/search` +\n    `?name=${city}${cc}&count=1&language=en&format=json`;\n\nreturn msg;           // → HTTP Request\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1250,"y":720,"wires":[["69a59728f201d5fb"]]},{"id":"69a59728f201d5fb","type":"http request","z":"3aaa0fce23f69204","name":"GEOCODING_OPENMETEO","method":"GET","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":1610,"y":720,"wires":[["0217c5c47d5bec60"]]},{"id":"0217c5c47d5bec60","type":"function","z":"3aaa0fce23f69204","name":"function 35","func":"const res = msg.payload.results;\nif (!res || !res.length) {\n    msg.payload = '❌  Location not found.';\n    return [msg, null];      // reply only\n}\n\nconst g = res[0];\nconst lat = Number(g.latitude.toFixed(3));\nconst lon = Number(g.longitude.toFixed(3));\n\nglobal.set('city_name', g.name);\nglobal.set('country_code', g.country_code);\nglobal.set('user_lat', lat);\nglobal.set('user_lon', lon);\nglobal.set('location_hash', `${lat},${lon}`);\nglobal.set('baseline_ready', false);      // force new baseline\nglobal.set('yearStep', 0);                // reset loop counter\n\nconst reply = {\n  chatId : msg.chatId || global.get('default_chat'),  // FIXED line\n  type   : 'message',\n  content: `📍 Set to ${g.name}, ${g.country_code}\\n` +\n    `Lat ${lat}, Lon ${lon}.`\n};\n\nreturn { payload: reply};\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1910,"y":720,"wires":[["aa1747dcaf39b527"]]},{"id":"11d10040b77a0559","type":"link out","z":"3aaa0fce23f69204","name":"loc.changed","mode":"link","links":["08eda95e2933de07","0c7f1758b2803f6c","1af4a1af09edbf4e","2a6d15cbcd69e624","52f50c20aafd2846","81b6132c8c9d9630","IN_LINK","f486f26e5a6b38a6"],"x":2415,"y":540,"wires":[]},{"id":"b228088f19eeb8b4","type":"telegram sender","z":"3aaa0fce23f69204","d":true,"name":"","bot":"25bc3f9b27c564a8","haserroroutput":false,"outputs":1,"x":1910,"y":1920,"wires":[["883c27881d39578b"]]},{"id":"883c27881d39578b","type":"debug","z":"3aaa0fce23f69204","d":true,"name":"debug 29","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":2240,"y":1920,"wires":[]},{"id":"4e215016681dc97a","type":"sqlite","z":"3aaa0fce23f69204","d":true,"mydb":"","sqlquery":"msg.topic","sql":"","name":"project_f","x":1740,"y":2260,"wires":[["ebba72eb24855cb7"]]},{"id":"ebba72eb24855cb7","type":"debug","z":"3aaa0fce23f69204","d":true,"name":"debug 30","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":2260,"y":2260,"wires":[]},{"id":"2283115f25fd6a4c","type":"telegram sender","z":"3aaa0fce23f69204","name":"","bot":"25bc3f9b27c564a8","haserroroutput":false,"outputs":1,"x":1750,"y":1700,"wires":[[]]},{"id":"27137f87c71cd086","type":"function","z":"3aaa0fce23f69204","name":"Reverse_Geocode","func":"// Build URL & headers for API-Ninjas reverse geocoding\nconst lat = global.get('user_lat');\nconst lon = global.get('user_lon');\nif (lat === undefined || lon === undefined) return null;\n\nmsg.url    = `https://api.api-ninjas.com/v1/reversegeocoding?lat=${lat}&lon=${lon}`;\nmsg.headers = { 'X-Api-Key': 'JZgxieLF/a3oINCd/UfciQ==OBuaYUWgYeK22hKj' };   // ← paste your key\nreturn msg;            // → HTTP Request (GET, Return=parsed JSON)\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1070,"y":360,"wires":[["35aa9b7b21556787"]]},{"id":"1b26f9054e158631","type":"function","z":"3aaa0fce23f69204","name":"function 21","func":"/**************************************************************************\n * build_location_reply  –  called right after reverse-geocoding\n * Expects:  msg.chatId  (top-level) survives the HTTP request\n *           msg.payload (array of geo results)\n **************************************************************************/\n\nif (!Array.isArray(msg.payload) || !msg.payload.length) {\n    msg.payload = {\n      chatId : msg.chatId || global.get('default_chat'),\n      type   : 'message',\n      content: '❌  Reverse geocoding failed.'\n    };\n    return [msg, null];           // output-0 -> Telegram, output-1 null\n}\n\nconst r   = msg.payload[0];             // first geo result\nconst lat = global.get('user_lat');\nconst lon = global.get('user_lon');\n\n// store whatever globals you need for the next flows\nglobal.set('city_name',    r.name        || '');\nglobal.set('country_code', r.country     || '');\nglobal.set('baseline_ready', false);\nglobal.set('yearStep', 0);\n\n// build wrapper-compatible reply object\nconst reply = {\n  chatId : msg.chatId || global.get('default_chat'),  // FIXED line\n  type   : 'message',\n  content: `📍 ${r.name} (${r.country}) saved.\\nLat ${lat}, Lon ${lon}.`\n};\n\n/* Output-0 → Telegram sender | Output-1 → link-out that fires \"loc.changed\" */\nreturn { payload: reply};\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1630,"y":360,"wires":[["aa1747dcaf39b527"]]},{"id":"35aa9b7b21556787","type":"http request","z":"3aaa0fce23f69204","name":"","method":"GET","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":1390,"y":360,"wires":[["1b26f9054e158631"]]},{"id":"aa1747dcaf39b527","type":"subflow:9f9b26a721ad1b8e","z":"3aaa0fce23f69204","name":"","x":2180,"y":360,"wires":[["325da55869244cff"],["11d10040b77a0559"]]},{"id":"75ca7a39127de7d1","type":"subflow:9f9b26a721ad1b8e","z":"3aaa0fce23f69204","d":true,"name":"","x":1480,"y":2020,"wires":[["b228088f19eeb8b4"],["4e215016681dc97a"]]},{"id":"89cc9c1e637fadb2","type":"subflow:9f9b26a721ad1b8e","z":"3aaa0fce23f69204","name":"","x":1280,"y":1700,"wires":[["2283115f25fd6a4c"],[]]},{"id":"e122c643b3d7938e","type":"function","z":"3aaa0fce23f69204","d":true,"name":"function 37","func":"/**************************************************************************\n * INSERT / UPDATE chat-specific threshold\n * PK      : (chat_id, parameter)\n * Columns : value REAL, updated_at TEXT  (or whatever types you use)\n **************************************************************************/\n\nmsg.topic = `\nINSERT INTO thresholds\n  (chat_id, parameter, value, updated_at)\nVALUES\n  (${msg.chat}, '${msg.param}', ${msg.value}, datetime('now','utc'))\nON CONFLICT(chat_id, parameter) DO UPDATE SET\n    value      = excluded.value,\n    updated_at = datetime('now','utc');\n`;\n\nglobal.set(`thr_${msg.chatId}_near_quake_mag`, 4.5);\nmsg.text = `✓ Threshold for ${msg.param} set to ${msg.value}`;\nreturn msg;            // (goes to SQLite → WRAP_TELEGRAM_MSG)\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1050,"y":2020,"wires":[["75ca7a39127de7d1"]]},{"id":"e074","type":"function","z":"3aaa0fce23f69204","name":"threshold handler","func":"// Enhanced threshold handler with better validation and feedback\nconst chat = msg.originalMessage.chat.id;\nconst raw = msg.originalMessage.text || '';\nconst text = raw.trim();\n\nconst parts = text.split(/\\s+/);\nconst command = parts.shift(); // remove '/set' or '/threshold'\n\nif (!parts.length || ['status', 'limits', 'settings'].includes(parts[0].toLowerCase())) {\n    msg.reqType = 'status';\n    msg.chatId = chat;\n    return [null, msg]; // → output 2 (status)\n}\n\nconst key = parts[0].toLowerCase();\nconst valStr = parts.slice(1).join(' ');\n\nif (!valStr) {\n    // Send error message for missing value\n    msg.payload = {\n        chatId: chat,\n        type: 'message',\n        content: \n            '❌ *Missing value!*\\n\\n' +\n            `Usage: \\`/set ${key} <value>\\`\\n\\n` +\n            'Example: `/set temp_high 35`\\n' +\n            'Type `/config` to see all options',\n        options: { parse_mode: 'Markdown' }\n    };\n    return [null, null, msg]; // → error output\n}\n\nlet val = Number(valStr);\nif (isNaN(val)) { \n    val = valStr; // Keep as string for non-numeric values\n}\n\n// Validate common settings\nconst validationResult = validateSetting(key, val);\nif (!validationResult.valid) {\n    msg.payload = {\n        chatId: chat,\n        type: 'message',\n        content: \n            '⚠️ *Invalid value!*\\n\\n' +\n            validationResult.message + '\\n\\n' +\n            'Type `/config` for valid ranges',\n        options: { parse_mode: 'Markdown' }\n    };\n    return [null, null, msg]; // → error output\n}\n\nmsg.reqType = 'set';\nmsg.chatId = chat;\nmsg.key = key;\nmsg.value = val;\nreturn [msg, null, null]; // → output 1 (set)\n\nfunction validateSetting(key, value) {\n    const validations = {\n        temp_high: { min: -50, max: 60, unit: '°C' },\n        temp_low: { min: -50, max: 50, unit: '°C' },\n        quake_mag: { min: 1.0, max: 10.0, unit: '' },\n        quake_radius: { min: 1, max: 1000, unit: 'km' },\n        global_quake: { min: 4.0, max: 10.0, unit: '' },\n        traffic_severity: { min: 1, max: 5, unit: '' },\n        search_radius: { min: 0.1, max: 100, unit: 'km' },\n        search_limit: { min: 1, max: 20, unit: '' },\n        aqi_limit: { min: 1, max: 500, unit: '' },\n        pollen_limit: { min: 1, max: 10, unit: '' }\n    };\n    \n    // Map alternative names\n    const keyMap = {\n        'near_quake_mag': 'quake_mag',\n        'near_quake_radius': 'quake_radius',\n        'global_quake_mag': 'global_quake',\n        'traffic_min_sev': 'traffic_severity',\n        'radius_near_me': 'search_radius',\n        'nearby_limit': 'search_limit'\n    };\n    \n    const normalizedKey = keyMap[key] || key;\n    const validation = validations[normalizedKey];\n    \n    if (!validation) {\n        return { \n            valid: true, \n            message: '' \n        }; // Allow unknown keys for flexibility\n    }\n    \n    if (typeof value !== 'number' || value < validation.min || value > validation.max) {\n        return {\n            valid: false,\n            message: `${key} must be between ${validation.min} and ${validation.max}${validation.unit}`\n        };\n    }\n    \n    return { valid: true, message: '' };\n}","outputs":2,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1270,"y":1000,"wires":[["f1b2"],["a2d7"]]},{"id":"f1b2","type":"function","z":"3aaa0fce23f69204","name":"build SQL (set)","func":"msg.topic = `INSERT INTO thresholds (chat_id, key, value) VALUES (${msg.chatId}, '${msg.key.replace(/'/g, \"''\")}', '${String(msg.value).replace(/'/g, \"''\")}') `+\n           `ON CONFLICT(chat_id, key) DO UPDATE SET value = excluded.value;`;\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1530,"y":940,"wires":[["c5e9"]]},{"id":"c5e9","type":"sqlite","z":"3aaa0fce23f69204","mydb":"473f5bc0183beb94","sqlquery":"msg.topic","sql":"","name":"thresholds","x":1740,"y":940,"wires":[["d3aa"]]},{"id":"d3aa","type":"function","z":"3aaa0fce23f69204","name":"set global & ack","func":"// Enhanced success message with context and tips\nglobal.set(`threshold:${msg.chatId}:${msg.key}`, msg.value);\n\n// Get unit for display\nfunction getUnit(key) {\n    if (key.includes('temp')) return '°C';\n    if (key.includes('radius')) return 'km';\n    if (key.includes('mag')) return '';\n    if (key.includes('severity')) return '';\n    if (key.includes('limit')) return '';\n    return '';\n}\n\n// Get friendly description\nfunction getDescription(key) {\n    const descriptions = {\n        temp_high: 'Hot weather alerts',\n        temp_low: 'Cold weather alerts',\n        quake_mag: 'Local earthquake alerts',\n        quake_radius: 'Earthquake alert radius',\n        global_quake: 'Global earthquake alerts',\n        traffic_severity: 'Traffic incident alerts',\n        search_radius: 'Search radius',\n        search_limit: 'Max search results',\n        aqi_limit: 'Air quality alerts',\n        pollen_limit: 'Pollen alerts',\n        // Legacy mappings\n        near_quake_mag: 'Local earthquake alerts',\n        near_quake_radius: 'Earthquake alert radius',\n        global_quake_mag: 'Global earthquake alerts',\n        traffic_min_sev: 'Traffic incident alerts',\n        radius_near_me: 'Search radius',\n        nearby_limit: 'Max search results'\n    };\n    return descriptions[key] || key;\n}\n\nconst unit = getUnit(msg.key);\nconst description = getDescription(msg.key);\n\nmsg.payload = {\n    chatId: msg.chatId,\n    type: 'message',\n    content:\n        `✅ *Setting Updated!*\\n\\n` +\n        `🎯 **${description}**\\n` +\n        `Set to: **${msg.value}${unit}**\\n\\n` +\n        `_Type_ \\`/limits\\` _to view all your settings_`,\n    options: { parse_mode: 'Markdown' }\n};\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1960,"y":940,"wires":[["cf0e80c549787b27"]]},{"id":"b6ff","type":"telegram sender","z":"3aaa0fce23f69204","name":"","bot":"25bc3f9b27c564a8","haserroroutput":false,"outputs":1,"x":2670,"y":920,"wires":[[]]},{"id":"a2d7","type":"function","z":"3aaa0fce23f69204","name":"build SQL (status)","func":"msg.topic = `SELECT key, value FROM thresholds WHERE chat_id = ${msg.chatId} ORDER BY key;`;\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1530,"y":1100,"wires":[["e8cd"]]},{"id":"e8cd","type":"sqlite","z":"3aaa0fce23f69204","mydb":"473f5bc0183beb94","sqlquery":"msg.topic","sql":"","name":"thresholds","x":1770,"y":1100,"wires":[["c0af"]]},{"id":"c0af","type":"function","z":"3aaa0fce23f69204","name":"format status","func":"// Enhanced status formatting with categories and emojis\nconst rows = msg.payload || [];\n\nif (!rows.length) {\n    msg.payload = {\n        chatId: msg.chatId,\n        type: 'message',\n        content:\n            '⚙️ *Your Settings*\\n\\n' +\n            '📊 No custom settings yet!\\n\\n' +\n            '_Using optimized defaults_\\n' +\n            'Type `/config` to see available options',\n        options: { parse_mode: 'Markdown' }\n    };\n    return msg;\n}\n\n// Group settings by category\nconst categories = {\n    weather: ['temp_high', 'temp_low', 'aqi_limit'],\n    earthquake: ['quake_mag', 'quake_radius', 'global_quake', 'near_quake_mag', 'near_quake_radius', 'global_quake_mag'],\n    traffic: ['traffic_severity', 'traffic_min_sev'],\n    search: ['search_radius', 'search_limit', 'radius_near_me', 'nearby_limit'],\n    health: ['pollen_limit']\n};\n\nconst categoryIcons = {\n    weather: '🌡️',\n    earthquake: '🌍', \n    traffic: '🚗',\n    search: '🔍',\n    health: '🌿'\n};\n\nconst categoryNames = {\n    weather: 'Weather',\n    earthquake: 'Earthquake',\n    traffic: 'Traffic',\n    search: 'Search',\n    health: 'Health'\n};\n\nlet message = '⚙️ *Your Current Settings*\\n\\n';\n\n// Group the user's settings by category\nconst userSettings = {};\nrows.forEach(row => {\n    userSettings[row.key] = row.value;\n});\n\n// Display by category\nObject.entries(categories).forEach(([category, keys]) => {\n    const categorySettings = keys.filter(key => userSettings.hasOwnProperty(key));\n    \n    if (categorySettings.length > 0) {\n        message += `${categoryIcons[category]} **${categoryNames[category]}**\\n`;\n        categorySettings.forEach(key => {\n            const value = userSettings[key];\n            const unit = getUnit(key);\n            message += `• ${key}: ${value}${unit}\\n`;\n        });\n        message += '\\n';\n    }\n});\n\n// Add uncategorized settings\nconst allCategorizedKeys = Object.values(categories).flat();\nconst uncategorized = Object.keys(userSettings).filter(key => !allCategorizedKeys.includes(key));\n\nif (uncategorized.length > 0) {\n    message += '🔧 **Other**\\n';\n    uncategorized.forEach(key => {\n        const unit = getUnit(key);\n        message += `• ${key}: ${userSettings[key]}${unit}\\n`;\n    });\n    message += '\\n';\n}\n\nmessage += '_Type_ `/config` _to see all options_';\n\nfunction getUnit(key) {\n    if (key.includes('temp')) return '°C';\n    if (key.includes('radius')) return 'km';\n    if (key.includes('mag')) return '';\n    if (key.includes('severity')) return '';\n    if (key.includes('limit')) return '';\n    return '';\n}\n\nmsg.payload = {\n    chatId: msg.chatId,\n    type: 'message',\n    content: message,\n    options: { parse_mode: 'Markdown' }\n};\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":2090,"y":1100,"wires":[["d087b6b20f7a633e","eaf621c6e1b3f4c6"]]},{"id":"f4d1","type":"telegram sender","z":"3aaa0fce23f69204","name":"","bot":"25bc3f9b27c564a8","haserroroutput":false,"outputs":1,"x":2970,"y":1100,"wires":[[]]},{"id":"cf0e80c549787b27","type":"subflow:9f9b26a721ad1b8e","z":"3aaa0fce23f69204","name":"","x":2300,"y":940,"wires":[["b6ff"],[]]},{"id":"d087b6b20f7a633e","type":"subflow:9f9b26a721ad1b8e","z":"3aaa0fce23f69204","name":"","x":2600,"y":1100,"wires":[["f4d1"],[]]},{"id":"33be3bbb2245bb3d","type":"function","z":"3aaa0fce23f69204","name":"Command message","func":"// Enhanced help/commands message\nmsg.payload = {\n    chatId: msg.chatId,\n    type: 'message',\n    content:\n        '🤖 *Welcome to Jarvis!*\\n\\n' +\n        '📍 **Location Commands**\\n' +\n        '• `/pin` – Share your GPS location\\n' +\n        '• `/loc athens` – Set location by city name\\n' +\n        '• `/loc london uk` – Include country code\\n\\n' +\n        '🔍 **Search & Info**\\n' +\n         '• `/status` – gives back info for the place\\n' +\n        '• `/find coffee` – Find nearby coffee shops\\n' +\n        '• `/find hospital` – Find emergency services\\n' +\n        '• `/traffic` – Check traffic incidents\\n\\n' +\n        '⚙️ **Smart Settings**\\n' +\n        '• `/set temp_high 35` – Hot weather alert at 35°C\\n' +\n        '• `/set quake_mag 4.0` – Earthquake alerts for 4.0+\\n' +\n        '• `/limits` – View your current settings\\n' +\n        '• `/config` – See all available options\\n\\n' +\n        '💡 *Tip: Just type* `/help` *anytime for this menu*',\n    options: { parse_mode: 'Markdown' }\n};\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1550,"y":1340,"wires":[["77e98d0d237fb8fd"]]},{"id":"3c3000074d28ad3d","type":"telegram sender","z":"3aaa0fce23f69204","name":"","bot":"25bc3f9b27c564a8","haserroroutput":false,"outputs":1,"x":2270,"y":1340,"wires":[[]]},{"id":"77e98d0d237fb8fd","type":"subflow:9f9b26a721ad1b8e","z":"3aaa0fce23f69204","name":"","x":1920,"y":1340,"wires":[["3c3000074d28ad3d"],[]]},{"id":"a19921b18c0dbd1a","type":"function","z":"3aaa0fce23f69204","name":"threshold message","func":"// Enhanced config message with better earthquake settings explanation\nmsg.payload = {\n    chatId: msg.chatId,\n    type: 'message',\n    content:\n        '⚙️ *Available Settings*\\n\\n' +\n        \n        '🌡️ **Weather Alerts**\\n' +\n        '• `temp_high` – Hot weather alert (°C)\\n' +\n        '• `temp_low` – Cold weather alert (°C)\\n' +\n        '• `aqi_limit` – Air quality alert threshold\\n\\n' +\n        \n        '🌍 **Earthquake Alerts**\\n' +\n        '• `quake_mag` – Local earthquake magnitude *(4.5)*\\n' +\n        '• `quake_radius` – Alert radius in km *(100)*\\n' +\n        '• `global_quake_mag` – Global major earthquake *(7.0)*\\n' +\n        '  _Get alerts for big earthquakes worldwide_\\n\\n' +\n        \n        '🚗 **Traffic & Search**\\n' +\n        '• `traffic_severity` – Traffic alert level 1-5 *(3)*\\n' +\n        '• `search_radius` – Search radius in km *(3)*\\n' +\n        '• `search_limit` – Max results to show *(5)*\\n\\n' +\n        \n        '🌿 **Health & Environment**\\n' +\n        '• `pollen_limit` – Pollen alert threshold\\n\\n' +\n        \n        '**Examples:**\\n' +\n        '`/set quake_mag 4.0` – Alert for 4.0+ quakes nearby\\n' +\n        '`/set quake_radius 50` – Monitor 50km radius\\n' +\n        '`/set global_quake 6.5` – Global alerts for 6.5+\\n' +\n        '`/limits` – View your current settings\\n\\n' +\n        \n        '_Default values shown in italics_ 🎯',\n    options: { parse_mode: 'Markdown' }\n};\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1530,"y":1220,"wires":[["aa3fe9a432e6f672"]]},{"id":"b6a3d20ac2479b26","type":"telegram sender","z":"3aaa0fce23f69204","name":"","bot":"25bc3f9b27c564a8","haserroroutput":false,"outputs":1,"x":2270,"y":1220,"wires":[[]]},{"id":"aa3fe9a432e6f672","type":"subflow:9f9b26a721ad1b8e","z":"3aaa0fce23f69204","name":"","x":1840,"y":1220,"wires":[["b6a3d20ac2479b26"],[]]},{"id":"5f9380041e16b837","type":"link out","z":"3aaa0fce23f69204","name":"find link out","mode":"link","links":["f27bb81945a5da8f"],"x":1335,"y":1440,"wires":[]},{"id":"77476dac05e877c3","type":"link out","z":"3aaa0fce23f69204","name":"threshold_status_link_out","mode":"link","links":["026693e28ceef151"],"x":1315,"y":1560,"wires":[]},{"id":"cce7b190c5acac5c","type":"link out","z":"3aaa0fce23f69204","name":"link out traffic","mode":"link","links":["952c21feb93e8c54"],"x":1335,"y":1340,"wires":[]},{"id":"eaf621c6e1b3f4c6","type":"debug","z":"3aaa0fce23f69204","name":"debug 21","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":2270,"y":1160,"wires":[]},{"id":"b107cba5e50f70a1","type":"link out","z":"3aaa0fce23f69204","name":"status link out","mode":"link","links":["in_loc"],"x":1285,"y":1620,"wires":[]},{"id":"8eabb42f7ced07d6","type":"link out","z":"60138d0ce5443227","name":"AirData_Link_Out","mode":"link","links":["37501662bdd218ac"],"x":1965,"y":1080,"wires":[]},{"id":"44abf97c28f8d2c3","type":"inject","z":"60138d0ce5443227","name":"inject_air","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":630,"y":940,"wires":[["702e83026ca99a43"]]},{"id":"ded8418ad7333cd8","type":"http request","z":"60138d0ce5443227","name":"weather","method":"GET","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":1060,"y":160,"wires":[["0666ccee63079292"]]},{"id":"9b79c1f8b37a7c5c","type":"function","z":"60138d0ce5443227","name":"OpenMeteo","func":"// 1) Get the user’s saved latitude/longitude (fallback to a default if not set)\nconst lat = global.get('user_lat') ?? 37.9838;\nconst lon = global.get('user_lon') ?? 23.7275;\n\n// 2) Build the Open-Meteo API URL\n//    Here we ask for current weather + hourly AQI (us_aqi), UTC timezone\nlet url =\n    \"https://api.open-meteo.com/v1/forecast?\" +\n    \"latitude=\" + lat +\n    \"&longitude=\" + lon +\n    \"&current=temperature_2m,relative_humidity_2m,apparent_temperature,is_day,precipitation,rain,showers,snowfall,weather_code,cloud_cover,pressure_msl,surface_pressure,wind_speed_10m,wind_direction_10m,wind_gusts_10m\" +\n    \"&timezone=auto\";\n\n// 3) Attach it to msg.url so the HTTP node can use it\nmsg.url = url;\nmsg.topic = 'weather';\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":830,"y":160,"wires":[["ded8418ad7333cd8"]]},{"id":"702e83026ca99a43","type":"function","z":"60138d0ce5443227","name":"AIR_QUA_NINJA_API","func":"const lat = global.get('user_lat') ?? 37.9838;\nconst lon = global.get('user_lon') ?? 23.7275;\n\n// Build the API-Ninjas URL with lat/lon parameters.\nmsg.url = `https://api.api-ninjas.com/v1/airquality?lat=${lat}&lon=${lon}`;\n\n// Supply your key in the request headers.\nmsg.headers = { 'X-Api-Key': 'JZgxieLF/a3oINCd/UfciQ==OBuaYUWgYeK22hKj' };\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1110,"y":980,"wires":[["53436dbd10ce2f9f"]]},{"id":"53436dbd10ce2f9f","type":"http request","z":"60138d0ce5443227","name":"airq","method":"GET","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":1360,"y":980,"wires":[["fd31581ed2b571c2"]]},{"id":"f36a695af1bc2b35","type":"inject","z":"60138d0ce5443227","name":"inject_weather","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"300","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":540,"y":160,"wires":[["9b79c1f8b37a7c5c"]]},{"id":"c801284417734e9d","type":"function","z":"60138d0ce5443227","name":"AIR_QUAL_OPEN_WEATHER","func":"const lat = global.get('user_lat') ?? 37.9838;\nconst lon = global.get('user_lon') ?? 23.7275;\n\nmsg.url = `https://api.openweathermap.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=11391688e640ec8af6ad02482a08686e`;\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1100,"y":1080,"wires":[["882ffef3773da264"]]},{"id":"017de67a777cc788","type":"inject","z":"60138d0ce5443227","name":"inject_air","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"3600","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":640,"y":1120,"wires":[["c801284417734e9d"]]},{"id":"882ffef3773da264","type":"http request","z":"60138d0ce5443227","name":"","method":"GET","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":1360,"y":1080,"wires":[["fd31fb5835c20007"]]},{"id":"b970b3248ade02de","type":"inject","z":"60138d0ce5443227","name":"inject_air","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":650,"y":1240,"wires":[["d2d464fdd68921c5"]]},{"id":"d2d464fdd68921c5","type":"function","z":"60138d0ce5443227","name":"AIR_QUAL_OPEN_METEO","func":"const lat = global.get('user_lat') ?? 37.9838;\nconst lon = global.get('user_lon') ?? 23.7275;\nconst vars = [\n  'pm2_5','pm10','dust',\n  'nitrogen_dioxide','sulphur_dioxide','ozone',\n  'methane','ammonia','carbon_dioxide',\n  'uv_index','uv_index_clear_sky','aerosol_optical_depth',\n  'alder_pollen','birch_pollen','grass_pollen',\n  'mugwort_pollen','olive_pollen','ragweed_pollen'\n].join(',');\n\nmsg.url =\n  `https://air-quality-api.open-meteo.com/v1/air-quality` +\n  `?latitude=${lat}&longitude=${lon}` +\n  `&hourly=${vars}` +\n`&timezone=auto`;\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1090,"y":1200,"wires":[["63feb7a38108e9c3"]]},{"id":"63feb7a38108e9c3","type":"http request","z":"60138d0ce5443227","name":"","method":"GET","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":1360,"y":1200,"wires":[["8abfabe06820b7ce"]]},{"id":"a437aeed63fa1660","type":"http request","z":"60138d0ce5443227","name":"weather","method":"GET","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":1060,"y":300,"wires":[["52e818ffc5671f5b","7a4190c1b3658f24"]]},{"id":"bb2ca6c4530b431f","type":"function","z":"60138d0ce5443227","name":"OpenWeather","func":"// Get user coordinates (or fall back to Athens)\nconst lat = global.get('user_lat') ?? 37.9838;\nconst lon = global.get('user_lon') ?? 23.7275;\n\nconst APPID = '11391688e640ec8af6ad02482a08686e';\n\n// Build One-Call 3.0 URL – we exclude minutely, hourly and alerts\nmsg.url =\n  `https://api.openweathermap.org/data/3.0/onecall` +\n  `?lat=${lat}&lon=${lon}` +\n  `&units=metric` +\n  `&exclude=minutely,hourly` +\n  `&appid=${APPID}`;\n\nmsg.lat=lat;\nmsg.lon=lon;\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":840,"y":300,"wires":[["a437aeed63fa1660"]]},{"id":"69bc69d49dca589d","type":"inject","z":"60138d0ce5443227","name":"inject_weather","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"1200","crontab":"","once":false,"onceDelay":"2","topic":"","payload":"","payloadType":"date","x":530,"y":320,"wires":[["bb2ca6c4530b431f"]]},{"id":"69e045c0a6e14314","type":"http request","z":"60138d0ce5443227","name":"weather","method":"GET","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":1360,"y":460,"wires":[["6f5abf382740ae06"]]},{"id":"965cb91509fb1095","type":"function","z":"60138d0ce5443227","name":"OpenMeteo_25ydata","func":"// OpenMeteo_25ydata function - improved version\nconst STEP_MAX = 25; \nconst step = msg.step ?? 0;\n\n// Safety check and completion\nif (step >= STEP_MAX) {\n    node.warn(`Historical data collection complete: ${STEP_MAX} years processed`);\n    return null;\n}\n\n// Get coordinates\nconst latRnd = Number(global.get('user_lat') ?? 37.9838);\nconst lonRnd = Number(global.get('user_lon') ?? 23.7275);\n\nif (isNaN(latRnd) || isNaN(lonRnd)) {\n    node.error('Invalid coordinates in global variables');\n    return null;\n}\n\n// Calculate target date (same day, different year)\nconst today = new Date();\nconst yyyy = today.getUTCFullYear() - step-1;\nconst mmdd = today.toISOString().slice(5, 10); // MM-DD format\nconst dateStr = `${yyyy}-${mmdd}`;\n\n// Build API URL for ERA5 historical data\nmsg.url = `https://archive-api.open-meteo.com/v1/era5` +\n    `?latitude=${latRnd}&longitude=${lonRnd}` +\n    `&start_date=${dateStr}&end_date=${dateStr}` +\n    `&hourly=temperature_2m&timezone=UTC`;\n\n// Pass forward for next processing\nmsg.lat_round = latRnd;\nmsg.lon_round = lonRnd;\nmsg.target_date = dateStr;\nmsg.step = step + 1;\n\n// Add delay to respect API rate limits\nmsg.delay = 200; // 200ms delay between requests\n\nnode.warn(`Fetching historical data: ${dateStr} (step ${step + 1}/${STEP_MAX})`);\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1080,"y":480,"wires":[["69e045c0a6e14314"]]},{"id":"84c9e5e797d48a63","type":"inject","z":"60138d0ce5443227","name":"inject_weather","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"00 04 * * *","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":440,"y":480,"wires":[["b2e933f771cfd171"]]},{"id":"81b6132c8c9d9630","type":"link in","z":"60138d0ce5443227","name":"Air_loc_change","links":["11d10040b77a0559"],"x":285,"y":1080,"wires":[["702e83026ca99a43","c801284417734e9d","d2d464fdd68921c5"]]},{"id":"fd31581ed2b571c2","type":"function","z":"60138d0ce5443227","name":"function 22","func":"// full JSON from Ninjas\nconst p = msg.payload;\nconst ts = new Date().toISOString();\nconst lat = global.get('user_lat') ?? 37.9838;\nconst lon = global.get('user_lon') ?? 23.7275;\nconst city = global.get('city_name')    || '';\nconst ctry = global.get('country_code') || '';\n\nmsg.topic = `\nINSERT INTO air_data\n  (ts_utc, latitude, longitude, city_name, city_code, source,\n   overall_aqi,\n   pm2_5, pm10, co, o3, no2, so2,\n   pm2_5_aqi, pm10_aqi, co_aqi, o3_aqi, no2_aqi, so2_aqi)\nVALUES\n  ('${ts}', ${lat}, ${lon}, '${city}', '${ctry}', 'api_ninjas',\n   ${p.overall_aqi},\n   ${p[\"PM2.5\"].concentration}, ${p.PM10.concentration},\n   ${p.CO.concentration},      ${p.O3.concentration},\n   ${p.NO2.concentration},     ${p.SO2.concentration},\n   ${p[\"PM2.5\"].aqi}, ${p.PM10.aqi},\n   ${p.CO.aqi},      ${p.O3.aqi},\n   ${p.NO2.aqi},     ${p.SO2.aqi})\nON CONFLICT(ts_utc, latitude, longitude, source) DO UPDATE SET\n   overall_aqi   = excluded.overall_aqi,\n   pm2_5         = excluded.pm2_5,\n   pm10          = excluded.pm10,\n   co            = excluded.co,\n   o3            = excluded.o3,\n   no2           = excluded.no2,\n   so2           = excluded.so2,\n   pm2_5_aqi     = excluded.pm2_5_aqi,\n   pm10_aqi      = excluded.pm10_aqi,\n   co_aqi        = excluded.co_aqi,\n   o3_aqi        = excluded.o3_aqi,\n   no2_aqi       = excluded.no2_aqi,\n   so2_aqi       = excluded.so2_aqi;\n\n`;\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1600,"y":980,"wires":[["8eabb42f7ced07d6"]]},{"id":"fd31fb5835c20007","type":"function","z":"60138d0ce5443227","name":"function 23","func":"const row = msg.payload.list[0];\nconst c = row.components;\nconst ts = new Date(row.dt * 1000).toISOString();\nconst lat = global.get('user_lat') ?? 37.9838;\nconst lon = global.get('user_lon') ?? 23.7275;\nconst city = global.get('city_name')    || '';\nconst ctry = global.get('country_code') || '';\nmsg.topic = `\nINSERT INTO air_data\n  (ts_utc, latitude, longitude, city_name, city_code, source,\n   overall_aqi,\n   pm2_5, pm10,\n   co, o3, no2, so2, nh3)\nVALUES\n  ('${ts}', ${lat}, ${lon}, '${city}', '${ctry}', 'openweather',\n   ${row.main.aqi},\n   ${c.pm2_5}, ${c.pm10},\n   ${c.co}, ${c.o3}, ${c.no2}, ${c.so2}, ${c.nh3})\nON CONFLICT(ts_utc, latitude, longitude, source) DO UPDATE SET\n   overall_aqi = excluded.overall_aqi,\n   pm2_5       = excluded.pm2_5,\n   pm10        = excluded.pm10,\n   co          = excluded.co,\n   o3          = excluded.o3,\n   no2         = excluded.no2,\n   so2         = excluded.so2,\n   nh3         = excluded.nh3;\n`;\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1580,"y":1080,"wires":[["8eabb42f7ced07d6"]]},{"id":"8abfabe06820b7ce","type":"function","z":"60138d0ce5443227","name":"function 24","func":"/**************************************************************************\n * Open-Meteo AQ + pollen  (today + 4-day forecast, hourly)\n * Emits ONE msg per row → sqlite node writes all 120 without errors.\n **************************************************************************/\n\nconst h     = msg.payload.hourly;\nconst offset = msg.payload.utc_offset_seconds ?? 0;\nconst lat   = global.get('user_lat')  ?? 37.9838;\nconst lon   = global.get('user_lon') ?? 23.7275;\nconst city  = global.get('city_name')    || '';\nconst ctry  = global.get('country_code') || '';\nconst toUtcOpenMeteo = (localIso, offsetSec) =>\n  new Date(Date.parse(localIso) - offsetSec * 1000).toISOString();\n\nfor (let i = 0; i < h.time.length; i++) {\n  const ts = toUtcOpenMeteo(h.time[i], msg.payload.utc_offset_seconds);\n\n  const sql = `\nINSERT INTO air_data\n  (ts_utc, latitude, longitude, city_name, city_code, source,\n   overall_aqi,\n   pm2_5, pm10, dust,\n   no2, so2, o3,\n   ch4, nh3, co2,\n   uv_index, uv_index_clear_sky, aod,\n   alder_pollen, birch_pollen, grass_pollen,\n   mugwort_pollen, olive_pollen, ragweed_pollen)\nVALUES\n  ('${ts}', ${lat}, ${lon}, '${city}', '${ctry}', 'openmeteo',\n   ${h.overall_aqi?.[i]        ?? 'NULL'},\n   ${h.pm2_5?.[i]              ?? 'NULL'},\n   ${h.pm10?.[i]               ?? 'NULL'},\n   ${h.dust?.[i]               ?? 'NULL'},\n   ${h.nitrogen_dioxide?.[i]   ?? 'NULL'},\n   ${h.sulphur_dioxide?.[i]    ?? 'NULL'},\n   ${h.ozone?.[i]              ?? 'NULL'},\n   ${h.methane?.[i]            ?? 'NULL'},\n   ${h.ammonia?.[i]            ?? 'NULL'},\n   ${h.carbon_dioxide?.[i]     ?? 'NULL'},\n   ${h.uv_index?.[i]           ?? 'NULL'},\n   ${h.uv_index_clear_sky?.[i] ?? 'NULL'},\n   ${h.aerosol_optical_depth?.[i] ?? 'NULL'},\n   ${h.alder_pollen?.[i]       ?? 'NULL'},\n   ${h.birch_pollen?.[i]       ?? 'NULL'},\n   ${h.grass_pollen?.[i]       ?? 'NULL'},\n   ${h.mugwort_pollen?.[i]     ?? 'NULL'},\n   ${h.olive_pollen?.[i]       ?? 'NULL'},\n   ${h.ragweed_pollen?.[i]     ?? 'NULL'})\nON CONFLICT(ts_utc, latitude, longitude, source) DO UPDATE SET\n   overall_aqi           = excluded.overall_aqi,\n   pm2_5                 = excluded.pm2_5,\n   pm10                  = excluded.pm10,\n   dust                  = excluded.dust,\n   no2                   = excluded.no2,\n   so2                   = excluded.so2,\n   o3                    = excluded.o3,\n   ch4                   = excluded.ch4,\n   nh3                   = excluded.nh3,\n   co2                   = excluded.co2,\n   uv_index              = excluded.uv_index,\n   uv_index_clear_sky    = excluded.uv_index_clear_sky,\n   aod                   = excluded.aod,\n   alder_pollen          = excluded.alder_pollen,\n   birch_pollen          = excluded.birch_pollen,\n   grass_pollen          = excluded.grass_pollen,\n   mugwort_pollen        = excluded.mugwort_pollen,\n   olive_pollen          = excluded.olive_pollen,\n   ragweed_pollen        = excluded.ragweed_pollen;\n`;\n\n  // emit this INSERT as its own message\n  node.send({ topic: sql });\n}\n\n// nothing to return; we’ve sent all rows\nreturn null;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1620,"y":1200,"wires":[["8eabb42f7ced07d6"]]},{"id":"2a6d15cbcd69e624","type":"link in","z":"60138d0ce5443227","name":"Weather_loc_change","links":["11d10040b77a0559"],"x":155,"y":280,"wires":[["9b79c1f8b37a7c5c","b2e933f771cfd171","bb2ca6c4530b431f"]]},{"id":"fd66f09790a51569","type":"link out","z":"60138d0ce5443227","name":"WeatherData_Link_Out","mode":"link","links":["4a3c35849decf5a1"],"x":1915,"y":280,"wires":[]},{"id":"0666ccee63079292","type":"function","z":"60138d0ce5443227","name":"INSERT_WEATHER_CURRENT_OM","func":"/*****************************************************************\n * Open-Meteo current  → weather_current_om  (all in real UTC)\n *****************************************************************/\nconst cur   = msg.payload.current;\nif (!cur) { node.warn('OM current missing'); return null; }\n\nconst offsetSec = msg.payload.utc_offset_seconds ?? 0;   // 10800 for Athens\nconst offsetHr  = offsetSec / 3600;                      //  3\nconst tzSuffix  = (() => {\n  const sign = offsetHr >= 0 ? '+' : '-';\n  const hh   = String(Math.abs(offsetHr)).padStart(2, '0');\n  return `${sign}${hh}:00`;                              // \"+03:00\"\n})();\n\n// cur.time is local clock (no Z) – add offset, then convert to UTC\nconst tsUtc = new Date(cur.time + tzSuffix).toISOString();\n\nconst lat  = global.get('user_lat')  ?? 37.9838;\nconst lon  = global.get('user_lon')  ?? 23.7275;\nconst city = global.get('city_name') || '';\nconst ctry = global.get('country_code') || '';\n\nmsg.topic = `\nINSERT INTO weather_current_om\n  (timestamp, latitude, longitude, city_name, city_code,\n   temperature_2m, relative_humidity_2m, apparent_temperature,\n   is_day, precipitation, rain, showers, snowfall,\n   weather_code, cloud_cover,\n   pressure_msl, surface_pressure,\n   wind_speed_10m, wind_direction_10m, wind_gusts_10m)\nVALUES\n  ('${tsUtc}', ${lat}, ${lon}, '${city}', '${ctry}',\n   ${cur.temperature_2m}, ${cur.relative_humidity_2m}, ${cur.apparent_temperature},\n   ${cur.is_day}, ${cur.precipitation}, ${cur.rain}, ${cur.showers}, ${cur.snowfall},\n   ${cur.weather_code}, ${cur.cloud_cover},\n   ${cur.pressure_msl}, ${cur.surface_pressure},\n   ${cur.wind_speed_10m}, ${cur.wind_direction_10m}, ${cur.wind_gusts_10m})\nON CONFLICT(timestamp,latitude,longitude) DO UPDATE SET\n   latitude             = excluded.latitude,\n   longitude            = excluded.longitude,\n   city_name            = excluded.city_name,\n   city_code            = excluded.city_code,\n   temperature_2m       = excluded.temperature_2m,\n   relative_humidity_2m = excluded.relative_humidity_2m,\n   apparent_temperature = excluded.apparent_temperature,\n   is_day               = excluded.is_day,\n   precipitation        = excluded.precipitation,\n   rain                 = excluded.rain,\n   showers              = excluded.showers,\n   snowfall             = excluded.snowfall,\n   weather_code         = excluded.weather_code,\n   cloud_cover          = excluded.cloud_cover,\n   pressure_msl         = excluded.pressure_msl,\n   surface_pressure     = excluded.surface_pressure,\n   wind_speed_10m       = excluded.wind_speed_10m,\n   wind_direction_10m   = excluded.wind_direction_10m,\n   wind_gusts_10m       = excluded.wind_gusts_10m;\n`;\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1390,"y":180,"wires":[["fd66f09790a51569"]]},{"id":"6f5abf382740ae06","type":"function","z":"60138d0ce5443227","name":"function 30","func":"// function 30 - improved weather data processing\nconst payload = msg.payload;\n\n// Validate API response\nif (!payload || !payload.hourly || !payload.hourly.temperature_2m) {\n    node.warn(`Invalid API response for step ${msg.step - 1}`);\n    return null;\n}\n\nconst h = payload.hourly;\nconst temps = h.temperature_2m;\n\n// Filter out null/undefined temperatures\nconst validTemps = temps.filter(temp => temp !== null && temp !== undefined && !isNaN(temp));\n\nif (validTemps.length === 0) {\n    node.warn(`No valid temperature data for ${msg.target_date}`);\n    return null;\n}\n\n// Calculate statistics\nconst max = Math.max(...validTemps);\nconst min = Math.min(...validTemps);\nconst mean = validTemps.reduce((a, b) => a + b, 0) / validTemps.length;\nconst dateUTC = h.time[0].slice(0, 10);\n\n// Format coordinates consistently\nconst lat = Number(msg.lat_round).toFixed(3);\nconst lon = Number(msg.lon_round).toFixed(3);\n\n// Get location info\nconst city = global.get('city_name') || '';\nconst ctry = global.get('country_code') || '';\n\n// Build SQL insert with proper error handling\nmsg.topic = `\nINSERT INTO weather_climate_history\n  (date_utc, lat_round, lon_round, city_name, city_code,\n   temp_max, temp_min, temp_mean, data_points)\nVALUES\n  ('${dateUTC}', ${lat}, ${lon}, '${city}', '${ctry}',\n   ${max.toFixed(2)}, ${min.toFixed(2)}, ${mean.toFixed(2)}, ${validTemps.length})\nON CONFLICT(date_utc, lat_round, lon_round) DO UPDATE SET\n   city_name   = excluded.city_name,\n   city_code   = excluded.city_code,\n   temp_max    = excluded.temp_max,\n   temp_min    = excluded.temp_min,\n   temp_mean   = excluded.temp_mean,\n   data_points = excluded.data_points;\n`;\n\n// Log progress\nnode.warn(`Processed ${dateUTC}: ${mean.toFixed(1)}°C (${validTemps.length} points)`);\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1610,"y":480,"wires":[["b8cd5991813224c3","fd66f09790a51569"]]},{"id":"b2e933f771cfd171","type":"function","z":"60138d0ce5443227","name":"function 31","func":"msg.step = 0;                // start counter\nreturn msg;                  // → Build Year URL\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":850,"y":480,"wires":[["965cb91509fb1095"]]},{"id":"b8cd5991813224c3","type":"switch","z":"60138d0ce5443227","name":"","property":"step","propertyType":"msg","rules":[{"t":"lt","v":"25","vt":"str"},{"t":"gte","v":"25","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":1890,"y":480,"wires":[["55a8c3364e12fe03"],[]]},{"id":"52e818ffc5671f5b","type":"function","z":"60138d0ce5443227","name":"INSERT_WEATHER_CURRENT_OW","func":"/*****************************************************************\n * Expected msg.payload from:\n *   https://api.openweathermap.org/data/3.0/onecall?exclude=minutely,hourly,daily,alerts\n *****************************************************************/\nconst c = msg.payload.current;\nif (!c) { node.warn('OW missing current'); return null; }\n\nconst ts = new Date(c.dt * 1000).toISOString();\nconst lat = global.get('user_lat') ?? 37.9838;\nconst lon = global.get('user_lon') ?? 23.7275;\nconst city = global.get('city_name') || '';\nconst ctry = global.get('country_code') || '';\n\nmsg.topic = `\nINSERT INTO weather_current_ow\n  (timestamp, latitude, longitude, city_name, city_code,\n   temperature, humidity, uv_index,\n   wind_speed, wind_dir, wind_gust,\n   weathercode, pressure, sunrise, sunset)\nVALUES\n  ('${ts}', ${lat}, ${lon}, '${city}', '${ctry}',\n   ${c.temp}, ${c.humidity}, ${c.uvi},\n   ${c.wind_speed}, ${c.wind_deg}, ${c.wind_gust ?? 'NULL'},\n   ${c.weather[0].id}, ${c.pressure},\n   '${new Date(c.sunrise * 1000).toISOString()}',\n   '${new Date(c.sunset * 1000).toISOString()}')\nON CONFLICT(timestamp,latitude,longitude) DO UPDATE SET\n   latitude   = excluded.latitude,\n   longitude  = excluded.longitude,\n   city_name  = excluded.city_name,\n   city_code  = excluded.city_code,\n   temperature= excluded.temperature,\n   humidity   = excluded.humidity,\n   uv_index   = excluded.uv_index,\n   wind_speed = excluded.wind_speed,\n   wind_dir   = excluded.wind_dir,\n   wind_gust  = excluded.wind_gust,\n   weathercode= excluded.weathercode,\n   pressure   = excluded.pressure,\n   sunrise    = excluded.sunrise,\n   sunset     = excluded.sunset;\n`;\n\nreturn msg;        // → SQLite\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1390,"y":280,"wires":[["3a30a1ee4e16acfc","fd66f09790a51569"]]},{"id":"7a4190c1b3658f24","type":"function","z":"60138d0ce5443227","name":"INSERT_OPEN_WEATHER_FORCAST","func":"/*****************************************************************\n * msg.payload.daily[]  (array of 7–8 days)\n *****************************************************************/\nconst dArr = msg.payload.daily?.slice(0, 7) || [];\nif (!dArr.length) { node.warn('OW forecast missing'); return null; }\n\nconst callTS = new Date(msg.payload.current.dt * 1000).toISOString();\nconst lat = global.get('user_lat') ?? 37.9838;\nconst lon = global.get('user_lon') ?? 23.7275;\nconst city = global.get('city_name')    || '';\nconst ctry = global.get('country_code') || '';\n\ndArr.forEach(d => {\n    const fDay = new Date(d.dt * 1000).toISOString().slice(0, 10);  // YYYY-MM-DD\n\n    node.send({\n        topic: `\nINSERT INTO weather_forecast_ow\n  (ts_utc, forecast_day, latitude, longitude, city_name, city_code,\n   temp_max, temp_min, humidity, uv_index,\n   pop, weathercode, sunrise, sunset)\nVALUES\n  ('${callTS}', '${fDay}', ${lat}, ${lon}, '${city}', '${ctry}',\n   ${d.temp.max}, ${d.temp.min}, ${d.humidity}, ${d.uvi},\n   ${d.pop}, ${d.weather[0].id},\n   '${new Date(d.sunrise * 1000).toISOString()}',\n   '${new Date(d.sunset * 1000).toISOString()}')\nON CONFLICT(ts_utc, forecast_day,latitude,longitude) DO UPDATE SET\n   latitude   = excluded.latitude,\n   longitude  = excluded.longitude,\n   city_name  = excluded.city_name,\n   city_code  = excluded.city_code,\n   temp_max   = excluded.temp_max,\n   temp_min   = excluded.temp_min,\n   humidity   = excluded.humidity,\n   uv_index   = excluded.uv_index,\n   pop        = excluded.pop,\n   weathercode= excluded.weathercode,\n   sunrise    = excluded.sunrise,\n   sunset     = excluded.sunset;\n`\n    });\n});\n\nreturn null;  ","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1420,"y":380,"wires":[["fd66f09790a51569","12f297380361d7c9"]]},{"id":"55a8c3364e12fe03","type":"delay","z":"60138d0ce5443227","name":"","pauseType":"delayv","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":1410,"y":640,"wires":[["965cb91509fb1095"]]},{"id":"12f297380361d7c9","type":"function","z":"60138d0ce5443227","name":"WEATHER MONITORING FUN","func":"// ===================================================================\n// 2. FORECAST MONITORING FUNCTION - Add after forecast insertion\n// ===================================================================\n// Place this in WeatherData_API tab after INSERT_OPEN_WEATHER_FORCAST\n\n/***************************************************************************\n * Daily Forecast Monitor - Checks today's forecast against thresholds\n * Only checks today's forecast, sends once per day\n ***************************************************************************/\n\nconst forecastDaily = msg.payload?.daily;\nif (!forecastDaily || !forecastDaily.length) {\n    return null;\n}\n\nconst todayForecast = forecastDaily[0]; // Today is index 0\nconst chatId = global.get('default_chat');\n\nif (!chatId || !todayForecast?.temp) {\n    return null;\n}\n\n// Get user thresholds\nconst tempHigh = Number(global.get(`threshold:${chatId}:temp_high`) ?? 35);\nconst tempLow = Number(global.get(`threshold:${chatId}:temp_low`) ?? 5);\n\nconst maxTemp = todayForecast.temp.max;\nconst minTemp = todayForecast.temp.min;\n\n// ═══════════════════════════════════════════════════════════════════\n// FORECAST THRESHOLD CHECKING - 1°C Advance Warning\n// ═══════════════════════════════════════════════════════════════════\n\nlet forecastAlerts = [];\n\n// Check max temperature forecast\nif (maxTemp >= tempHigh) {\n    forecastAlerts.push(`🔥 **HIGH HEAT**: Max ${maxTemp.toFixed(1)}°C ≥ ${tempHigh}°C`);\n} else if (maxTemp >= (tempHigh - 1)) {\n    forecastAlerts.push(`🌡️ **APPROACHING HIGH**: Max ${maxTemp.toFixed(1)}°C near ${tempHigh}°C threshold`);\n}\n\n// Check min temperature forecast\nif (minTemp <= tempLow) {\n    forecastAlerts.push(`🧊 **COLD**: Min ${minTemp.toFixed(1)}°C ≤ ${tempLow}°C`);\n} else if (minTemp <= (tempLow + 1)) {\n    forecastAlerts.push(`❄️ **APPROACHING COLD**: Min ${minTemp.toFixed(1)}°C near ${tempLow}°C threshold`);\n}\n\n// ═══════════════════════════════════════════════════════════════════\n// DAILY FORECAST ALERT - Send once per day\n// ═══════════════════════════════════════════════════════════════════\n\nif (forecastAlerts.length > 0) {\n    const today = new Date().toISOString().slice(0, 10); // YYYY-MM-DD\n    const forecastKey = `forecast_sent:${chatId}:${today}`;\n\n    // Only send once per day\n    if (!global.get(forecastKey)) {\n        global.set(forecastKey, true);\n\n        const alertText = `📅 **Today's Weather Alert**\\n\\n` +\n            forecastAlerts.join('\\n') + '\\n\\n' +\n            `📊 **Full Forecast**\\n` +\n            `High: ${maxTemp.toFixed(1)}°C\\n` +\n            `Low: ${minTemp.toFixed(1)}°C\\n\\n` +\n            `🎯 *Your thresholds: ≥${tempHigh}°C, ≤${tempLow}°C*`;\n\n        node.send({\n            chatId: chatId,\n            payload: {\n                content: alertText,\n                options: { parse_mode: 'Markdown' }\n            }\n        });\n\n        node.warn(`Daily forecast alert sent for ${today}`);\n    }\n}\n\nreturn null;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2050,"y":380,"wires":[["0d693146553c50a6"]]},{"id":"3a30a1ee4e16acfc","type":"function","z":"60138d0ce5443227","name":" WEATHER MONITORING FUNC","func":"\n// ===================================================================\n// 1. WEATHER MONITORING FUNCTION - Add after weather data insertion\n// ===================================================================\n// Place this in WeatherData_API tab after INSERT_WEATHER_CURRENT_OW\n\n/***************************************************************************\n * Smart Temperature Monitor - Checks thresholds with 1°C advance warning\n * Only sends alerts when approaching thresholds (not constant spam)\n ***************************************************************************/\n\n// Get current temperature from the weather update\nconst currentWeather = msg.payload?.current;\nif (!currentWeather || !currentWeather.temp) {\n    return null; // No current temp data\n}\n\nconst currentTemp = currentWeather.temp;\nconst chatId = global.get('default_chat');\n\nif (!chatId) {\n    return null;\n}\n\n// Get user thresholds\nconst tempHigh = Number(global.get(`threshold:${chatId}:temp_high`) ?? 35);\nconst tempLow = Number(global.get(`threshold:${chatId}:temp_low`) ?? 5);\n\n// ═══════════════════════════════════════════════════════════════════\n// SMART THRESHOLD CHECKING - 1°C Advance Warning System\n// ═══════════════════════════════════════════════════════════════════\n\nlet alerts = [];\n\n// HIGH TEMPERATURE ALERTS\nif (currentTemp >= tempHigh) {\n    // Already at threshold - URGENT\n    alerts.push({\n        type: 'critical_high',\n        temp: currentTemp,\n        threshold: tempHigh,\n        icon: '🚨',\n        message: `**CRITICAL**: ${currentTemp.toFixed(1)}°C ≥ ${tempHigh}°C threshold!`\n    });\n} else if (currentTemp >= (tempHigh - 1)) {\n    // Approaching threshold - WARNING\n    alerts.push({\n        type: 'warning_high',\n        temp: currentTemp,\n        threshold: tempHigh,\n        icon: '🔥',\n        message: `**WARNING**: ${currentTemp.toFixed(1)}°C approaching ${tempHigh}°C threshold!`\n    });\n}\n\n// LOW TEMPERATURE ALERTS\nif (currentTemp <= tempLow) {\n    // Already at threshold - URGENT\n    alerts.push({\n        type: 'critical_low',\n        temp: currentTemp,\n        threshold: tempLow,\n        icon: '🧊',\n        message: `**CRITICAL**: ${currentTemp.toFixed(1)}°C ≤ ${tempLow}°C threshold!`\n    });\n} else if (currentTemp <= (tempLow + 1)) {\n    // Approaching threshold - WARNING\n    alerts.push({\n        type: 'warning_low',\n        temp: currentTemp,\n        threshold: tempLow,\n        icon: '❄️',\n        message: `**WARNING**: ${currentTemp.toFixed(1)}°C approaching ${tempLow}°C threshold!`\n    });\n}\n\n// ═══════════════════════════════════════════════════════════════════\n// ANTI-SPAM SYSTEM - Only send if state changed\n// ═══════════════════════════════════════════════════════════════════\n\nif (alerts.length > 0) {\n    const alertKey = `temp_state:${chatId}`;\n    const currentState = alerts.map(a => a.type).sort().join(',');\n    const lastState = global.get(alertKey);\n\n    // Only send if state changed (prevents spam)\n    if (lastState !== currentState) {\n        global.set(alertKey, currentState);\n\n        alerts.forEach(alert => {\n            const alertText = `${alert.icon} **Temperature Alert**\\n\\n` +\n                `${alert.message}\\n\\n` +\n                `📍 ${global.get('city_name') || 'Current location'}\\n` +\n                `⏰ ${new Date().toLocaleTimeString('en-US', { hour12: false })}`;\n\n            node.send({\n                chatId: chatId,\n                payload: {\n                    content: alertText,\n                    options: { parse_mode: 'Markdown' }\n                }\n            });\n        });\n\n        node.warn(`Temperature alert sent: ${currentState}`);\n    } else {\n        node.warn(`Temperature alert skipped - same state: ${currentState}`);\n    }\n} else {\n    // Clear alert state when no alerts\n    global.set(`temp_state:${chatId}`, '');\n}\n\nreturn null;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2090,"y":200,"wires":[["099f73fbd1b0a521"]]},{"id":"0d693146553c50a6","type":"subflow:9f9b26a721ad1b8e","z":"60138d0ce5443227","name":"","x":2400,"y":380,"wires":[["b6fdd27367bf7c53"],[]]},{"id":"099f73fbd1b0a521","type":"subflow:9f9b26a721ad1b8e","z":"60138d0ce5443227","name":"","x":2460,"y":200,"wires":[["53201939c4d311ad"],[]]},{"id":"b6fdd27367bf7c53","type":"telegram sender","z":"60138d0ce5443227","name":"","bot":"25bc3f9b27c564a8","haserroroutput":false,"outputs":1,"x":2710,"y":380,"wires":[[]]},{"id":"53201939c4d311ad","type":"telegram sender","z":"60138d0ce5443227","name":"","bot":"25bc3f9b27c564a8","haserroroutput":false,"outputs":1,"x":2790,"y":200,"wires":[[]]},{"id":"eq_inject","type":"inject","z":"15690565a7bc7bb7","name":"5-min","props":[],"repeat":"300","crontab":"","once":false,"onceDelay":"","topic":"","x":130,"y":560,"wires":[["bf63faedaed8b09e","eq_usgs","0cb7aed809f7e06d"]]},{"id":"eq_usgs","type":"http request","z":"15690565a7bc7bb7","name":"USGS significant_hour","method":"GET","ret":"txt","paytoqs":"ignore","url":"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/significant_hour.geojson","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":600,"y":520,"wires":[["983938909e379fcf"]]},{"id":"eq_emsc","type":"http request","z":"15690565a7bc7bb7","name":"EMSC feed","method":"GET","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":870,"y":780,"wires":[["eq_parse"]]},{"id":"eq_parse","type":"function","z":"15690565a7bc7bb7","name":"parse+dEdupe","func":"// figure out which feed this message is from\nconst rows = [];\nconst feed = msg.feed || (msg.url && msg.url.includes('seismicportal') ? 'emsc'\n  : 'usgs');\nlet data;\n\ntry {\n  data = (typeof msg.payload === 'string')\n    ? JSON.parse(msg.payload || '{}')\n    : (msg.payload || {});\n} catch (e) {\n  node.warn('Bad JSON: ' + e.message);\n  return null;\n}\n\n/* ---------- split into a uniform array --------------------------------- */\nconst items = data.features || data.events || [];\nfor (const q of items) {\n\n  /* ---- field extraction, format-agnostic ---------------------------- */\n  const prop = q.properties || q;                // GeoJSON vs plain JSON\n  const geom = q.geometry || { coordinates: [prop.lon, prop.lat, prop.depth] };\n\n  const quake = {\n    quake_id: prop.id || q.id,\n    ts_utc: prop.time,\n    last_upd: prop.lastupdate,\n    lat: geom.coordinates[1],\n    lon: geom.coordinates[0],\n    depth_km: geom.coordinates[2],\n    magnitude: prop.mag ?? prop.magnitude,\n    mag_type: prop.magtype ?? prop.mag_type,\n    region: prop.flynn_region || prop.region || '—',\n    ev_type: prop.evtype,\n    auth: prop.auth,\n    source_id: prop.source_id,\n    source_cat: prop.source_catalog,\n    src: feed\n  };\n  rows.push(quake);\n}\n\n\n\nmsg.payload = rows;  // array of objects\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1160,"y":780,"wires":[["eq_sql"]]},{"id":"eq_sql","type":"function","z":"15690565a7bc7bb7","name":"SQL + alert logic","func":"// helper\nconst haversine=(a,b,c,d)=>{const R=6371;const toRad=x=>x*Math.PI/180;const dLat=toRad(c-a);const dLon=toRad(d-b);const A=Math.sin(dLat/2)**2+Math.cos(toRad(a))*Math.cos(toRad(c))*Math.sin(dLon/2)**2;return 2*R*Math.asin(Math.sqrt(A));};\n\nconst userLat = global.get('user_lat');\nconst userLon = global.get('user_lon');\nconst chatId  = global.get('default_chat');\nconst nearMag   = Number(global.get(`thr_${chatId}_near_quake_mag`)   ?? 4.5);\nconst nearRad   = Number(global.get(`thr_${chatId}_near_quake_radius`)?? 10);\nconst globalMag = Number(global.get(`thr_${chatId}_global_quake_mag`) ?? 6.0);\n\nfor (const quake of msg.payload){\n  const sql = `\nINSERT INTO eq_events\n    (quake_id, ts_utc, last_update_utc, lat, lon, depth_km,\n      magnitude, mag_type, region, ev_type, auth,\n      source_id, source_catalog, src)\n  VALUES\n    ('${quake.quake_id}', '${quake.ts_utc}', '${quake.last_upd}',\n      ${ quake.lat }, ${ quake.lon }, ${ quake.depth_km },\n      ${ quake.magnitude }, '${quake.mag_type}', '${quake.region}',\n      '${quake.ev_type}', '${quake.auth}',\n      '${quake.source_id}', '${quake.source_cat}', '${quake.src}')\nON CONFLICT(quake_id) DO UPDATE SET\n  last_update_utc = excluded.last_update_utc,\n    magnitude = excluded.magnitude,\n    depth_km = excluded.depth_km,\n    region = excluded.region; `;\n\n    /* ---- push to first output (SQLite) ---- */\n    node.send([{ topic: sql }, null]);\n\n    /* ---- alert logic can go here (2nd output) or stay in a later node */\n}\n\nreturn null;         // we emitted via node.send()","outputs":2,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1540,"y":640,"wires":[["sqlite_node"],["7b5373a85614cf01"]]},{"id":"sqlite_node","type":"sqlite","z":"15690565a7bc7bb7","mydb":"473f5bc0183beb94","sql":"","name":"SQLite eq_events","x":1830,"y":360,"wires":[["de603dcda6198ab5"]]},{"id":"7b5373a85614cf01","type":"subflow:9f9b26a721ad1b8e","z":"15690565a7bc7bb7","name":"","x":1840,"y":740,"wires":[[],[]]},{"id":"bf63faedaed8b09e","type":"function","z":"15690565a7bc7bb7","name":"function 26","func":"/**************************************************************************\n * build_seismicportal_url   (HTTP polling, no require)\n **************************************************************************/\n\n// 1) current location ------------------------------------------------------\nconst lat = global.get('user_lat');\nconst lon = global.get('user_lon');\nif (lat === undefined || lon === undefined) {\n    node.status({fill:\"yellow\",shape:\"ring\",text:\"no location yet\"});\n    return null;\n}\n\n// 2) thresholds ------------------------------------------------------------\nconst chatId   = global.get('default_chat');\nconst nearMag  = Number(global.get(`thr_${chatId}_near_quake_mag`) ?? 1.5);\nconst nearRad  = Number(global.get(`thr_${chatId}_near_quake_radius`)?? 100);\n\n// 3) 20-minute look-back ---------------------------------------------------\nconst locChanged = flow.get('loc_changed_at') ?? Date.now();\nconst lookbackMs = 60 * 60 * 1000;\nconst startISO   = new Date(\n        Math.max(locChanged - lookbackMs, Date.now() - lookbackMs)\n      ).toISOString();                       // e.g. 2025-06-11T19:30:00.000Z\n\n// 4) build URL -------------------------------------------------------------\nlet url = \"https://www.seismicportal.eu/fdsnws/event/1/query?\"\n    + \"limit=200\"\n    + \"&start=\" + encodeURIComponent(startISO)   // encode \":\" & \".\"\n    + \"&lat=\" + lat\n    + \"&lon=\" + lon\n    + \"&maxradius=\" + nearRad\n    + \"&format=json\"\n    + \"&minmag=\" + nearMag;\n\nmsg.url = url;\n\n// 5) debug badge -----------------------------------------------------------\nnode.status({\n    fill:'green',\n    shape:'dot',\n    text:`M≥${nearMag}, ≤${nearRad} km since ${startISO.slice(11,19)}Z`\n});\nmsg.feed = \"emsc\";          // tag the message before it goes to HTTP\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":570,"y":780,"wires":[["eq_emsc"]]},{"id":"08eda95e2933de07","type":"link in","z":"15690565a7bc7bb7","name":"link in 2","links":["11d10040b77a0559"],"x":165,"y":780,"wires":[["bf63faedaed8b09e","eq_usgs"]]},{"id":"de603dcda6198ab5","type":"debug","z":"15690565a7bc7bb7","name":"debug 33","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":2050,"y":360,"wires":[]},{"id":"0cb7aed809f7e06d","type":"http request","z":"15690565a7bc7bb7","name":"USGS 4.5+_hour","method":"GET","ret":"txt","paytoqs":"ignore","url":"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/4.5_hour.geojson","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":590,"y":620,"wires":[["9e26f77b7bf1d918"]]},{"id":"fe3a3da14d26ade8","type":"http request","z":"15690565a7bc7bb7","name":"USGS significant_week","method":"GET","ret":"txt","paytoqs":"ignore","url":"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/significant_week.geojson","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":630,"y":280,"wires":[["65a378cc38126678"]]},{"id":"64ddf79111e728d5","type":"http request","z":"15690565a7bc7bb7","name":"USGS 4.5+_week","method":"GET","ret":"txt","paytoqs":"ignore","url":"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/4.5_week.geojson","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":610,"y":380,"wires":[["d8f0dc04eac8bd61"]]},{"id":"983938909e379fcf","type":"change","z":"15690565a7bc7bb7","name":"","rules":[{"t":"set","p":"feed","pt":"msg","to":"sgs_sig_hr","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":890,"y":520,"wires":[["741c347e6e165b4f"]]},{"id":"9e26f77b7bf1d918","type":"change","z":"15690565a7bc7bb7","name":"","rules":[{"t":"set","p":"feed","pt":"msg","to":"usgs_4p5_hr","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":870,"y":620,"wires":[["741c347e6e165b4f"]]},{"id":"65a378cc38126678","type":"change","z":"15690565a7bc7bb7","name":"","rules":[{"t":"set","p":"feed","pt":"msg","to":"usgs_sig_wk","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":890,"y":280,"wires":[["741c347e6e165b4f"]]},{"id":"d8f0dc04eac8bd61","type":"change","z":"15690565a7bc7bb7","name":"","rules":[{"t":"set","p":"feed","pt":"msg","to":"usgs_4p5_wk","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":890,"y":380,"wires":[["741c347e6e165b4f"]]},{"id":"fd6e9f3a326e953b","type":"inject","z":"15690565a7bc7bb7","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"00 00 * * *","once":true,"onceDelay":"1","topic":"","payload":"","payloadType":"date","x":150,"y":360,"wires":[["fe3a3da14d26ade8","64ddf79111e728d5"]]},{"id":"741c347e6e165b4f","type":"function","z":"15690565a7bc7bb7","name":"function 38","func":"/**************************************************************************\n * usgs_parse → produces one UPSERT per quake\n *  output[0] : {topic: SQL}  → sqlite node\n *  output[1] : (reserved for future alerts)  (leave unwired for now)\n **************************************************************************/\n\nconst outToSQLite = 0;\n\nconst raw = (typeof msg.payload === 'string')\n    ? JSON.parse(msg.payload || '{}')\n    : (msg.payload || {});\n\n(raw.features || []).forEach(f => {\n    const p = f.properties;\n    const g = f.geometry;\n\n    const quake_id = p.code;                     // unique ID\n    const sql = `\nINSERT INTO eq_events\n  (quake_id, ts_utc, last_update_utc, lat, lon, depth_km,\n   magnitude, mag_type, region, ev_type, auth,\n   felt, significance, src)\nVALUES\n  ('${quake_id}',\n   '${new Date(p.time).toISOString()}',\n   '${new Date(p.updated).toISOString()}',\n   ${g.coordinates[1]}, ${g.coordinates[0]}, ${g.coordinates[2]},\n   ${p.mag}, '${p.magType}',\n   '${p.place.replace(/'/g, \"''\")}',\n   'ke', '${p.net}',\n   ${p.felt ?? 'NULL'},\n   ${p.sig},\n   'usgs')\nON CONFLICT(quake_id) DO UPDATE SET\n   last_update_utc = excluded.last_update_utc,\n   magnitude       = excluded.magnitude,\n   depth_km        = excluded.depth_km,\n   region          = excluded.region,\n   felt            = excluded.felt,\n   significance    = excluded.significance;\n`;\n\n    node.send([{ topic: sql }, null]);   // out[0] → SQLite\n});\n\nreturn null;    // we already emitted SQL statements\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1350,"y":420,"wires":[["sqlite_node"],[]]},{"id":"3a1ce1d23c844ac0","type":"inject","z":"cf7fd95287b4d4a1","name":"5-min","props":[],"repeat":"300","crontab":"","once":false,"onceDelay":"","topic":"","x":430,"y":820,"wires":[["f6436bea38c9c1d3","f73dbaf8d9e49b69","193b36376ebeaabc","71c0a01bbf9c7a52"]]},{"id":"f6436bea38c9c1d3","type":"http request","z":"cf7fd95287b4d4a1","name":"USGS significant_hour","method":"GET","ret":"txt","paytoqs":"ignore","url":"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/significant_hour.geojson","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":1060,"y":780,"wires":[["1278a9ed3a497dc3"]]},{"id":"6a48c287ac13101f","type":"http request","z":"cf7fd95287b4d4a1","name":"EMSC feed","method":"GET","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":1390,"y":1060,"wires":[["e06e217a4adfd3ff"]]},{"id":"e06e217a4adfd3ff","type":"function","z":"cf7fd95287b4d4a1","name":"parse+dEdupe","func":"// ===================================================================\n// 2. parse+dEdupe Function (Clean Version with Essential Debug)\n// ===================================================================\n/***************************************************************************\n * EMSC Parser with Distance Filtering (Clean Version)\n ***************************************************************************/\nconst haversine = (lat1, lon1, lat2, lon2) => {\n  const R = 6371;\n  const toRad = x => x * Math.PI / 180;\n  const dLat = toRad(lat2 - lat1);\n  const dLon = toRad(lon2 - lon1);\n  const a = Math.sin(dLat / 2) ** 2 + \n            Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * \n            Math.sin(dLon / 2) ** 2;\n  return 2 * R * Math.asin(Math.sqrt(a));\n};\n\nconst rows = [];\nconst feed = msg.feed || (msg.url && msg.url.includes('seismicportal') ? 'emsc' : 'usgs');\nlet data;\n\ntry {\n  data = (typeof msg.payload === 'string')\n    ? JSON.parse(msg.payload || '{}')\n    : (msg.payload || {});\n} catch (e) {\n  node.warn('Bad JSON: ' + e.message);\n  return null;\n}\n\n// Get user location and radius for filtering\nconst userLat = global.get('user_lat');\nconst userLon = global.get('user_lon');\nconst chatId = global.get('default_chat');\nconst filterRadius = Number(\n  global.get(`threshold:${chatId}:quake_radius`) ?? 100\n);\n\nnode.warn(`Client-side filtering: user at ${userLat}, ${userLon}, radius ${filterRadius}km`);\n\nconst items = data.features || data.events || [];\nlet filteredCount = 0;\n\nfor (const q of items) {\n  const prop = q.properties || q;\n  const geom = q.geometry || { coordinates: [prop.lon, prop.lat, prop.depth] };\n\n  // Calculate distance BEFORE adding to results\n  if (userLat !== undefined && userLon !== undefined) {\n    const distance = haversine(userLat, userLon, geom.coordinates[1], geom.coordinates[0]);\n    \n    // Skip earthquakes outside our radius\n    if (distance > filterRadius) {\n      filteredCount++;\n      continue;\n    }\n    \n    node.warn(`Keeping earthquake at ${distance.toFixed(1)}km: ${q.id || prop.id} M${prop.mag ?? prop.magnitude}`);\n  }\n\n  // Fix timestamp handling\n  let timestampMs;\n  if (prop.time) {\n    timestampMs = new Date(prop.time).getTime();\n  } else {\n    timestampMs = Date.now();\n  }\n\n  let lastUpdateMs;\n  if (prop.lastupdate) {\n    lastUpdateMs = new Date(prop.lastupdate).getTime();\n  } else {\n    lastUpdateMs = timestampMs;\n  }\n\n  const quake = {\n    quake_id: prop.id || q.id,\n    ts_utc: timestampMs,\n    last_upd: lastUpdateMs,\n    lat: geom.coordinates[1],\n    lon: geom.coordinates[0],\n    depth_km: geom.coordinates[2],\n    magnitude: prop.mag ?? prop.magnitude,\n    mag_type: prop.magtype ?? prop.mag_type,\n    region: prop.flynn_region || prop.region || prop.place || '—',\n    ev_type: prop.evtype,\n    auth: prop.auth,\n    source_id: prop.source_id,\n    source_cat: prop.source_catalog,\n    src: feed\n  };\n  rows.push(quake);\n}\n\nnode.warn(`EMSC Parser: Found ${items.length} total, filtered out ${filteredCount}, keeping ${rows.length} earthquakes`);\n\nmsg.payload = rows;\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1700,"y":1060,"wires":[["275a5c52d0dca36f","b7734ab84f8121f4"]]},{"id":"275a5c52d0dca36f","type":"function","z":"cf7fd95287b4d4a1","name":"SQL + alert logic","func":"// 3. SQL + Alert Logic Function (Enhanced with Forced Status)\n// ===================================================================\n/***************************************************************************\n * EMSC SQL + Alert Logic with Status Messaging\n ***************************************************************************/\n\n// ---------- helpers -----------------------------------------------------\nconst haversine = (lat1, lon1, lat2, lon2) => {\n  const R = 6371;\n  const toRad = x => x * Math.PI / 180;\n  const dLat = toRad(lat2 - lat1);\n  const dLon = toRad(lon2 - lon1);\n  const a =\n    Math.sin(dLat / 2) ** 2 +\n    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *\n    Math.sin(dLon / 2) ** 2;\n  return 2 * R * Math.asin(Math.sqrt(a));\n};\n\nconst iso = t => new Date(t).toISOString();\nconst timeAgo = (timestamp) => {\n  const now = Date.now();\n  const diffMs = now - timestamp;\n  const diffMins = Math.floor(diffMs / 60000);\n  const diffHours = Math.floor(diffMins / 60);\n  const diffDays = Math.floor(diffHours / 24);\n\n  if (diffMins < 1) return 'just now';\n  if (diffMins < 60) return `${diffMins}m ago`;\n  if (diffHours < 24) return `${diffHours}h ago`;\n  if (diffDays < 7) return `${diffDays}d ago`;\n  return 'over a week ago';\n};\n\n// ---------- user context & thresholds -----------------------------------\nconst chatId = global.get('default_chat');\nconst uLat = global.get('user_lat');\nconst uLon = global.get('user_lon');\n\nif (!chatId || uLat === undefined || uLon === undefined) {\n  return;\n}\n\n// Use correct threshold naming\nconst nearMag = Number(\n  global.get(`threshold:${chatId}:quake_mag`) ??\n  global.get(`threshold:${chatId}:near_quake_mag`) ??\n  4.5\n);\nconst nearRad = Number(\n  global.get(`threshold:${chatId}:quake_radius`) ??\n  global.get(`threshold:${chatId}:near_quake_radius`) ??\n  100\n);\nconst globalMag = Number(\n  global.get(`threshold:${chatId}:global_quake_mag`) ??\n  global.get(`threshold:${chatId}:global_quake`) ??\n  7.0\n);\n\n// Get/initialize alert tracking\nconst alertedQuakes = global.get('alerted_earthquakes') || new Set();\n\n// ---------- iterate rows -------------------------------------------------\nconst rows = msg.payload || [];\nlet newAlerts = 0;\n\nfor (const q of rows) {\n\n  /* 1. UPSERT with source prefix to avoid conflicts ------------------- */\n  const prefixed_id = `emsc_${q.quake_id}`;\n\n  const sql = `\nINSERT INTO eq_events\n  (quake_id, ts_utc, last_update_utc, lat, lon, depth_km,\n   magnitude, mag_type, region, ev_type, auth,\n   source_id, source_catalog, src)\nVALUES\n  ('${prefixed_id}',\n   '${iso(q.ts_utc)}',\n   '${iso(q.last_upd)}',\n   ${q.lat}, ${q.lon}, ${q.depth_km},\n   ${q.magnitude}, '${q.mag_type}',\n   '${(q.region || '').replace(/'/g, \"''\")}',\n   '${q.ev_type}', '${q.auth}',\n   '${q.source_id}', '${q.source_cat}', '${q.src}')\nON CONFLICT(quake_id) DO UPDATE SET\n  last_update_utc = excluded.last_update_utc,\n  magnitude       = excluded.magnitude,\n  depth_km        = excluded.depth_km,\n  region          = excluded.region;`.trim();\n\n  node.send([{ topic: sql }, null]);\n\n  /* 2. Smart Alert Logic (use prefixed ID for tracking) --------------- */\n\n  if (alertedQuakes.has(prefixed_id)) {\n    continue;\n  }\n\n  const distKm = haversine(uLat, uLon, q.lat, q.lon);\n  const isNear = (distKm <= nearRad) && (q.magnitude >= nearMag);\n  const isBig = q.magnitude >= globalMag;\n\n  if (!(isNear || isBig)) {\n    continue;\n  }\n\n  // Mark as alerted with prefixed ID\n  alertedQuakes.add(prefixed_id);\n  newAlerts++;\n\n  // Enhanced message formatting\n  const magnitude = q.magnitude.toFixed(1);\n  const depth = q.depth_km ? `${Math.round(q.depth_km)}km deep` : 'shallow';\n  const when = timeAgo(q.ts_utc);\n\n  let alertIcon, alertLevel, location;\n\n  if (isBig) {\n    alertIcon = '🚨';\n    alertLevel = 'MAJOR EARTHQUAKE';\n    location = q.region || '—';\n  } else if (isNear) {\n    if (q.magnitude >= 6.0) {\n      alertIcon = '🔴';\n      alertLevel = 'STRONG LOCAL EARTHQUAKE';\n    } else if (q.magnitude >= 5.0) {\n      alertIcon = '🟠';\n      alertLevel = 'MODERATE EARTHQUAKE NEARBY';\n    } else {\n      alertIcon = '🟡';\n      alertLevel = 'EARTHQUAKE DETECTED';\n    }\n    location = `${Math.round(distKm)}km away`;\n  }\n\n  // Create rich alert message\n  const alertText = `${alertIcon} *${alertLevel}*\n\n📊 **Magnitude ${magnitude}** (${q.mag_type || 'M'})\n📍 ${location}\n⏰ ${when}\n🕳️ ${depth}\n\n${q.region || 'Location details unavailable'}`;\n\n  node.send([\n    null,\n    {\n      chatId: chatId,\n      payload: {\n        content: alertText\n      }\n    }\n  ]);\n}\n\n// Update global alert tracking\nif (alertedQuakes.size > 1000) {\n  global.set('alerted_earthquakes', new Set());\n} else {\n  global.set('alerted_earthquakes', alertedQuakes);\n}\n\n// Check if we need to send status after location change\nconst forceStatus = global.get('force_earthquake_status') || false;\nif (newAlerts === 0 && forceStatus) {\n  const statusText = `🌍 **EMSC Status: All Clear** ✅\n\n🔍 No significant earthquakes detected near your location\n🎯 Monitoring: M${nearMag}+ within ${nearRad}km, M${globalMag}+ globally\n\n⏰ *${new Date().toLocaleTimeString('en-US', { hour12: false })}*`;\n    node.send([null, {\n        chatId: chatId,\n        payload: {\n            content: statusText\n        }\n    }]);\n    \n    node.warn(`✅ EMSC \"All Clear\" status sent after location change`);\n}\n\nreturn null;","outputs":2,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":2060,"y":1060,"wires":[["f9ed10e33e2385f2"],["788d9bb97495d4f4","91e666c1ac4629c8"]]},{"id":"f9ed10e33e2385f2","type":"sqlite","z":"cf7fd95287b4d4a1","mydb":"473f5bc0183beb94","sql":"","name":"SQLite eq_events","x":2330,"y":760,"wires":[["9415bc20fa181339"]]},{"id":"788d9bb97495d4f4","type":"subflow:9f9b26a721ad1b8e","z":"cf7fd95287b4d4a1","name":"","x":2560,"y":1060,"wires":[["876312e5df8c7b14"],[]]},{"id":"193b36376ebeaabc","type":"function","z":"cf7fd95287b4d4a1","name":"EMSC URL builder","func":"/**************************************************************************\n * EMSC URL builder - NO radius parameter, filter client-side instead\n **************************************************************************/\nconst lat = global.get('user_lat');\nconst lon = global.get('user_lon');\nif (lat === undefined || lon === undefined) {\n    node.status({fill:\"yellow\",shape:\"ring\",text:\"no location yet\"});\n    return null;\n}\n\nconst chatId = global.get('default_chat');\nconst nearMag = Number(\n  global.get(`threshold:${chatId}:quake_mag`) ?? \n  global.get(`threshold:${chatId}:near_quake_mag`) ?? \n  4.5\n);\nconst nearRad = Number(\n  global.get(`threshold:${chatId}:quake_radius`) ?? \n  global.get(`threshold:${chatId}:near_quake_radius`) ?? \n  100\n);\n\n// 1-hour look-back\nconst locChanged = flow.get('loc_changed_at') ?? Date.now();\nconst lookbackMs = 60 * 60 * 1000;\nconst startISO = new Date(\n    Math.max(locChanged - lookbackMs, Date.now() - lookbackMs)\n).toISOString();\n\n// Build URL WITHOUT radius - let client-side parser filter by distance\nlet url = \"https://www.seismicportal.eu/fdsnws/event/1/query?\"\n    + \"limit=500\"  // Get more results since we'll filter client-side\n    + \"&start=\" + encodeURIComponent(startISO)\n    + \"&format=json\"\n    + \"&minmag=\" + nearMag;\n    // No lat/lon/radius - get all earthquakes and filter locally\n\nmsg.url = url;\n\nnode.status({\n    fill:'orange',\n    shape:'dot',\n    text:`M≥${nearMag}, client-filter ≤${nearRad}km`\n});\n\nnode.warn(`EMSC URL (no radius): ${url}`);\nmsg.feed = \"emsc\";\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1110,"y":1060,"wires":[["6a48c287ac13101f"]]},{"id":"0c7f1758b2803f6c","type":"link in","z":"cf7fd95287b4d4a1","name":"link in 2","links":["11d10040b77a0559"],"x":25,"y":1080,"wires":[["0cce57d097edcf88"]]},{"id":"f73dbaf8d9e49b69","type":"http request","z":"cf7fd95287b4d4a1","name":"USGS 4.5+_hour","method":"GET","ret":"txt","paytoqs":"ignore","url":"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/4.5_hour.geojson","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":1090,"y":900,"wires":[["c5859baefa9789f6"]]},{"id":"3f927dbf3afc5fd2","type":"http request","z":"cf7fd95287b4d4a1","name":"USGS significant_week","method":"GET","ret":"txt","paytoqs":"ignore","url":"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/significant_week.geojson","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":1090,"y":340,"wires":[["8c06b4fc304ff9af"]]},{"id":"9d2778da1c61bd2a","type":"http request","z":"cf7fd95287b4d4a1","name":"USGS 4.5+_week","method":"GET","ret":"txt","paytoqs":"ignore","url":"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/4.5_week.geojson","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":1070,"y":440,"wires":[["fcc5d593f8681d8a"]]},{"id":"1278a9ed3a497dc3","type":"change","z":"cf7fd95287b4d4a1","name":"","rules":[{"t":"set","p":"feed","pt":"msg","to":"sgs_sig_hr","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1390,"y":780,"wires":[["96b1d78fe7497f1b","d6fc28bae356280a"]]},{"id":"c5859baefa9789f6","type":"change","z":"cf7fd95287b4d4a1","name":"","rules":[{"t":"set","p":"feed","pt":"msg","to":"usgs_4p5_hr","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1370,"y":900,"wires":[["96b1d78fe7497f1b","816d39c15f3a6a2a"]]},{"id":"8c06b4fc304ff9af","type":"change","z":"cf7fd95287b4d4a1","name":"","rules":[{"t":"set","p":"feed","pt":"msg","to":"usgs_sig_wk","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1370,"y":340,"wires":[["bdb286297b26bfa8"]]},{"id":"fcc5d593f8681d8a","type":"change","z":"cf7fd95287b4d4a1","name":"","rules":[{"t":"set","p":"feed","pt":"msg","to":"usgs_4p5_wk","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1350,"y":440,"wires":[["bdb286297b26bfa8"]]},{"id":"79d0b02e1fca4eb6","type":"inject","z":"cf7fd95287b4d4a1","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"00 00 * * *","once":false,"onceDelay":"1","topic":"","payload":"","payloadType":"date","x":610,"y":360,"wires":[["3f927dbf3afc5fd2","9d2778da1c61bd2a"]]},{"id":"96b1d78fe7497f1b","type":"function","z":"cf7fd95287b4d4a1","name":"usgs_parse","func":"// ===================================================================\n// 4. USGS Parser Function (Enhanced with Status & SQL)\n// ===================================================================\n/***************************************************************************\n * Enhanced USGS Parser with Status Messages and SQL Storage\n ***************************************************************************/\n\nconst haversine = (a, b, c, d) => {\n    const R = 6371, toRad = x => x * Math.PI / 180;\n    const dLat = toRad(c - a), dLon = toRad(d - b);\n    const A = Math.sin(dLat / 2) ** 2 +\n        Math.cos(toRad(a)) * Math.cos(toRad(c)) * Math.sin(dLon / 2) ** 2;\n    return 2 * R * Math.asin(Math.sqrt(A));\n};\n\nconst iso = t => new Date(t).toISOString();\n\nconst timeAgo = (timestamp) => {\n    const now = Date.now();\n    const diffMs = now - timestamp;\n    const diffMins = Math.floor(diffMs / 60000);\n    const diffHours = Math.floor(diffMins / 60);\n\n    if (diffMins < 1) return 'just now';\n    if (diffMins < 60) return `${diffMins}m ago`;\n    if (diffHours < 24) return `${diffHours}h ago`;\n    return 'over a day ago';\n};\n\n/* ---------- user context --------------------------------------------- */\nconst chatId = global.get('default_chat');\nconst latUser = global.get('user_lat');\nconst lonUser = global.get('user_lon');\n\nif (!chatId || latUser === undefined || lonUser === undefined) {\n    node.warn('Missing chat ID or user location for earthquake monitoring');\n    return null;\n}\n\n// Get thresholds\nconst nearMag = Number(\n    global.get(`threshold:${chatId}:quake_mag`) ?? 4.5\n);\nconst nearRad = Number(\n    global.get(`threshold:${chatId}:quake_radius`) ?? 100\n);\nconst globalMag = Number(\n    global.get(`threshold:${chatId}:global_quake_mag`) ?? 7.0\n);\n\n// Get alert tracking\nconst alertedQuakes = global.get('alerted_earthquakes') || new Set();\nconst lastStatusTime = global.get('last_earthquake_status') || 0;\n\n/* ---------- parse USGS feed ------------------------------------------ */\nconst raw = (typeof msg.payload === 'string')\n    ? JSON.parse(msg.payload || '{}')\n    : (msg.payload || {});\n\nconst features = raw.features || [];\nnode.warn(`Processing ${features.length} USGS earthquakes (${msg.feed})`);\n\nlet newAlerts = 0;\nlet processedQuakes = 0;\n\nfeatures.forEach(f => {\n    const p = f.properties;\n    const g = f.geometry;\n    const quake_id = p.code;\n\n    /* --- 1. ALWAYS STORE ------------------------------------------- */\n    const sql = `\nINSERT INTO eq_events\n  (quake_id, ts_utc, last_update_utc, lat, lon, depth_km,\n   magnitude, mag_type, region, ev_type, auth,\n   felt, significance, src)\nVALUES\n  ('${quake_id}',\n   '${iso(p.time)}',\n   '${iso(p.updated)}',\n   ${g.coordinates[1]}, ${g.coordinates[0]}, ${g.coordinates[2]},\n   ${p.mag}, '${p.magType}',\n   '${(p.place || '').replace(/'/g, \"''\")}',\n   'ke', '${p.net}',\n   ${p.felt ?? 'NULL'},\n   ${p.sig},\n   'usgs')\nON CONFLICT(quake_id) DO UPDATE SET\n   last_update_utc = excluded.last_update_utc,\n   magnitude       = excluded.magnitude,\n   depth_km        = excluded.depth_km,\n   region          = excluded.region,\n   felt            = excluded.felt,\n   significance    = excluded.significance;`.trim();\n\n    node.send([{ topic: sql }, null]);\n    processedQuakes++;\n\n    /* --- 2. CONDITIONAL ALERT -------------------------------------- */\n\n    // Skip if already alerted\n    if (alertedQuakes.has(quake_id)) {\n        return;\n    }\n\n    const distKm = haversine(latUser, lonUser, g.coordinates[1], g.coordinates[0]);\n    const isNear = distKm <= nearRad && p.mag >= nearMag;\n    const isBig = p.mag >= globalMag;\n\n    if (!(isNear || isBig)) {\n        return;\n    }\n\n    // Mark as alerted\n    alertedQuakes.add(quake_id);\n    newAlerts++;\n\n    // Enhanced message formatting\n    const magnitude = p.mag.toFixed(1);\n    const depth = g.coordinates[2] ? `${Math.round(g.coordinates[2])}km deep` : 'shallow';\n    const when = timeAgo(p.time);\n    const felt = p.felt ? `👥 ${p.felt} reports` : '';\n\n    let alertIcon, alertLevel, location;\n\n    if (isBig) {\n        alertIcon = '🚨';\n        alertLevel = 'MAJOR EARTHQUAKE';\n        location = p.place || '—';\n    } else if (isNear) {\n        if (p.mag >= 6.0) {\n            alertIcon = '🔴';\n            alertLevel = 'STRONG LOCAL EARTHQUAKE';\n        } else if (p.mag >= 5.0) {\n            alertIcon = '🟠';\n            alertLevel = 'MODERATE EARTHQUAKE NEARBY';\n        } else {\n            alertIcon = '🟡';\n            alertLevel = 'EARTHQUAKE DETECTED';\n        }\n        location = `${Math.round(distKm)}km away`;\n    }\n\n    let alertText = `${alertIcon} *${alertLevel}*\n\n📊 **Magnitude ${magnitude}** (${p.magType || 'M'})\n📍 ${location}\n⏰ ${when}\n🕳️ ${depth}`;\n\nif (felt) {\n    alertText += `\n${felt}`;\n}\n\nalertText += `\n\n${p.place || 'Location details unavailable'}`;\n\nif (p.sig > 600) {\n    alertText += `\n\n⚠️ *High significance event*`;\n}\n\n    node.send([null, {\n        chatId,\n        payload: {\n            content: alertText\n        }\n    }]);\n});\n\n// Update alert tracking\nglobal.set('alerted_earthquakes', alertedQuakes);\n\n/* ---------- STATUS REPORT (ENHANCED) -------------------------------- */\nconst now = Date.now();\nconst oneHour = 60 * 60 * 1000;\nconst forceStatus = global.get('force_earthquake_status') || false;\n\n// Send status update every hour OR when there are new alerts OR when forced\nif (newAlerts > 0 || (now - lastStatusTime) > oneHour || forceStatus) {\n\n    let statusText;\n\n    if (newAlerts > 0) {\nstatusText = `🌍 **Earthquake Update**\n\n✅ Sent ${newAlerts} new alerts\n📊 Processed ${processedQuakes} earthquakes\n🎯 Monitoring: M${nearMag}+ within ${nearRad}km, M${globalMag}+ globally`;\n    } else {\n        statusText = `🌍 **Earthquake Status: All Clear** ✅\n\n🔍 Monitoring ${processedQuakes} recent earthquakes\n✨ No significant activity detected\n🎯 Watching: M${nearMag}+ within ${nearRad}km, M${globalMag}+ globally\n\n⏰ *${new Date().toLocaleTimeString('en-US', { hour12: false })}*`;\n    }\n\n\n    node.send([null, {\n        chatId,\n        payload: {\n            content: statusText\n        }\n    }]);\n\n    // Update last status time and clear force flag\n        global.set('last_earthquake_status', now);\n        global.set('force_earthquake_status', false);\n\n        node.warn(`✅ Status message sent - forced: ${forceStatus}`);\n    } else {\n        node.warn(`⏭️ SKIPPING STATUS - No new alerts and last status was recent`);\n    }\n\nif (newAlerts > 0) {\n    node.warn(`USGS: Sent ${newAlerts} new earthquake alerts`);\n} else {\n    node.warn(`USGS: No new alerts - area monitored successfully`);\n}\n\nreturn null;","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1870,"y":760,"wires":[["f9ed10e33e2385f2","90fc63411ee86097"],["8a9e1216ed1f2fdb","1799b62f8922b4a3"]]},{"id":"1799b62f8922b4a3","type":"subflow:9f9b26a721ad1b8e","z":"cf7fd95287b4d4a1","name":"","x":2300,"y":540,"wires":[["9907eff4196d3881"],[]]},{"id":"9415bc20fa181339","type":"debug","z":"cf7fd95287b4d4a1","name":"debug 5","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":2940,"y":760,"wires":[]},{"id":"95ef20da9d375e77","type":"function","z":"cf7fd95287b4d4a1","name":"function 10","func":"/***************************************************************************\n * FIXED Function 10 - Location Change Handler (No Stuck Issues)\n ***************************************************************************/\n\n// Check if this came from a successful location update\nconst newLat = global.get('user_lat');\nconst newLon = global.get('user_lon');\nconst chatId = global.get('default_chat');\n\n// CRITICAL: Only proceed if we have valid coordinates\nif (!newLat || !newLon || !chatId || isNaN(newLat) || isNaN(newLon)) {\n    node.warn('Location trigger: Missing or invalid location data - skipping');\n    return null;\n}\n\n// Additional check: ensure coordinates are reasonable\nif (Math.abs(newLat) > 90 || Math.abs(newLon) > 180) {\n    node.warn(`Location trigger: Invalid coordinates ${newLat}, ${newLon} - skipping`);\n    return null;\n}\n\n// Set location change timestamp for lookback in earthquake queries\nflow.set('loc_changed_at', Date.now());\n\n// Clear previous earthquake alerts when location changes significantly\nconst prevLat = flow.get('prev_lat');\nconst prevLon = flow.get('prev_lon');\n\nlet locationChangedSignificantly = true; // Default to true for first time\nlet distKm = 0;\n\nif (prevLat && prevLon) {\n    const R = 6371;\n    const toRad = x => x * Math.PI / 180;\n    const dLat = toRad(newLat - prevLat);\n    const dLon = toRad(newLon - prevLon);\n    const a = Math.sin(dLat / 2) ** 2 +\n        Math.cos(toRad(prevLat)) * Math.cos(toRad(newLat)) *\n        Math.sin(dLon / 2) ** 2;\n    distKm = 2 * R * Math.asin(Math.sqrt(a));\n\n    locationChangedSignificantly = distKm > 10; // 10km threshold\n\n    // If moved more than 50km, reset earthquake alerts\n    if (distKm > 50) {\n        global.set('alerted_earthquakes', new Set());\n        node.warn(`Location changed by ${Math.round(distKm)}km - reset earthquake alerts`);\n    }\n}\n\n// Store new location for next comparison\nflow.set('prev_lat', newLat);\nflow.set('prev_lon', newLon);\n\n// ALWAYS set force flag and send confirmation for any location update\nglobal.set('force_earthquake_status', true);\n\nconst confirmMsg = {\n    chatId: chatId,\n    payload: {\n        content: `📍 *Location updated!*\n\n🌍 Monitoring earthquakes near ${newLat.toFixed(3)}, ${newLon.toFixed(3)}\n⚡ Checking recent seismic activity...`\n    }\n};\n\n// Create simple trigger - no delay to avoid complications\nconst triggerMsg = {\n    payload: 'earthquake_check_triggered',\n    source: 'location_change',\n    timestamp: Date.now()\n};\n\nnode.warn(`Location validation passed: ${newLat.toFixed(4)}, ${newLon.toFixed(4)} - triggering earthquake check`);\n\n// Output 0: Trigger for earthquake monitoring (immediate)\n// Output 1: Confirmation message\nreturn [triggerMsg, confirmMsg];","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":490,"y":1080,"wires":[["2efc16a752166874"],["02ce5c3e6cc7c9c1","667b80ede6675348"]]},{"id":"b7734ab84f8121f4","type":"debug","z":"cf7fd95287b4d4a1","name":"debug 6","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1900,"y":1240,"wires":[]},{"id":"91e666c1ac4629c8","type":"debug","z":"cf7fd95287b4d4a1","name":"debug 11","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":2390,"y":1320,"wires":[]},{"id":"02ce5c3e6cc7c9c1","type":"subflow:9f9b26a721ad1b8e","z":"cf7fd95287b4d4a1","name":"","x":870,"y":1280,"wires":[["13133d34c0ded7bd"],[]]},{"id":"13133d34c0ded7bd","type":"telegram sender","z":"cf7fd95287b4d4a1","name":"","bot":"25bc3f9b27c564a8","haserroroutput":false,"outputs":1,"x":1370,"y":1280,"wires":[[]]},{"id":"bdb286297b26bfa8","type":"function","z":"cf7fd95287b4d4a1","name":"usgs_parse","func":"/***************************************************************************\n * USGS Storage Only - For Weekly/Daily Feeds (No Alerts)\n * Use this for: significant_week, 4.5_week feeds\n * OUT0: SQL only\n ***************************************************************************/\n\nconst iso = t => new Date(t).toISOString();\n\n/* ---------- parse USGS feed ------------------------------------------ */\nconst raw = (typeof msg.payload === 'string')\n    ? JSON.parse(msg.payload || '{}')\n    : (msg.payload || {});\n\nconst features = raw.features || [];\nnode.warn(`Storing ${features.length} USGS earthquakes (${msg.feed})`);\n\nfeatures.forEach(f => {\n    const p = f.properties;\n    const g = f.geometry;\n    const quake_id = p.code;\n\n    /* ---- SQL UPSERT ONLY ----------------------------------------- */\n    const sql = `\nINSERT INTO eq_events\n  (quake_id, ts_utc, last_update_utc, lat, lon, depth_km,\n   magnitude, mag_type, region, ev_type, auth,\n   felt, significance, src)\nVALUES\n  ('${quake_id}',\n   '${iso(p.time)}',\n   '${iso(p.updated)}',\n   ${g.coordinates[1]}, ${g.coordinates[0]}, ${g.coordinates[2]},\n   ${p.mag}, '${p.magType}',\n   '${(p.place || '').replace(/'/g, \"''\")}',\n   'ke', '${p.net}',\n   ${p.felt ?? 'NULL'},\n   ${p.sig},\n   'usgs')\nON CONFLICT(quake_id) DO UPDATE SET\n   last_update_utc = excluded.last_update_utc,\n   magnitude       = excluded.magnitude,\n   depth_km        = excluded.depth_km,\n   region          = excluded.region,\n   felt            = excluded.felt,\n   significance    = excluded.significance;`.trim();\n\n    node.send({ topic: sql });\n});\n\nreturn null;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1730,"y":380,"wires":[["f9ed10e33e2385f2"]]},{"id":"667b80ede6675348","type":"debug","z":"cf7fd95287b4d4a1","name":"debug 12","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":580,"y":1340,"wires":[]},{"id":"71c0a01bbf9c7a52","type":"function","z":"cf7fd95287b4d4a1","name":"function 11","func":"/***************************************************************************\n * Location Validation Guard\n * Only allows flow to continue if location was successfully found\n * Place this BEFORE Function 10\n ***************************************************************************/\n\n// Check if the previous geocoding step was successful\nconst lat = global.get('user_lat');\nconst lon = global.get('user_lon');\n\n// If no valid coordinates, stop the flow\nif (!lat || !lon || isNaN(lat) || isNaN(lon)) {\n    node.warn('Location validation failed - blocking earthquake trigger');\n    return null; // This stops the flow completely\n}\n\n// Validate coordinate ranges\nif (Math.abs(lat) > 90 || Math.abs(lon) > 180) {\n    node.warn(`Invalid coordinates detected: ${lat}, ${lon} - blocking trigger`);\n    return null;\n}\n\n// Check if location actually changed meaningfully\nconst prevLat = flow.get('validated_lat');\nconst prevLon = flow.get('validated_lon');\n\nif (prevLat && prevLon) {\n    const R = 6371;\n    const toRad = x => x * Math.PI / 180;\n    const dLat = toRad(lat - prevLat);\n    const dLon = toRad(lon - prevLon);\n    const a = Math.sin(dLat / 2) ** 2 +\n        Math.cos(toRad(prevLat)) * Math.cos(toRad(lat)) *\n        Math.sin(dLon / 2) ** 2;\n    const distKm = 2 * R * Math.asin(Math.sqrt(a));\n\n    // If moved less than 1km, don't trigger earthquake check\n    if (distKm < 1) {\n        node.warn(`Location change too small (${distKm.toFixed(1)}km) - skipping earthquake trigger`);\n        return null;\n    }\n}\n\n// Store validated coordinates\nflow.set('validated_lat', lat);\nflow.set('validated_lon', lon);\n\nnode.warn(`Location validation passed: ${lat.toFixed(4)}, ${lon.toFixed(4)} - allowing earthquake trigger`);\n\n// Pass the message through if validation succeeds\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":270,"y":1080,"wires":[["95ef20da9d375e77"]]},{"id":"2efc16a752166874","type":"function","z":"cf7fd95287b4d4a1","name":"function 12","func":"/***************************************************************************\n * SIMPLIFIED Function 12 - Direct Trigger (No Delay Complications)\n ***************************************************************************/\n\n// Simply pass through any message - no delay logic needed\nnode.warn(`Earthquake check triggered: ${msg.payload}`);\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":690,"y":1040,"wires":[["193b36376ebeaabc","f73dbaf8d9e49b69","f6436bea38c9c1d3","8c298bf5e90bc488"]]},{"id":"90fc63411ee86097","type":"debug","z":"cf7fd95287b4d4a1","name":"debug 14","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1930,"y":640,"wires":[]},{"id":"8a9e1216ed1f2fdb","type":"debug","z":"cf7fd95287b4d4a1","name":"debug 15","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":2010,"y":920,"wires":[]},{"id":"d6fc28bae356280a","type":"debug","z":"cf7fd95287b4d4a1","name":"debug 16","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1510,"y":640,"wires":[]},{"id":"816d39c15f3a6a2a","type":"debug","z":"cf7fd95287b4d4a1","name":"debug 17","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1490,"y":980,"wires":[]},{"id":"8c298bf5e90bc488","type":"debug","z":"cf7fd95287b4d4a1","name":"debug 18","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":790,"y":900,"wires":[]},{"id":"9907eff4196d3881","type":"telegram sender","z":"cf7fd95287b4d4a1","name":"","bot":"25bc3f9b27c564a8","haserroroutput":false,"outputs":1,"x":2690,"y":540,"wires":[[]]},{"id":"876312e5df8c7b14","type":"telegram sender","z":"cf7fd95287b4d4a1","name":"","bot":"25bc3f9b27c564a8","haserroroutput":false,"outputs":1,"x":2910,"y":1060,"wires":[[]]},{"id":"0cce57d097edcf88","type":"delay","z":"cf7fd95287b4d4a1","name":"","pauseType":"delay","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":120,"y":1180,"wires":[["71c0a01bbf9c7a52"]]},{"id":"1af4a1af09edbf4e","type":"link in","z":"34490142aa88368a","name":"loc_changed","links":["11d10040b77a0559"],"x":65,"y":440,"wires":[["f4c63fa848538529"]]},{"id":"6d86ebe1389e88c7","type":"function","z":"34490142aa88368a","name":"build hist SQL","func":"// Replace your \"build hist SQL\" function with this:\n\nconst lat = Number(global.get('user_lat') ?? 37.9838).toFixed(3);\nconst lon = Number(global.get('user_lon') ?? 23.7275).toFixed(3);\nconst mmdd = new Date().toISOString().slice(5, 10); // MM-DD format\n\n// Query for SAME DAY across multiple years, not just today's date\nmsg.topic = `\nSELECT \n    date_utc,\n    temp_mean,\n    temp_max,\n    temp_min\nFROM weather_climate_history\nWHERE ROUND(lat_round, 3) = ${lat}\n  AND ROUND(lon_round, 3) = ${lon}\n  AND SUBSTR(date_utc, 6, 5) = '${mmdd}'  -- Same MM-DD across years\nORDER BY date_utc;\n`;\n\nnode.warn(`Querying historical data for ${mmdd} at ${lat}, ${lon}`);\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":700,"y":440,"wires":[["46b79ed581cda0f8"]]},{"id":"46b79ed581cda0f8","type":"sqlite","z":"34490142aa88368a","mydb":"473f5bc0183beb94","sqlquery":"msg.topic","sql":"","name":"hist","x":1090,"y":420,"wires":[["c7b6110db1412a31"]]},{"id":"c7b6110db1412a31","type":"function","z":"34490142aa88368a","name":"stash rows","func":"msg.histRows = msg.payload; \nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1370,"y":420,"wires":[["5926028a38705156"]]},{"id":"5926028a38705156","type":"function","z":"34490142aa88368a","name":"today SQL","func":"const lat   = Number(global.get('user_lat') ?? 37.9838).toFixed(3);\nconst lon   = Number(global.get('user_lon') ?? 23.7275).toFixed(3);\nconst today = new Date().toISOString().slice(0,10);   // YYYY-MM-DD\n\nmsg.topic = `\nSELECT\n  (temp_max + temp_min) / 2.0 AS day_mean\nFROM   weather_forecast_ow\nWHERE  forecast_day = '${today}'\n  AND  ROUND(latitude ,3) = ${lat}\n  AND  ROUND(longitude,3) = ${lon}\nORDER BY ts_utc DESC\nLIMIT 1;\n`;\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1610,"y":420,"wires":[["d8cd4e6b03bb2d35"]]},{"id":"d8cd4e6b03bb2d35","type":"sqlite","z":"34490142aa88368a","mydb":"473f5bc0183beb94","sqlquery":"msg.topic","sql":"","name":"today","x":1530,"y":600,"wires":[["8abaa47881ecab53"]]},{"id":"8abaa47881ecab53","type":"function","z":"34490142aa88368a","name":"prep","func":"/* make sure we got one row */\nif (!msg.payload.length) {\n  node.warn('no forecast row in DB');\n  return null;\n}\n\nconst r = msg.payload[0];   // row from weather_forecast_ow\n\n/* try every possible field in priority order */\nlet mean =\n      r.day_mean   ??       // <-- NEW alias from the SQL\n      r.temp_mean  ??\n      r.temp_day   ??\n      (r.temp_max != null && r.temp_min != null\n         ? (+r.temp_max + +r.temp_min) / 2\n         : null);\n\nif (mean == null) {\n  node.warn('cannot derive todayMean from row');\n  return null;\n}\n\nmsg.todayMean = Number(mean);   // pass to km_process\nmsg.rows      = msg.histRows;   // 20-yr history\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1650,"y":800,"wires":[["5bd5da267f45204b","2bbf9f674c820409"]]},{"id":"5bd5da267f45204b","type":"function","z":"34490142aa88368a","name":"K-means+σ","func":"// ===================================================================\n// COMPLETE ENHANCED K-MEANS FUNCTION with Temperature Threshold Alerts\n// Replace your existing K-means function in Kmeans_v3 tab with this:\n// ===================================================================\n\nconst rows = msg.rows || [];\nconst todayMean = msg.todayMean;\n\n/* ───────── Bootstrap when history empty ───────── */\nif (!rows.length) {\n    const mu = todayMean;\n    const sigma = 0.1;\n    global.set('climate_mu', mu);\n    global.set('climate_sigma', sigma);\n    global.set('climate_todayMean', todayMean);\n\n    const lat = (global.get('user_lat') ?? 37.9838).toFixed(3);\n    const lon = (global.get('user_lon') ?? 23.7275).toFixed(3);\n    const mmdd = new Date().toISOString().slice(5, 10);\n\n    const sqlMsg = {\n        topic: `\n            INSERT INTO climate_centroids\n              (mm_dd, lat_round, lon_round, k, mu, sigma, updated_at)\n            VALUES('${mmdd}', ${lat}, ${lon}, 1, ${mu}, ${sigma},\n                   datetime('now','utc'))\n            ON CONFLICT(mm_dd,lat_round,lon_round) DO UPDATE\n              SET mu=${mu}, sigma=${sigma}, updated_at=datetime('now','utc');\n        `\n    };\n\n    // Check temperature thresholds for new location\n    const chatId = global.get('default_chat');\n    const tempHigh = Number(global.get(`threshold:${chatId}:temp_high`) ?? 35);\n    const tempLow = Number(global.get(`threshold:${chatId}:temp_low`) ?? 5);\n    \n    let tempAlerts = [];\n    \n    if (todayMean >= tempHigh) {\n        tempAlerts.push(`🔥 **HIGH TEMP ALERT**: ${todayMean.toFixed(1)}°C (≥${tempHigh}°C threshold)`);\n    }\n    if (todayMean <= tempLow) {\n        tempAlerts.push(`🧊 **LOW TEMP ALERT**: ${todayMean.toFixed(1)}°C (≤${tempLow}°C threshold)`);\n    }\n\n    const basicAlert = {\n        chatId: global.get('default_chat'),\n        payload: {\n            content:\n                `🌡️ *Climate Baseline Seeded*\\n` +\n                `Today Mean: ${todayMean.toFixed(1)}°C\\n` +\n                `Baseline μ = ${mu.toFixed(1)} σ = ${sigma.toFixed(1)}\\n` +\n                (tempAlerts.length > 0 ? `\\n⚠️ ${tempAlerts.join('\\n⚠️ ')}\\n` : '') +\n                `\\n🎯 Temp alerts: High ≥${tempHigh}°C, Low ≤${tempLow}°C`,\n            options: { parse_mode: 'Markdown' }\n        }\n    };\n\n    // Output 0: SQLite, Output 1: null, Output 2: Basic telegram alert\n    return [sqlMsg, null, basicAlert];\n}\n\n/* ───────── Full K-means with historical data + TEMPERATURE THRESHOLDS ───────── */\nconst temps = rows.map(row => {\n    return row.temp_mean ?? \n           row.day_mean ?? \n           row.temp_day ?? \n           ((row.temp_max != null && row.temp_min != null) ? \n            (Number(row.temp_max) + Number(row.temp_min)) / 2 : null);\n}).filter(temp => temp != null && !isNaN(temp));\n\nif (temps.length === 0) {\n    node.warn('No valid temperature data found in historical rows');\n    return [null, null, null];\n}\n\n// ═══════════════════════════════════════════════════════════════════\n// FULL K-MEANS CLUSTERING ALGORITHM\n// ═══════════════════════════════════════════════════════════════════\nconst MAX_ITERATIONS = 10;\nconst CONVERGENCE_THRESHOLD = 0.01;\n\n// Initialize centroids with mean\nlet mu = temps.reduce((sum, temp) => sum + temp, 0) / temps.length;\nlet prevMu = mu;\n\n// K-means iterations to find optimal centroid\nfor (let iter = 0; iter < MAX_ITERATIONS; iter++) {\n    // Recalculate centroid\n    mu = temps.reduce((sum, temp) => sum + temp, 0) / temps.length;\n    \n    // Check for convergence\n    if (Math.abs(mu - prevMu) < CONVERGENCE_THRESHOLD) {\n        node.warn(`K-means converged after ${iter + 1} iterations`);\n        break;\n    }\n    prevMu = mu;\n}\n\n// Calculate variance and standard deviation\nconst variance = temps.reduce((sum, temp) => sum + Math.pow(temp - mu, 2), 0) / temps.length;\nconst sigma = Math.sqrt(variance);\nconst zForecast = sigma > 0 ? (todayMean - mu) / sigma : 0;\n\n// Store in globals\nglobal.set('climate_mu', mu);\nglobal.set('climate_sigma', sigma);\nglobal.set('climate_todayMean', todayMean);\n\nnode.warn(`K-means results: μ=${mu.toFixed(2)}, σ=${sigma.toFixed(2)}, today=${todayMean.toFixed(1)}, z=${zForecast.toFixed(2)}, n=${temps.length}`);\n\n// Prepare database update\nconst lat = (global.get('user_lat') ?? 37.9838).toFixed(3);\nconst lon = (global.get('user_lon') ?? 23.7275).toFixed(3);\nconst mmdd = new Date().toISOString().slice(5, 10);\n\nconst sqlMsg = {\n    topic: `\n        INSERT INTO climate_centroids\n          (mm_dd, lat_round, lon_round, k, mu, sigma, updated_at)\n        VALUES('${mmdd}', ${lat}, ${lon}, 1, ${mu.toFixed(3)}, ${sigma.toFixed(3)},\n               datetime('now','utc'))\n        ON CONFLICT(mm_dd,lat_round,lon_round) DO UPDATE\n          SET mu=${mu.toFixed(3)}, sigma=${sigma.toFixed(3)}, \n              updated_at=datetime('now','utc');\n    `\n};\n\n// ═══════════════════════════════════════════════════════════════════\n// ENHANCED: Temperature Threshold Checking\n// ═══════════════════════════════════════════════════════════════════\nconst chatId = global.get('default_chat');\nconst tempHigh = Number(global.get(`threshold:${chatId}:temp_high`) ?? 35);\nconst tempLow = Number(global.get(`threshold:${chatId}:temp_low`) ?? 5);\n\nlet alertMessages = [];\nlet tempAlerts = [];\n\n// Check today's forecast temperature against thresholds\nif (todayMean >= tempHigh) {\n    const severity = todayMean >= (tempHigh + 5) ? 'EXTREME' : 'HIGH';\n    tempAlerts.push(`🔥 **${severity} TEMP ALERT**: Forecast ${todayMean.toFixed(1)}°C (≥${tempHigh}°C threshold)`);\n}\nif (todayMean <= tempLow) {\n    const severity = todayMean <= (tempLow - 5) ? 'EXTREME' : 'LOW';\n    tempAlerts.push(`🧊 **${severity} TEMP ALERT**: Forecast ${todayMean.toFixed(1)}°C (≤${tempLow}°C threshold)`);\n}\n\n// Climate anomaly analysis\nif (Math.abs(zForecast) >= 2.0) {\n    const anomalyType = zForecast > 0 ? 'warmer' : 'cooler';\n    const anomalyMagnitude = Math.abs(zForecast).toFixed(1);\n    alertMessages.push(`📊 **Climate Anomaly**: ${anomalyMagnitude}σ ${anomalyType} than normal`);\n}\n\n// Combine all alerts if any exist\nif (tempAlerts.length > 0 || alertMessages.length > 0) {\n    let alertContent = `🌡️ *Temperature Analysis*\\n\\n`;\n    \n    // Add temperature threshold alerts first (high priority)\n    if (tempAlerts.length > 0) {\n        alertContent += tempAlerts.join('\\n') + '\\n\\n';\n    }\n    \n    // Add climate analysis\n    alertContent += `📊 **Climate Analysis**\\n`;\n    alertContent += `Today: ${todayMean.toFixed(1)}°C\\n`;\n    alertContent += `Normal: ${mu.toFixed(1)}°C ± ${sigma.toFixed(1)}\\n`;\n    alertContent += `Z-Score: ${zForecast.toFixed(2)}\\n`;\n    alertContent += `Records: ${temps.length}\\n\\n`;\n    \n    // Add anomaly alerts\n    if (alertMessages.length > 0) {\n        alertContent += alertMessages.join('\\n') + '\\n\\n';\n    }\n    \n    // Add threshold info\n    alertContent += `🎯 *Thresholds: High ≥${tempHigh}°C, Low ≤${tempLow}°C*`;\n\n    const enhancedAlert = {\n        chatId: global.get('default_chat'),\n        payload: {\n            content: alertContent,\n            options: { parse_mode: 'Markdown' }\n        }\n    };\n\n    node.warn(`Sending enhanced alert: ${tempAlerts.length} temp alerts, ${alertMessages.length} climate alerts`);\n\n    // Output 0: SQLite, Output 1: Current temp analysis, Output 2: Enhanced alert\n    return [sqlMsg, null, enhancedAlert];\n}\n\n// No alerts needed - just pass to current temp analysis\nconst currentTempMsg = {\n    climate_mu: mu,\n    climate_sigma: sigma,\n    climate_todayMean: todayMean,\n    forecast_z: zForecast,\n    temp_records: temps.length\n};\n\nnode.warn(`No alerts triggered - passing to current temp analysis`);\n\n// Output 0: SQLite, Output 1: Current temp analysis, Output 2: null\nreturn [sqlMsg, currentTempMsg, null];","outputs":3,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1890,"y":420,"wires":[["9967bb964d503912","4d8966eb8e3b947b"],["283e22165621dbe4"],["283e22165621dbe4"]]},{"id":"9967bb964d503912","type":"sqlite","z":"34490142aa88368a","mydb":"473f5bc0183beb94","sqlquery":"msg.topic","sql":"","name":"cent","x":2350,"y":180,"wires":[[]]},{"id":"757d7a8395099d91","type":"subflow:9f9b26a721ad1b8e","z":"34490142aa88368a","x":2560,"y":860,"wires":[["5d34a3bf80d3bea8"],[]]},{"id":"f4c63fa848538529","type":"delay","z":"34490142aa88368a","name":"","pauseType":"delay","timeout":"20","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":260,"y":440,"wires":[["6d86ebe1389e88c7","240c8afe40d16f11","000ed080d05a3894"]]},{"id":"342940450d6747d7","type":"inject","z":"34490142aa88368a","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":280,"y":240,"wires":[["6d86ebe1389e88c7"]]},{"id":"2bbf9f674c820409","type":"debug","z":"34490142aa88368a","name":"debug 9","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1810,"y":880,"wires":[]},{"id":"4d8966eb8e3b947b","type":"debug","z":"34490142aa88368a","name":"debug 10","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":2060,"y":240,"wires":[]},{"id":"5d34a3bf80d3bea8","type":"telegram sender","z":"34490142aa88368a","name":"","bot":"25bc3f9b27c564a8","haserroroutput":false,"outputs":1,"x":3090,"y":860,"wires":[[]]},{"id":"240c8afe40d16f11","type":"function","z":"34490142aa88368a","name":"function 4","func":"// Add this as a diagnostic function node to check your climate system\n\nconst lat = Number(global.get('user_lat') ?? 37.9838).toFixed(3);\nconst lon = Number(global.get('user_lon') ?? 23.7275).toFixed(3);\nconst today = new Date().toISOString().slice(0, 10);\nconst mmdd = new Date().toISOString().slice(5, 10); // MM-DD\n\n// Check 1: Count total historical records for this location\nmsg.topic = `\nSELECT \n    COUNT(*) as total_records,\n    MIN(date_utc) as earliest_date,\n    MAX(date_utc) as latest_date,\n    AVG(temp_mean) as avg_temp,\n    MIN(temp_mean) as min_temp,\n    MAX(temp_mean) as max_temp,\n    ROUND(\n        SQRT(\n            SUM((temp_mean - (SELECT AVG(temp_mean) FROM weather_climate_history \n                              WHERE ROUND(lat_round,3) = ${lat} \n                              AND ROUND(lon_round,3) = ${lon})) * \n                (temp_mean - (SELECT AVG(temp_mean) FROM weather_climate_history \n                              WHERE ROUND(lat_round,3) = ${lat} \n                              AND ROUND(lon_round,3) = ${lon}))) / \n            COUNT(*)\n        ), 3\n    ) as std_dev\nFROM weather_climate_history \nWHERE ROUND(lat_round,3) = ${lat} \nAND ROUND(lon_round,3) = ${lon};\n`;\n\n// This will tell us:\n// - total_records: How many historical data points we actually have\n// - earliest_date/latest_date: Date range of our data\n// - avg_temp: Average temperature (should be close to your μ)\n// - std_dev: Standard deviation (should match your σ)\n\nnode.warn(`Diagnostic: Checking historical data for location ${lat}, ${lon}`);\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":760,"y":780,"wires":[["114a6a9a22ed9032"]]},{"id":"114a6a9a22ed9032","type":"sqlite","z":"34490142aa88368a","mydb":"473f5bc0183beb94","sqlquery":"msg.topic","sql":"","name":"","x":940,"y":780,"wires":[["f74c3190137ae011"]]},{"id":"f74c3190137ae011","type":"debug","z":"34490142aa88368a","name":"debug 2","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1070,"y":920,"wires":[]},{"id":"000ed080d05a3894","type":"function","z":"34490142aa88368a","name":"function 5","func":"// Check specifically for same day (MM-DD) historical data\n// This is what your K-means should be using\n\nconst lat = Number(global.get('user_lat') ?? 37.9838).toFixed(3);\nconst lon = Number(global.get('user_lon') ?? 23.7275).toFixed(3);\nconst mmdd = new Date().toISOString().slice(5, 10); // Current MM-DD\n\nmsg.topic = `\nSELECT \n    date_utc,\n    temp_mean,\n    SUBSTR(date_utc, 6, 5) as mm_dd,\n    (temp_mean - (SELECT AVG(temp_mean) FROM weather_climate_history \n                  WHERE ROUND(lat_round,3) = ${lat} \n                  AND ROUND(lon_round,3) = ${lon}\n                  AND SUBSTR(date_utc, 6, 5) = '${mmdd}')) as deviation\nFROM weather_climate_history \nWHERE ROUND(lat_round,3) = ${lat} \nAND ROUND(lon_round,3) = ${lon}\nAND SUBSTR(date_utc, 6, 5) = '${mmdd}'\nORDER BY date_utc;\n`;\n\n// This shows exactly what data your K-means is working with\n// Should show multiple years of data for today's date (MM-DD)\nnode.warn(`Same-day check: Looking for historical data on ${mmdd} at ${lat}, ${lon}`);\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":800,"y":1100,"wires":[["8baf19debf397c23"]]},{"id":"8baf19debf397c23","type":"sqlite","z":"34490142aa88368a","mydb":"473f5bc0183beb94","sqlquery":"msg.topic","sql":"","name":"","x":980,"y":1100,"wires":[["06d90f5ef5b63053"]]},{"id":"06d90f5ef5b63053","type":"debug","z":"34490142aa88368a","name":"debug 3","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1110,"y":1240,"wires":[]},{"id":"283e22165621dbe4","type":"function","z":"34490142aa88368a","name":"function 8","func":"// Current Temperature SQL Query Function\nconst lat = Number(global.get('user_lat') ?? 37.9838).toFixed(3);\nconst lon = Number(global.get('user_lon') ?? 23.7275).toFixed(3);\n\n// Debug: Check what data we received\nnode.warn(`Current Temp SQL received: ${JSON.stringify({\n    climate_mu: msg.climate_mu,\n    climate_sigma: msg.climate_sigma,\n    climate_todayMean: msg.climate_todayMean,\n    forecast_z: msg.forecast_z,\n    temp_records: msg.temp_records\n})}`);\n\n// Query for most recent current temperature\nmsg.topic = `\nSELECT \n    temperature,\n    timestamp,\n    humidity,\n    wind_speed,\n    pressure,\n    weathercode,\n    ROUND((julianday('now') - julianday(timestamp)) * 24, 1) as hours_ago\nFROM weather_current_ow\nWHERE ROUND(latitude, 3) = ${lat}\n  AND ROUND(longitude, 3) = ${lon}\nORDER BY timestamp DESC\nLIMIT 1;\n`;\n\n// Pass through all climate analysis data\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2230,"y":440,"wires":[["eb5c01ef81fc2b99","6299d5c6f5d2fecb"]]},{"id":"eb5c01ef81fc2b99","type":"sqlite","z":"34490142aa88368a","mydb":"473f5bc0183beb94","sqlquery":"msg.topic","sql":"","name":"","x":2480,"y":420,"wires":[["44c92c1ac0a7d2d4"]]},{"id":"44c92c1ac0a7d2d4","type":"function","z":"34490142aa88368a","name":"function 9","func":"// ===================================================================\n// 3. ENHANCED CURRENT TEMP ANALYSIS - Replace function 9 in Kmeans_v3\n// ===================================================================\n// Final Analysis - Complete Telegram Alert with Temperature Thresholds\n\nif (!msg.payload || !msg.payload.length) {\n    node.warn('No current temperature data found - sending forecast-only alert');\n\n    const mu = msg.climate_mu ?? global.get('climate_mu');\n    const sigma = msg.climate_sigma ?? global.get('climate_sigma');\n    const todayMean = msg.climate_todayMean ?? global.get('climate_todayMean');\n    const zForecast = msg.forecast_z ?? (sigma > 0 ? (todayMean - mu) / sigma : 0);\n\n    if (mu == null || sigma == null || todayMean == null) {\n        node.error(`Missing climate data: mu=${mu}, sigma=${sigma}, todayMean=${todayMean}`);\n        return null;\n    }\n\n    // Add temperature threshold checking for forecast-only mode\n    const chatId = global.get('default_chat');\n    const tempHigh = Number(global.get(`threshold:${chatId}:temp_high`) ?? 35);\n    const tempLow = Number(global.get(`threshold:${chatId}:temp_low`) ?? 5);\n    \n    let thresholdAlerts = '';\n    if (todayMean >= tempHigh) {\n        thresholdAlerts += `\\n🔥 **HIGH TEMP ALERT**: ${todayMean.toFixed(1)}°C ≥ ${tempHigh}°C`;\n    }\n    if (todayMean <= tempLow) {\n        thresholdAlerts += `\\n🧊 **LOW TEMP ALERT**: ${todayMean.toFixed(1)}°C ≤ ${tempLow}°C`;\n    }\n\n    if (global.get('default_chat')) {\n        const fallbackAlert = {\n            chatId: global.get('default_chat'),\n            payload: {\n                content:\n                    `🌡️ *Climate Update*\\n` +\n                    `Today Mean: ${todayMean.toFixed(1)}°C\\n` +\n                    `Normal: ${mu.toFixed(1)}°C ± ${sigma.toFixed(1)}\\n` +\n                    `Z-Score: ${zForecast.toFixed(2)}\\n` +\n                    `Records: ${msg.temp_records}` +\n                    thresholdAlerts +\n                    `\\n\\n🎯 *Thresholds: ≥${tempHigh}°C, ≤${tempLow}°C*\\n` +\n                    `(Current temp unavailable)`,\n                options: { parse_mode: 'Markdown' }\n            }\n        };\n        return fallbackAlert;\n    }\n    return null;\n}\n\nconst current = msg.payload[0];\nconst currentTemp = current.temperature;\nconst hoursAgo = current.hours_ago || 0;\n\n// Get climate data with fallback to globals\nconst mu = msg.climate_mu ?? global.get('climate_mu');\nconst sigma = msg.climate_sigma ?? global.get('climate_sigma');\nconst todayMean = msg.climate_todayMean ?? global.get('climate_todayMean');\nconst zForecast = msg.forecast_z ?? (sigma > 0 ? (todayMean - mu) / sigma : 0);\nconst tempRecords = msg.temp_records ?? 'N/A';\n\n// Validate we have all required climate data\nif (mu == null || sigma == null || todayMean == null || currentTemp == null) {\n    node.error(`Missing required data: mu=${mu}, sigma=${sigma}, todayMean=${todayMean}, currentTemp=${currentTemp}`);\n    return null;\n}\n\n// Calculate current temperature Z-score\nconst zCurrent = sigma > 0 ? (currentTemp - mu) / sigma : 0;\n\n// ═══════════════════════════════════════════════════════════════════\n// ENHANCED: Temperature Threshold Analysis\n// ═══════════════════════════════════════════════════════════════════\nconst chatId = global.get('default_chat');\nconst tempHigh = Number(global.get(`threshold:${chatId}:temp_high`) ?? 35);\nconst tempLow = Number(global.get(`threshold:${chatId}:temp_low`) ?? 5);\n\nlet thresholdAlerts = [];\n\n// Check current temperature thresholds\nif (currentTemp >= tempHigh) {\n    const severity = currentTemp >= (tempHigh + 5) ? 'EXTREME' : 'HIGH';\n    thresholdAlerts.push(`🔥 **${severity} TEMP**: Current ${currentTemp.toFixed(1)}°C ≥ ${tempHigh}°C`);\n}\nif (currentTemp <= tempLow) {\n    const severity = currentTemp <= (tempLow - 5) ? 'EXTREME' : 'LOW';\n    thresholdAlerts.push(`🧊 **${severity} TEMP**: Current ${currentTemp.toFixed(1)}°C ≤ ${tempLow}°C`);\n}\n\n// Check forecast temperature thresholds\nif (todayMean >= tempHigh && Math.abs(todayMean - currentTemp) > 2) {\n    thresholdAlerts.push(`🔥 **FORECAST HIGH**: Today's mean ${todayMean.toFixed(1)}°C ≥ ${tempHigh}°C`);\n}\nif (todayMean <= tempLow && Math.abs(todayMean - currentTemp) > 2) {\n    thresholdAlerts.push(`🧊 **FORECAST LOW**: Today's mean ${todayMean.toFixed(1)}°C ≤ ${tempLow}°C`);\n}\n\n// Determine alert levels\nconst absCurrentZ = Math.abs(zCurrent);\nconst absForecastZ = Math.abs(zForecast);\nconst maxZ = Math.max(absCurrentZ, absForecastZ);\nconst hasThresholdAlerts = thresholdAlerts.length > 0;\n\nlet alertIcon = \"🌡️\";\nlet alertLevel = \"Normal\";\n\n// Priority: Threshold alerts override climate anomaly alerts\nif (hasThresholdAlerts) {\n    alertIcon = thresholdAlerts.some(a => a.includes('EXTREME')) ? '🚨' : \n                thresholdAlerts.some(a => a.includes('🔥')) ? '🔥' : '🧊';\n    alertLevel = thresholdAlerts.some(a => a.includes('EXTREME')) ? 'EXTREME' : 'THRESHOLD';\n} else if (maxZ > 3.0) {\n    alertLevel = \"CLIMATE EXTREME\";\n    alertIcon = (zCurrent > 3.0 || zForecast > 3.0) ? \"🔥\" : \"🧊\";\n} else if (maxZ > 2.0) {\n    alertLevel = \"CLIMATE SIGNIFICANT\";\n    alertIcon = (zCurrent > 2.0 || zForecast > 2.0) ? \"🔥\" : \"🥶\";\n} else if (maxZ > 1.0) {\n    alertLevel = \"CLIMATE SLIGHT\";\n    alertIcon = (zCurrent > 1.0 || zForecast > 1.0) ? \"🌡️\" : \"❄️\";\n}\n\n// Create comprehensive message\nif (global.get('default_chat')) {\n    let message = `${alertIcon} *Temperature Update* (${alertLevel})\\n\\n`;\n\n    // Show threshold alerts first if any\n    if (hasThresholdAlerts) {\n        message += thresholdAlerts.join('\\n') + '\\n\\n';\n    }\n\n    // Current conditions\n    message += `🌡️ *Right Now*\\n`;\n    message += `Current: ${currentTemp.toFixed(1)}°C`;\n    if (hoursAgo > 0) {\n        message += ` (${hoursAgo}h ago)`;\n    }\n    message += `\\nZ-Score: ${zCurrent.toFixed(2)}\\n\\n`;\n\n    // Today's forecast  \n    message += `📊 *Today's Forecast*\\n`;\n    message += `Mean: ${todayMean.toFixed(1)}°C\\n`;\n    message += `Z-Score: ${zForecast.toFixed(2)}\\n\\n`;\n\n    // Climate normal\n    message += `📈 *Climate Normal*\\n`;\n    message += `Baseline: ${mu.toFixed(1)}°C ± ${sigma.toFixed(1)}\\n`;\n    message += `Records: ${tempRecords}\\n\\n`;\n\n    // Add current conditions context\n    if (current.humidity) {\n        message += `💧 Humidity: ${current.humidity}%\\n`;\n    }\n    if (current.wind_speed) {\n        message += `💨 Wind: ${current.wind_speed.toFixed(1)} m/s\\n`;\n    }\n    message += `\\n`;\n\n    // Temperature thresholds info\n    message += `🎯 *Your Thresholds*\\n`;\n    message += `High: ≥${tempHigh}°C | Low: ≤${tempLow}°C\\n\\n`;\n\n    // Interpretation (only if no threshold alerts)\n    if (!hasThresholdAlerts) {\n        if (absCurrentZ > 2.0) {\n            const direction = zCurrent > 0 ? \"much warmer\" : \"much cooler\";\n            message += `⚠️ Currently ${direction} than normal\\n`;\n        } else if (absCurrentZ > 1.0) {\n            const direction = zCurrent > 0 ? \"warmer\" : \"cooler\";\n            message += `📊 Currently ${direction} than normal\\n`;\n        }\n\n        if (absForecastZ > 2.0) {\n            const direction = zForecast > 0 ? \"much warmer\" : \"much cooler\";\n            message += `📈 Today will be ${direction} than normal`;\n        } else if (absForecastZ > 1.0) {\n            const direction = zForecast > 0 ? \"warmer\" : \"cooler\";\n            message += `📈 Today will be ${direction} than normal`;\n        } else if (absCurrentZ <= 1.0) {\n            message += `✅ Temperatures within normal range`;\n        }\n    }\n\n    const alertMsg = {\n        chatId: global.get('default_chat'),\n        payload: {\n            content: message,\n            options: { parse_mode: 'Markdown' }\n        }\n    };\n\n    node.warn(`Enhanced Analysis: Current=${currentTemp.toFixed(1)}°C, Thresholds: ≥${tempHigh}°C/≤${tempLow}°C, Alerts: ${thresholdAlerts.length}`);\n\n    return alertMsg;\n}\n\nreturn null;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2680,"y":440,"wires":[["48e704e9fa01e0f2","757d7a8395099d91"]]},{"id":"48e704e9fa01e0f2","type":"debug","z":"34490142aa88368a","name":"debug 4","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":3000,"y":460,"wires":[]},{"id":"6299d5c6f5d2fecb","type":"debug","z":"34490142aa88368a","name":"debug 22","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":2330,"y":560,"wires":[]},{"id":"e3","type":"function","z":"e1","name":"parse cmd","func":"/***************************************************************************\n * Updated Search Threshold Logic - Uses Unified System\n ***************************************************************************/\n\n// PARSE CMD (no changes needed)\nconst chat = msg.originalMessage.chat.id;\nconst raw = msg.originalMessage.text || msg.payload?.caption || '';\nconst query = raw.replace(/^\\/find\\s+/i, '').trim();\n\nif (!query) {\n  node.warn('Empty /find query');\n  return null;\n}\n\nconst cats = [\n  'restaurant', 'restaurants', 'cafe', 'bar', 'bank', 'atm', 'pharmacy', 'hospital',\n  'hotel', 'parking', 'supermarket', 'grocery', 'petrol', 'gas', 'school', 'park',\n  'museum', 'police', 'airport', 'station'\n];\nconst token = query.split(/\\s+/)[0].toLowerCase();\n\nmsg.chatId = chat;\nmsg.q = query;\nmsg.searchType = (cats.includes(token) && query.split(/\\s+/).length === 1) ? 'category' : 'fuzzy';\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":770,"y":380,"wires":[["c3a99f1cae1d19b7"]]},{"id":"e4","type":"function","z":"e1","name":"build url","func":"const lat = global.get('user_lat') ?? 37.9838;\nconst lon = global.get('user_lon') ?? 23.7275;\nif (lat === undefined || lon === undefined) {\n  node.error('Pin not set');\n  return null;\n}\n\nconst km = msg.radiusKm;    // From unified search_radius\nconst lim = msg.nearbyLimit; // From unified search_limit\nconst key = 'WDbuvlk869Xta1vLeKA3u8ReoQg3yrEM';\n\nlet endpoint;\nif (msg.searchType === 'category') {\n  endpoint = `https://api.tomtom.com/search/2/categorySearch/${encodeURIComponent(msg.q)}.json`;\n} else {\n  endpoint = `https://api.tomtom.com/search/2/poiSearch/${encodeURIComponent(msg.q)}.json`;\n}\n\nmsg.url = `${endpoint}?key=${key}&lat=${lat}&lon=${lon}&radius=${km * 1000}&limit=${lim}&view=Unified`;\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1050,"y":800,"wires":[["e5"]]},{"id":"e5","type":"http request","z":"e1","name":"TomTom search","method":"GET","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":1270,"y":800,"wires":[["e6"]]},{"id":"e6","type":"function","z":"e1","name":"format","func":"/***************************************************************************\n * Fixed Search Result Formatter - Shows All Results Properly\n ***************************************************************************/\n\nconst pois = msg.payload && msg.payload.results ? msg.payload.results : [];\n\nif (!pois.length) {\n  msg.payload = `🔍 No results found for \"${msg.q}\" 😕\\n\\nTry:\\n• Different keywords\\n• Broader search terms\\n• Check spelling`;\n  return msg;\n}\n\n// Calculate relevance scores and enhance data\nconst enhancedPois = pois.map(p => {\n  const poi = p.poi || {};\n  const address = p.address || {};\n  \n  // Distance scoring (closer = better score)\n  const distM = p.dist || 0;\n  const distKm = distM / 1000;\n  const distScore = Math.max(0, 100 - (distKm * 10)); // 100 at 0km, 0 at 10km+\n  \n  // Name relevance scoring\n  const name = poi.name || 'Unknown';\n  const queryLower = msg.q.toLowerCase();\n  const nameLower = name.toLowerCase();\n  \n  let nameScore = 0;\n  if (nameLower.includes(queryLower)) nameScore += 50;\n  if (nameLower.startsWith(queryLower)) nameScore += 30;\n  \n  // Category relevance scoring\n  const categories = poi.categories || [];\n  let categoryScore = 0;\n  categories.forEach(cat => {\n    if (cat.toLowerCase().includes(queryLower)) categoryScore += 25;\n  });\n  \n  // Combined relevance score (0-100)\n  const totalScore = Math.min(100, Math.round(\n    (distScore * 0.4) + (nameScore * 0.4) + (categoryScore * 0.2)\n  ));\n  \n  // Generate quality indicators\n  const indicators = [];\n  if (distKm < 0.5) indicators.push('🎯');  // Very close\n  if (distKm >= 0.5 && distKm < 2) indicators.push('📍'); // Close\n  if (totalScore >= 80) indicators.push('⭐'); // High relevance\n  if (totalScore >= 90) indicators.push('🏆'); // Perfect match\n  \n  // Phone number if available\n  const phone = poi.phone ? ` 📞 ${poi.phone}` : '';\n  \n  return {\n    name,\n    address: address.freeformAddress || 'Address unavailable',\n    distKm,\n    distM,\n    totalScore,\n    indicators: indicators.join(''),\n    phone,\n    categories: categories.slice(0, 2), // Max 2 categories\n    originalData: p\n  };\n});\n\n// Sort by relevance score (highest first)\nenhancedPois.sort((a, b) => b.totalScore - a.totalScore);\n\n// Format results - SHOW ALL RESULTS from API\nconst searchType = msg.searchType === 'category' ? '📂 Category' : '🔍 Search';\nconst resultCount = enhancedPois.length;\nconst radiusKm = msg.radiusKm || 'unknown';\n\nlet output = `${searchType}: *${msg.q}*\\n`;\noutput += `📊 Found ${resultCount} results (≤${radiusKm}km)\\n\\n`;\n\n// Group by score ranges for better presentation\nconst excellent = enhancedPois.filter(p => p.totalScore >= 80);\nconst good = enhancedPois.filter(p => p.totalScore >= 60 && p.totalScore < 80);\nconst fair = enhancedPois.filter(p => p.totalScore < 60);\n\n// Show excellent matches first\nif (excellent.length > 0) {\n  output += `🏆 **Top Matches**\\n`;\n  excellent.forEach((p, i) => {\n    output += formatPoi(p, i + 1);\n  });\n  if (good.length > 0 || fair.length > 0) output += `\\n`;\n}\n\n// Show good matches\nif (good.length > 0) {\n  const label = excellent.length > 0 ? `📍 **More Options**\\n` : `📍 **Results**\\n`;\n  output += label;\n  good.forEach((p, i) => {\n    output += formatPoi(p, excellent.length + i + 1);\n  });\n  if (fair.length > 0) output += `\\n`;\n}\n\n// Show fair matches - SHOW ALL, don't limit artificially\nif (fair.length > 0) {\n  output += `📋 **Other Results**\\n`;\n  fair.forEach((p, i) => {\n    output += formatPoi(p, excellent.length + good.length + i + 1);\n  });\n}\n\n// Add helpful footer - NO MORE \"X more results\" confusion\noutput += `\\n💡 *Tip: Try /set search_radius ${radiusKm + 2} for wider search*`;\n\nfunction formatPoi(poi, index) {\n  const distText = poi.distKm < 1 \n    ? `${Math.round(poi.distKm * 1000)}m`\n    : `${poi.distKm.toFixed(1)}km`;\n  \n  const scoreEmoji = poi.totalScore >= 90 ? '🟢' : \n                     poi.totalScore >= 70 ? '🟡' : '🔵';\n  \n  let line = `${index}. ${poi.indicators} *${poi.name}* ${scoreEmoji}\\n`;\n  line += `   📍 ${distText} • ${poi.address}`;\n  \n  // Add category info for context\n  if (poi.categories.length > 0) {\n    line += `\\n   🏷️ ${poi.categories.join(', ')}`;\n  }\n  \n  line += poi.phone + `\\n\\n`;\n  \n  return line;\n}\n\nmsg.payload = output;\nmsg.options = { parse_mode: 'Markdown' };\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1470,"y":800,"wires":[["a579ad074fa1eab5"]]},{"id":"e7","type":"telegram sender","z":"e1","name":"","bot":"25bc3f9b27c564a8","haserroroutput":false,"outputs":1,"x":2130,"y":800,"wires":[[]]},{"id":"d3514ea70b822dc9","type":"subflow:59a72ce7cc02f596","z":"e1","name":"getRadius","x":1140,"y":380,"wires":[["ec522a41b842af26"]]},{"id":"d17b7bc7b0a81506","type":"subflow:59a72ce7cc02f596","z":"e1","name":"getLimit","x":1810,"y":380,"wires":[["e3e5c08b94b3feef"]]},{"id":"c3a99f1cae1d19b7","type":"change","z":"e1","name":"set radius","rules":[{"t":"set","p":"chatId","pt":"msg","to":"chatId","tot":"msg"},{"t":"set","p":"key","pt":"msg","to":"search_radius","tot":"str"},{"t":"set","p":"def","pt":"msg","to":"10","tot":"num"}],"action":"","property":"","from":"","to":"","reg":false,"x":960,"y":380,"wires":[["d3514ea70b822dc9"]]},{"id":"ec522a41b842af26","type":"change","z":"e1","name":"get radius MSG","rules":[{"t":"set","p":"radiusKm","pt":"msg","to":"value","tot":"msg"},{"t":"delete","p":"key","pt":"msg"},{"t":"delete","p":"def","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1360,"y":380,"wires":[["570b77016227a2e0"]]},{"id":"e3e5c08b94b3feef","type":"change","z":"e1","name":"getLimit","rules":[{"t":"set","p":"nearbyLimit","pt":"msg","to":"value","tot":"msg"},{"t":"delete","p":"key","pt":"msg"},{"t":"delete","p":"def","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2020,"y":380,"wires":[["e4"]]},{"id":"570b77016227a2e0","type":"change","z":"e1","name":"set limit","rules":[{"t":"set","p":"chatId","pt":"msg","to":"chatId","tot":"msg"},{"t":"set","p":"key","pt":"msg","to":"search_limit","tot":"str"},{"t":"set","p":"def","pt":"msg","to":"5","tot":"num"}],"action":"","property":"","from":"","to":"","reg":false,"x":1620,"y":380,"wires":[["d17b7bc7b0a81506"]]},{"id":"a579ad074fa1eab5","type":"subflow:9f9b26a721ad1b8e","z":"e1","name":"","x":1780,"y":800,"wires":[["e7"],[]]},{"id":"f27bb81945a5da8f","type":"link in","z":"e1","name":"find link in","links":["5f9380041e16b837"],"x":365,"y":380,"wires":[["e3"]]},{"id":"INJECT_5m","type":"inject","z":"traffic_api","name":"10min","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"600","crontab":"","once":true,"onceDelay":"10","topic":"","payload":"","payloadType":"date","x":160,"y":700,"wires":[["BUILD_URL"]]},{"id":"BUILD_URL","type":"function","z":"traffic_api","name":"url & bbox","func":"const lat = global.get('user_lat') ?? 37.9838;\nconst lon = global.get('user_lon') ?? 23.7275;\nif (lat === undefined || lon === undefined) {\n  node.error('Pin not set'); return null;\n}\n\nconst half  = 0.45;\nconst bbox  = [lon-half, lat-half, lon+half, lat+half].join(',');\nconst key   = 'WDbuvlk869Xta1vLeKA3u8ReoQg3yrEM';   // hard-coded for now\n\n// choose ONE of these lines ↓\n// 1️⃣ Full payload (simplest):\nmsg.url =\n  `https://api.tomtom.com/traffic/services/5/incidentDetails` +\n  `?key=${key}&bbox=${bbox}&language=en-GB&timeValidityFilter=present`;\n\n// 2️⃣ Slim projection (uncomment if you prefer lean payload):\n// const fields = '%7Bincidents%7Bproperties%7BiconCategory%2CstartTime%2CendTime%2Cseverity%2CmagnitudeOfDelay%7D%7D%7D';\n// msg.url =\n//   `https://api.tomtom.com/traffic/services/5/incidentDetails` +\n//   `?key=${key}&bbox=${bbox}&language=en-GB&timeValidityFilter=present&fields=${fields}`;\n\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":460,"y":700,"wires":[["HTTP_TT"]]},{"id":"HTTP_TT","type":"http request","z":"traffic_api","name":"TomTom incidents","method":"GET","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":690,"y":700,"wires":[["0b10389cdddad7a9"]]},{"id":"PARSE_TT","type":"function","z":"traffic_api","name":"build SQL + alerts","func":"/***************************************************************************\n * Unified Threshold System\n * \n * LOCATION-BASED THRESHOLDS:\n * - search_radius: Distance for nearby search results & traffic incidents (km)\n * - search_limit: Maximum number of results to return\n * \n * EARTHQUAKE THRESHOLDS:\n * - quake_mag: Minimum magnitude for nearby earthquake alerts\n * - quake_radius: Distance for earthquake alerts (km) \n * - global_quake_mag: Minimum magnitude for global earthquake alerts\n * \n * TRAFFIC THRESHOLDS:\n * - traffic_min_sev: Minimum severity for traffic alerts (1-5)\n * \n * WEATHER THRESHOLDS:\n * - temp_alert_high: High temperature alert threshold (°C)\n * - temp_alert_low: Low temperature alert threshold (°C)\n ***************************************************************************/\n\n// Enhanced Traffic Parser with Unified Thresholds\nconst iso = t => {\n  const d = new Date(t);\n  return isNaN(d) ? new Date().toISOString() : d.toISOString();\n};\nconst clamp = (n, min, max) => Math.min(Math.max(n, min), max);\n\nconst haversine = (lat1, lon1, lat2, lon2) => {\n  const R = 6371;\n  const toRad = x => x * Math.PI / 180;\n  const dLat = toRad(lat2 - lat1);\n  const dLon = toRad(lon2 - lon1);\n  const a = Math.sin(dLat / 2) ** 2 +\n    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *\n    Math.sin(dLon / 2) ** 2;\n  return 2 * R * Math.asin(Math.sqrt(a));\n};\n\n/* ---------- context & unified thresholds ----------------------------- */\nconst rows = msg.payload?.incidents || [];\nconst chatId = global.get('default_chat') || 0;\nconst userLat = global.get('user_lat');\nconst userLon = global.get('user_lon');\n\n// UNIFIED THRESHOLD SYSTEM\nconst searchRadius = Number(\n  global.get(`threshold:${chatId}:search_radius`) ?? 10  // Default 10km for nearby\n);\n\nconst searchLimit = Number(\n  global.get(`threshold:${chatId}:search_limit`) ?? 5    // Default 5 nearby incidents\n);\n\nconst minSev = Number(\n  msg.traffic_min_sev ??\n  global.get(`threshold:${chatId}:traffic_min_sev`) ??\n  3  // Default severity 3+\n);\n\nif (!userLat || !userLon) {\n  node.warn('Missing user location for traffic analysis');\n  return null;\n}\n\nnode.warn(`=== TRAFFIC THRESHOLDS ===`);\nnode.warn(`Search Radius: ${searchRadius}km (unified with search)`);\nnode.warn(`Search Limit: ${searchLimit} incidents`);\nnode.warn(`Min Severity: ${minSev}`);\n\n/* ---------- category mappings ---------------------------------------- */\nconst cat2sev = {\n  1: 4,  // accident\n  2: 3,  // congestion\n  3: 3,  // road works\n  4: 5,  // road closure\n  5: 2,  // weather\n  6: 2,  // lane restriction\n  7: 3,  // road hazard\n  8: 4,  // incident\n  9: 3,  // traffic flow\n  10: 2, // fog\n  11: 2, // wind\n  12: 2, // rain\n  13: 3, // ice\n  14: 1  // parking / info\n};\n\nconst catNames = {\n  1: \"🚗 Accident\",\n  2: \"🐌 Congestion\",\n  3: \"🚧 Road Works\",\n  4: \"🚫 Road Closure\",\n  5: \"🌦️ Weather\",\n  6: \"⚠️ Lane Restriction\",\n  7: \"☢️ Road Hazard\",\n  8: \"🚨 Incident\",\n  9: \"🚥 Traffic Flow\",\n  10: \"🌫️ Fog\",\n  11: \"💨 Wind\",\n  12: \"🌧️ Rain\",\n  13: \"🧊 Ice\",\n  14: \"ℹ️ Info\"\n};\n\nconst sevNames = {\n  1: \"Minor\",\n  2: \"Light\",\n  3: \"Moderate\",\n  4: \"Heavy\",\n  5: \"Severe\"\n};\n\n/* ---------- process incidents ---------------------------------------- */\nconst bucket = {}; // {severity: count}\nconst nearby = []; // incidents within search_radius\nconst major = [];  // severity 4+ incidents anywhere\n\nfor (const feat of rows) {\n  const pr = feat.properties || {};\n\n  /* ---- derive severity --------------------------------------------- */\n  let sev = Number(pr.severity);\n  if (!Number.isFinite(sev) || sev < 1 || sev > 5) {\n    if (Number.isFinite(pr.magnitudeOfDelay) && pr.magnitudeOfDelay > 0) {\n      sev = clamp(Math.ceil(pr.magnitudeOfDelay / 600), 1, 5);\n    } else {\n      sev = cat2sev[pr.iconCategory] ?? 2;\n    }\n  }\n\n  /* ---- coordinates ------------------------------------------------- */\n  let lat = null, lon = null;\n  if (feat.geometry?.type === 'LineString') {\n    [lon, lat] = feat.geometry.coordinates[0];\n  } else if (feat.geometry?.type === 'Point') {\n    [lon, lat] = feat.geometry.coordinates;\n  }\n  if (lat == null || lon == null) continue;\n\n  /* ---- distance calculation ---------------------------------------- */\n  const distKm = haversine(userLat, userLon, lat, lon);\n\n  /* ---- other fields ------------------------------------------------ */\n  const tsIso = iso(pr.startTime || pr.from || pr.t);\n  const delay = pr.magnitudeOfDelay ?? 0;\n  const cat = pr.iconCategory ?? 0;\n\n  /* ---- SQL UPSERT -------------------------------------------------- */\n  const sql = `\n    INSERT INTO traffic_incidents\n      (ts_utc, lat, lon, severity, delay_sec, category, src)\n    VALUES\n      ('${tsIso}', ${lat}, ${lon}, ${sev}, ${delay}, ${cat}, 'tomtom')\n    ON CONFLICT(ts_utc,lat,lon,src) DO UPDATE SET\n      severity  = excluded.severity,\n      delay_sec = excluded.delay_sec;\n  `.trim();\n  node.send([{ topic: sql }, null]);\n\n  /* ---- collect for alert ------------------------------------------- */\n  if (sev >= minSev) {\n    bucket[sev] = (bucket[sev] ?? 0) + 1;\n\n    // Track nearby incidents (within unified search_radius)\n    if (distKm <= searchRadius) {\n      nearby.push({\n        category: catNames[cat] || `Category ${cat}`,\n        severity: sev,\n        distance: distKm,\n        delay: delay\n      });\n    }\n\n    // Track major incidents anywhere\n    if (sev >= 4) {\n      major.push({\n        category: catNames[cat] || `Category ${cat}`,\n        severity: sev,\n        distance: distKm,\n        delay: delay\n      });\n    }\n  }\n}\n\n/* ---------- smart alert logic ------------------------------------- */\nif (Object.keys(bucket).length && chatId) {\n\n  // Create current summary signature for deduplication\n  const signature = JSON.stringify({\n    bucket,\n    nearbyCount: nearby.length,\n    majorCount: major.length,\n    timestamp: Math.floor(Date.now() / (10 * 60 * 1000)) // 10-min windows\n  });\n\n  // Check if this is the same as last alert\n  const lastSignature = global.get(`traffic_last_alert:${chatId}`) || '';\n\n  if (signature === lastSignature) {\n    node.warn('Traffic alert skipped - same as previous');\n    return null;\n  }\n\n  // Store new signature\n  global.set(`traffic_last_alert:${chatId}`, signature);\n\n  /* ---- build rich alert message ------------------------------------ */\n  let alertText = \"🚦 **Traffic Update**\\n\\n\";\n\n  // Overall summary\n  const totalIncidents = Object.values(bucket).reduce((a, b) => a + b, 0);\n  alertText += `📊 **${totalIncidents} active incidents** (≥S${minSev})\\n`;\n\n  // Severity breakdown\n  const sevBreakdown = Object.entries(bucket)\n    .sort((a, b) => Number(b[0]) - Number(a[0])) // highest severity first\n    .map(([s, n]) => `${n}× ${sevNames[s]} (S${s})`)\n    .join(', ');\n  alertText += `📈 ${sevBreakdown}\\n\\n`;\n\n  // Nearby incidents (high priority) - LIMITED by search_limit\n  if (nearby.length > 0) {\n    alertText += `🎯 **${nearby.length} Near You** (≤${searchRadius}km):\\n`;\n\n    // Sort by severity then distance\n    nearby.sort((a, b) => {\n      if (a.severity !== b.severity) return b.severity - a.severity;\n      return a.distance - b.distance;\n    });\n\n    nearby.slice(0, searchLimit).forEach(inc => {\n      alertText += `• ${inc.category} - ${inc.distance.toFixed(1)}km away`;\n      if (inc.delay > 0) {\n        alertText += ` (+${Math.round(inc.delay / 60)}min delay)`;\n      }\n      alertText += `\\n`;\n    });\n\n    if (nearby.length > searchLimit) {\n      alertText += `• ...and ${nearby.length - searchLimit} more nearby\\n`;\n    }\n    alertText += `\\n`;\n  }\n\n  // Major incidents anywhere (outside search radius)\n  const majorOutside = major.filter(inc => inc.distance > searchRadius);\n  if (majorOutside.length > 0) {\n    alertText += `🚨 **Major Incidents** (S4+):\\n`;\n    majorOutside.slice(0, 2).forEach(inc => {\n      alertText += `• ${inc.category} - ${inc.distance.toFixed(0)}km away\\n`;\n    });\n    alertText += `\\n`;\n  }\n\n  // Time stamp\n  const now = new Date();\n  alertText += `⏰ *Updated: ${now.toLocaleTimeString('en-US', { hour12: false })}*`;\n\n  // Send alert\n  node.send([\n    null,\n    {\n      chatId,\n      payload: {\n        content: alertText,\n        options: { parse_mode: 'Markdown' }\n      }\n    }\n  ]);\n}\n\nreturn null;","outputs":2,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1530,"y":380,"wires":[["SQL_TRAFFIC"],["WRAP_TELEGRAM"]]},{"id":"SQL_TRAFFIC","type":"sqlite","z":"traffic_api","mydb":"473f5bc0183beb94","sqlquery":"msg.topic","sql":"","name":"traffic_incidents","x":2130,"y":380,"wires":[[]]},{"id":"WRAP_TELEGRAM","type":"subflow:9f9b26a721ad1b8e","z":"traffic_api","name":"","x":1840,"y":820,"wires":[["TEL_SEND"],[]]},{"id":"TEL_SEND","type":"telegram sender","z":"traffic_api","name":"","bot":"25bc3f9b27c564a8","haserroroutput":false,"outputs":1,"x":2330,"y":820,"wires":[[]]},{"id":"0b10389cdddad7a9","type":"change","z":"traffic_api","name":"set traffic_min_sev","rules":[{"t":"set","p":"chatId","pt":"msg","to":"$globalContext(\"default_chat\")","tot":"jsonata"},{"t":"set","p":"key","pt":"msg","to":"traffic_min_sev","tot":"str"},{"t":"set","p":"def","pt":"msg","to":"3","tot":"num"}],"action":"","property":"","from":"","to":"","reg":false,"x":930,"y":380,"wires":[["95f140c426d88735","085c5f7e84c3cd59"]]},{"id":"95f140c426d88735","type":"subflow:59a72ce7cc02f596","z":"traffic_api","name":"getTrafficSev","x":1130,"y":380,"wires":[["0871179bbef6191c"]]},{"id":"0871179bbef6191c","type":"change","z":"traffic_api","name":"getTrafficSev MSG","rules":[{"t":"set","p":"traffic_min_sev","pt":"msg","to":"value","tot":"msg"},{"t":"delete","p":"key","pt":"msg"},{"t":"delete","p":"def","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1350,"y":300,"wires":[["PARSE_TT"]]},{"id":"085c5f7e84c3cd59","type":"debug","z":"traffic_api","name":"debug 13","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1110,"y":200,"wires":[]},{"id":"f3","type":"function","z":"f1","name":"build SQL","func":"const lat = global.get('user_lat');\nconst lon = global.get('user_lon');\nif (lat === undefined || lon === undefined) {\n  node.error('Pin not set - please share your location first');\n  msg.payload = {\n    chatId: msg.originalMessage.chat.id,\n    type: 'message',\n    content: '📍 Please set your location first using `/pin` or `/loc city_name`'\n  };\n  return msg;\n}\n\nconst chat = msg.originalMessage.chat.id;\n// Get radius from msg (passed from previous node) or fallback to global\nconst rkm = msg.radiusKm || Number(global.get(`threshold:${chat}:search_radius`) || 3);\nconst deg = rkm / 111;\nconst hourAgo = new Date(Date.now() - 3600000).toISOString();\n\nmsg.topic = `SELECT * FROM traffic_incidents WHERE ts_utc > '${hourAgo}' AND lat BETWEEN ${lat - deg} AND ${lat + deg} AND lon BETWEEN ${lon - deg} AND ${lon + deg} ORDER BY severity DESC LIMIT 10`;\n\n// IMPORTANT: Keep radiusKm in the message for the next node\nmsg.radiusKm = rkm;\n\nnode.warn(`Traffic SQL: radius=${rkm}km, query=${msg.topic}`);\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1240,"y":320,"wires":[["f4","3fbf23d264ae7120"]]},{"id":"f4","type":"sqlite","z":"f1","mydb":"473f5bc0183beb94","sqlquery":"msg.topic","sql":"","name":"traffic_incidents","x":1480,"y":320,"wires":[["f5"]]},{"id":"f5","type":"function","z":"f1","name":"format","func":"const rows = msg.payload || [];\nconst radiusKm = msg.radiusKm || 3; // Passed from previous nodes\nconst chat = msg.originalMessage?.chat?.id || global.get('default_chat');\n\nnode.warn(`Traffic format: Found ${rows.length} incidents, radius=${radiusKm}km, chat=${chat}`);\n\nif (!rows.length) {\n  msg.payload = {\n    chatId: chat,\n    type: 'message',\n    content: `✅ *Traffic Status: All Clear*\n\n🔍 No incidents found within ${radiusKm}km\n⏰ ${new Date().toLocaleTimeString('en-US', { hour12: false })}`,\n    options: { parse_mode: 'Markdown' }\n  };\n  return msg;\n}\n\n// Enhanced formatting with severity icons\nconst severityIcon = (sev) => {\n  if (sev >= 8) return '🔴';\n  if (sev >= 6) return '🟠';\n  if (sev >= 4) return '🟡';\n  return '🔵';\n};\n\nconst timeAgo = (timestamp) => {\n  const now = Date.now();\n  const then = new Date(timestamp).getTime();\n  const diffMins = Math.floor((now - then) / 60000);\n\n  if (diffMins < 1) return 'just now';\n  if (diffMins < 60) return `${diffMins}m ago`;\n  const diffHours = Math.floor(diffMins / 60);\n  if (diffHours < 24) return `${diffHours}h ago`;\n  return 'over a day ago';\n};\n\nlet output = `🚦 *Traffic Report* (${rows.length} incidents)\n\n`;\n\noutput += rows.map(r => {\n  const icon = severityIcon(r.severity);\n  const time = r.ts_utc ? timeAgo(r.ts_utc) : '';\n  const location = r.road || 'Unknown road';\n  const category = r.category || 'Incident';\n\n  return `${icon} **${category}** (severity ${r.severity})\n📍 ${location}${time ? `\n⏰ ${time}` : ''}`;\n}).join('\\n\\n');\n\noutput += `\n\n🎯 Monitoring within ${radiusKm}km radius`;\n\nmsg.payload = {\n  chatId: chat,\n  type: 'message',\n  content: output,\n  options: { parse_mode: 'Markdown' }\n};\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1730,"y":320,"wires":[["23eaa519e8db619d"]]},{"id":"f6","type":"telegram sender","z":"f1","name":"","bot":"25bc3f9b27c564a8","haserroroutput":false,"outputs":1,"x":2430,"y":300,"wires":[[]]},{"id":"10094cd101376f57","type":"subflow:59a72ce7cc02f596","z":"f1","name":"getRadius","x":740,"y":320,"wires":[["a28466ab3a75c125"]]},{"id":"ed957b3822fe9919","type":"change","z":"f1","name":"set radius","rules":[{"t":"set","p":"chatId","pt":"msg","to":"chatId","tot":"msg"},{"t":"set","p":"key","pt":"msg","to":"search_radius","tot":"str"},{"t":"set","p":"def","pt":"msg","to":"3","tot":"num"}],"action":"","property":"","from":"","to":"","reg":false,"x":560,"y":320,"wires":[["10094cd101376f57","ec469259ce1c4913"]]},{"id":"a28466ab3a75c125","type":"change","z":"f1","name":"get radius MSG","rules":[{"t":"set","p":"radiusKm","pt":"msg","to":"value","tot":"msg"},{"t":"delete","p":"key","pt":"msg"},{"t":"delete","p":"def","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":960,"y":320,"wires":[["f3"]]},{"id":"952c21feb93e8c54","type":"link in","z":"f1","name":"link in telegram","links":["cce7b190c5acac5c"],"x":105,"y":320,"wires":[["23b8d2985ed2b7b8"]]},{"id":"ec469259ce1c4913","type":"debug","z":"f1","name":"debug 19","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":690,"y":500,"wires":[]},{"id":"3fbf23d264ae7120","type":"debug","z":"f1","name":"debug 20","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1370,"y":520,"wires":[]},{"id":"23b8d2985ed2b7b8","type":"function","z":"f1","name":"function 13","func":"msg.originalMessage = {\n    chat: {\n        id: msg.payload.chatId\n    }\n};\n\nmsg.chatId = msg.payload.chatId;\n\nnode.warn(`Traffic command received from chat: ${msg.payload.chatId}`);\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":310,"y":320,"wires":[["ed957b3822fe9919"]]},{"id":"23eaa519e8db619d","type":"subflow:9f9b26a721ad1b8e","z":"f1","name":"","x":2040,"y":320,"wires":[["f6"],[]]},{"id":"48c4808139f789e3","type":"function","z":"0536c0de48143757","name":"build SQL","func":"// ===================================================================\n// FIXED \"build SQL\" Function - Query Thresholds Table\n// ===================================================================\n\n// Get the chat ID from the message\nconst chatId = msg.originalMessage?.chat?.id || msg.payload?.chatId || msg.chatId || global.get('default_chat');\n\nif (!chatId) {\n  node.error('No chat ID found for threshold lookup');\n  return null;\n}\n\n// Build SQL query to get all thresholds for this chat\nmsg.topic = `SELECT key, value FROM thresholds WHERE chat_id = ${chatId} ORDER BY key`;\n\n// Pass the chatId along for the next nodes\nmsg.chatId = chatId;\n\nnode.warn(`Threshold SQL: ${msg.topic}`);\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":780,"y":400,"wires":[["94e7477ac3cf5e51"]]},{"id":"94e7477ac3cf5e51","type":"sqlite","z":"0536c0de48143757","mydb":"473f5bc0183beb94","sqlquery":"msg.topic","sql":"","name":"thresholds","x":980,"y":400,"wires":[["1829b79a5acfab85"]]},{"id":"1829b79a5acfab85","type":"function","z":"0536c0de48143757","name":"format","func":"// ===================================================================\n// FIXED \"format\" Function - Properly Handle Shared Parameters\n// ===================================================================\n\nconst rows = msg.payload || [];\nconst chatId = msg.chatId || global.get('default_chat');\n\nlet text;\nif (!rows.length) {\n  text = `⚙️ *Your Settings*\n\n🔧 No custom thresholds set yet.\n\n💡 Set thresholds with:\n• \\`/set temp_high 35\\`\n• \\`/set search_radius 5\\`\n• \\`/set quake_mag 4.5\\`\n\nUse \\`/config\\` to see all available settings.`;\n} else {\n  // Create a map of all thresholds\n  const thresholdMap = {};\n  rows.forEach(r => {\n    thresholdMap[r.key] = r.value;\n  });\n  \n  // Define categories and their display order\n  const categoryDisplay = [\n    {\n      name: 'Temperature',\n      keys: ['temp_high', 'temp_low']\n    },\n    {\n      name: 'Search & Traffic', \n      keys: ['search_radius', 'search_limit']\n    },\n    {\n      name: 'Earthquakes',\n      keys: ['quake_mag', 'quake_radius', 'global_quake_mag']\n    },\n    {\n      name: 'Weather',\n      keys: ['wind_speed', 'humidity']\n    }\n  ];\n  \n  text = `⚙️ *Your Current Settings*\n\n`;\n  \n  const usedKeys = new Set();\n  \n  // Display each category\n  categoryDisplay.forEach(category => {\n    const categoryItems = category.keys.filter(key => \n      thresholdMap.hasOwnProperty(key) && !usedKeys.has(key)\n    );\n    \n    if (categoryItems.length > 0) {\n      text += `**${category.name}:**\n`;\n      categoryItems.forEach(key => {\n        text += `• \\`${key}\\` → ${thresholdMap[key]}\n`;\n        usedKeys.add(key);\n      });\n      text += `\n`;\n    }\n  });\n  \n  // Display any remaining uncategorized thresholds\n  const otherItems = rows.filter(r => !usedKeys.has(r.key));\n  if (otherItems.length > 0) {\n    text += `**Other:**\n`;\n    otherItems.forEach(r => {\n      text += `• \\`${r.key}\\` → ${r.value}\n`;\n    });\n    text += `\n`;\n  }\n  \n  text += `💡 Use \\`/set <param> <value>\\` to update any setting.`;\n}\n\n// Create proper message structure for WRAP_TELEGRAM\nmsg.text = text;\nmsg.chatId = chatId;\nmsg.payload = {\n  chatId: chatId,\n  type: 'message',\n  content: text,\n  options: { parse_mode: 'Markdown' }\n};\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1180,"y":400,"wires":[["12ad5be297f6df91"]]},{"id":"12ad5be297f6df91","type":"subflow:9f9b26a721ad1b8e","z":"0536c0de48143757","name":"WRAP_TELEGRAM","x":1400,"y":400,"wires":[["6b6d6115597a7c76"],[]]},{"id":"6b6d6115597a7c76","type":"telegram sender","z":"0536c0de48143757","bot":"25bc3f9b27c564a8","outputs":1,"x":1620,"y":400,"wires":[[]]},{"id":"026693e28ceef151","type":"link in","z":"0536c0de48143757","name":"link in 1","links":["77476dac05e877c3"],"x":295,"y":400,"wires":[["48c4808139f789e3"]]},{"id":"IN_LINK","type":"link in","z":"loc_info_tab","name":"loc_changed","links":["0e3871e420c8efe4","11d10040b77a0559"],"x":85,"y":900,"wires":[["b14e5c16c2ddbd05","4e60268988cad702"]]},{"id":"WX_URL","type":"function","z":"loc_info_tab","name":"url weather","func":"/*************************************************************************\n * get_today_mean  – call Open-Meteo daily endpoint, grab mean\n *  IN : msg.lat, msg.lon   (passed from build_sql)\n *  OUT: msg.todayMean      (Number)\n *       msg.rows           (history array for K-means)\n *************************************************************************/\n\nconst today = new Date().toISOString().slice(0, 10);          // YYYY-MM-DD\nmsg.url =\n    `https://api.open-meteo.com/v1/forecast` +\n    `?latitude=${msg.lat}&longitude=${msg.lon}` +\n    `&start_date=${today}&end_date=${today}` +\n    `&daily=temperature_2m_mean&timezone=UTC`;\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":790,"y":720,"wires":[["HTTP_WX"]]},{"id":"HTTP_WX","type":"http request","z":"loc_info_tab","name":"open-meteo wx","method":"GET","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":1040,"y":720,"wires":[["WX_PARSE"]]},{"id":"WX_PARSE","type":"function","z":"loc_info_tab","name":"parse wx","func":"const mean = msg.payload.daily?.temperature_2m_mean?.[0];\nif (mean == null) { node.warn('no daily mean'); return null; }\nmsg.payload = { temp: mean };\nmsg.topic   = 'met';\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1340,"y":720,"wires":[["JOIN"]]},{"id":"AQ_URL","type":"function","z":"loc_info_tab","name":"url AQ","func":"const lat = global.get('user_lat');\nconst lon = global.get('user_lon');\nmsg.url = `https://air-quality-api.open-meteo.com/v1/air-quality`+\n          `?latitude=${lat}&longitude=${lon}`+\n          `&hourly=us_aqi`+\n          `&timezone=auto`;\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":750,"y":800,"wires":[["HTTP_AQ"]]},{"id":"HTTP_AQ","type":"http request","z":"loc_info_tab","name":"open-meteo AQ","method":"GET","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":1000,"y":800,"wires":[["AQ_PARSE"]]},{"id":"AQ_PARSE","type":"function","z":"loc_info_tab","name":"parse AQ","func":"const aqi = msg.payload?.hourly?.us_aqi?.[0] ?? 'n/a';\nmsg.payload = aqi;\nmsg.topic   = 'aq';\nreturn msg;","outputs":1,"x":1280,"y":800,"wires":[["JOIN"]]},{"id":"SQL_QUAKES","type":"function","z":"loc_info_tab","name":"build quakes SQL","func":"const chat = global.get('default_chat');\nconst rkm  = Number(global.get(`threshold:${chat}:near_quake_radius`) || 100);\nconst lat  = global.get('user_lat');\nconst lon  = global.get('user_lon');\nconst deg  = rkm / 111;\nconst dayAgo = new Date(Date.now() - 24*3600e3).toISOString();\nmsg.topic = `SELECT COUNT(*) AS n FROM eq_events WHERE ts_utc>'${dayAgo}' AND lat BETWEEN ${lat-deg} AND ${lat+deg} AND lon BETWEEN ${lon-deg} AND ${lon+deg}`;\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":790,"y":880,"wires":[["DB_QUAKES"]]},{"id":"DB_QUAKES","type":"sqlite","z":"loc_info_tab","mydb":"","sqlquery":"msg.topic","sql":"","name":"count quakes","x":1090,"y":880,"wires":[["QUAKE_PARSE"]]},{"id":"QUAKE_PARSE","type":"function","z":"loc_info_tab","name":"parse Nq","func":"msg.payload = msg.payload[0].n;\nmsg.topic   = 'nq';\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1300,"y":880,"wires":[["JOIN"]]},{"id":"SQL_TRAFF","type":"function","z":"loc_info_tab","name":"build traff SQL","func":"const chat = global.get('default_chat');\nconst thresh = Number(global.get(`threshold:${chat}:traffic_min_sev`) || 3);\nconst rkm    = Number(global.get(`threshold:${chat}:radius_near_me`) || 3);\nconst lat    = global.get('user_lat');\nconst lon    = global.get('user_lon');\nconst deg    = rkm / 111;\nconst hourAgo = new Date(Date.now() - 3600e3).toISOString();\nmsg.topic = `SELECT severity, COUNT(*) AS n FROM traffic_incidents WHERE ts_utc>'${hourAgo}' AND severity>=${thresh} AND lat BETWEEN ${lat-deg} AND ${lat+deg} AND lon BETWEEN ${lon-deg} AND ${lon+deg} GROUP BY severity`;\n\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":800,"y":1020,"wires":[["DB_TRAFF"]]},{"id":"DB_TRAFF","type":"sqlite","z":"loc_info_tab","mydb":"","sqlquery":"msg.topic","sql":"","name":"count traff","x":1080,"y":1020,"wires":[["TRAFF_PARSE"]]},{"id":"TRAFF_PARSE","type":"function","z":"loc_info_tab","name":"fmt traff","func":"const rows = msg.payload || [];\nmsg.payload = rows.length\n    ? rows.map(r => `${r.n}×S${r.severity}`).join(', ')\n    : '0';\nmsg.topic   = 'traff';\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1300,"y":1020,"wires":[["JOIN"]]},{"id":"JOIN","type":"join","z":"loc_info_tab","name":"collect","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"","joinerType":"str","useparts":true,"accumulate":false,"timeout":"5","count":"4","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1720,"y":940,"wires":[["84605e87fe4ed11b","FORMAT"]]},{"id":"FORMAT","type":"function","z":"loc_info_tab","name":"format card","func":"const p    = msg.payload;                 // object from JOIN\nconst chat = global.get('default_chat');\n\n// ----- climatology badge ---------------------------------------------\nconst mu    = global.get('climate_mu');\nconst sigma = global.get('climate_sigma');\nconst dayMn = p.met.temp;                       // today’s forecast mean (°C)\nlet note    = '';\n\nif (mu != null && sigma > 0 && dayMn != null) {\n  const z = (dayMn - mu) / sigma;\n  if (Math.abs(z) < 1)         note = '🟢 normal band';\n  else if (z >= 1)             note = `🔴 ${z.toFixed(1)} σ above`;\n  else                         note = `🔵 ${(-z).toFixed(1)} σ below`;\n}\n\nconst sevThresh = global.get(`threshold:${chat}:traffic_min_sev`) || 3;\n\nmsg.payload = {\n  chatId : chat,\n  type   : 'message',\n  content:\n    `🏷 *New location set*\\n` +\n    `Day-mean temp: ${dayMn.toFixed(1)} °C (${note})\\n` +\n    `AQI : ${p.aq}\\n` +\n    `Quakes (24 h): ${p.nq}\\n` +\n    `Accidents ≥S${sevThresh} (1 h): ${p.traff}`,\n  options: { parse_mode: 'Markdown' }\n};\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":2150,"y":860,"wires":[["WRAP"]]},{"id":"WRAP","type":"subflow:9f9b26a721ad1b8e","z":"loc_info_tab","name":"wrap","x":2370,"y":860,"wires":[["SEND"],[]]},{"id":"SEND","type":"telegram sender","z":"loc_info_tab","bot":"25bc3f9b27c564a8","outputs":1,"x":2610,"y":860,"wires":[[]]},{"id":"b14e5c16c2ddbd05","type":"delay","z":"loc_info_tab","name":"","pauseType":"delay","timeout":"10","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":420,"y":780,"wires":[["SQL_QUAKES","WX_URL","AQ_URL"]]},{"id":"4e60268988cad702","type":"delay","z":"loc_info_tab","name":"","pauseType":"delay","timeout":"10","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":440,"y":1020,"wires":[["SQL_TRAFF"]]},{"id":"84605e87fe4ed11b","type":"debug","z":"loc_info_tab","name":"debug 1","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1880,"y":1100,"wires":[]},{"id":"in_loc","type":"link in","z":"tab_loc_v3","name":"loc_changed","links":["b107cba5e50f70a1"],"x":425,"y":520,"wires":[["199e17fec38ba3f1"]]},{"id":"199e17fec38ba3f1","type":"function","z":"tab_loc_v3","name":"function 16","func":"// ===================================================================\n// 3. STATUS COMMAND FUNCTION - Database-First Approach\n// ===================================================================\n// Create new function node for /status command\n\n/***************************************************************************\n * Smart Status Command - Database-First Approach\n * Gets all current conditions from database without API calls\n ***************************************************************************/\n\nconst chatId = msg.originalMessage?.chat?.id || msg.payload?.chatId || global.get('default_chat');\nif (!chatId) return null;\n\nconst lat = Number(global.get('user_lat') ?? 37.9838);\nconst lon = Number(global.get('user_lon') ?? 23.7275);\nconst latStr = lat.toFixed(3);\nconst lonStr = lon.toFixed(3);\nconst city = global.get('city_name') || 'Unknown';\n\n// Get user thresholds\nconst tempHigh = Number(global.get(`threshold:${chatId}:temp_high`) ?? 35);\nconst tempLow = Number(global.get(`threshold:${chatId}:temp_low`) ?? 5);\nconst trafficSev = Number(global.get(`threshold:${chatId}:traffic_min_sev`) ?? 3);\n\n// Build comprehensive status query using your actual table structures\nmsg.topic = `\nWITH current_weather AS (\n  SELECT temperature, humidity, wind_speed, uv_index, pressure,\n         ROUND((julianday('now') - julianday(timestamp)) * 24, 1) as hours_ago\n  FROM weather_current_ow \n  WHERE ROUND(latitude,3) = ${latStr} AND ROUND(longitude,3) = ${lonStr}\n  ORDER BY timestamp DESC LIMIT 1\n),\ncurrent_air AS (\n  SELECT \n    overall_aqi,\n    pm2_5, pm10, no2, so2, o3, co,\n    pm2_5_aqi, pm10_aqi, no2_aqi, so2_aqi, o3_aqi, co_aqi,\n    uv_index, \n    alder_pollen, birch_pollen, grass_pollen, olive_pollen, ragweed_pollen,\n    source,\n    ROUND((julianday('now') - julianday(ts_utc)) * 24, 1) as hours_ago\n  FROM air_data \n  WHERE ROUND(latitude,3) = ${latStr} AND ROUND(longitude,3) = ${lonStr}\n    AND overall_aqi IS NOT NULL\n  ORDER BY ts_utc DESC\n),\nrecent_traffic AS (\n  SELECT COUNT(*) as incidents,\n         MAX(severity) as max_severity,\n         AVG(delay_sec) as avg_delay\n  FROM traffic_incidents \n  WHERE ts_utc > datetime('now', '-2 hours')\n    AND severity >= ${trafficSev}\n    AND ROUND(lat,3) BETWEEN ${(lat - 0.01).toFixed(3)} AND ${(lat + 0.01).toFixed(3)}\n    AND ROUND(lon,3) BETWEEN ${(lon - 0.01).toFixed(3)} AND ${(lon + 0.01).toFixed(3)}\n),\nrecent_quakes AS (\n  SELECT COUNT(*) as count,\n         MAX(magnitude) as max_magnitude,\n         MIN(ROUND((111.19 * ACOS(\n           COS(RADIANS(${lat})) * COS(RADIANS(lat)) * \n           COS(RADIANS(lon - ${lon})) + \n           SIN(RADIANS(${lat})) * SIN(RADIANS(lat))\n         )), 1)) as min_distance_km,\n         ROUND((julianday('now') - julianday(MAX(ts_utc))) * 24, 1) as hours_since_last\n  FROM eq_events \n  WHERE ts_utc > datetime('now', '-24 hours')\n    AND magnitude >= 4.0\n    AND (111.19 * ACOS(\n        COS(RADIANS(${lat})) * COS(RADIANS(lat)) * \n        COS(RADIANS(lon - ${lon})) + \n        SIN(RADIANS(${lat})) * SIN(RADIANS(lat))\n      )) <= 100\n)\nSELECT \n  -- Weather data (OpenWeather)\n  w.temperature, w.humidity, w.wind_speed, w.uv_index, w.pressure, w.hours_ago as weather_age,\n  -- Air quality data (Multi-source with smart AQI conversion)\n  a.overall_aqi, a.pm2_5, a.pm10, a.no2, a.o3, a.co,\n  a.pm2_5_aqi, a.pm10_aqi, a.no2_aqi, a.o3_aqi, a.co_aqi,\n  a.uv_index as air_uv, a.source as air_source, a.hours_ago as air_age,\n  -- Pollen data\n  a.alder_pollen, a.birch_pollen, a.grass_pollen, a.olive_pollen, a.ragweed_pollen,\n  -- Traffic data\n  t.incidents, t.max_severity, t.avg_delay,\n  -- Enhanced earthquake data with distance and timing\n  q.count as quakes, q.max_magnitude, q.min_distance_km, q.hours_since_last\nFROM current_weather w\nLEFT JOIN current_air a ON 1=1\nLEFT JOIN recent_traffic t ON 1=1  \nLEFT JOIN recent_quakes q ON 1=1;\n`;\n\n// Store context for the formatter\nmsg.chatId = chatId;\nmsg.city = city;\nmsg.tempHigh = tempHigh;\nmsg.tempLow = tempLow;\nmsg.trafficSev = trafficSev;\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":660,"y":520,"wires":[["94f8488bd94d9d2c","80cb8a72d5c428fd"]]},{"id":"94f8488bd94d9d2c","type":"sqlite","z":"tab_loc_v3","mydb":"473f5bc0183beb94","sqlquery":"msg.topic","sql":"","name":"","x":900,"y":520,"wires":[["331727b4a8cc1411","570b0c78bea72835"]]},{"id":"c6884bc0cb9da7e0","type":"subflow:9f9b26a721ad1b8e","z":"tab_loc_v3","name":"","x":1460,"y":520,"wires":[["a37298485cce2d2b"],[]]},{"id":"a37298485cce2d2b","type":"telegram sender","z":"tab_loc_v3","name":"","bot":"25bc3f9b27c564a8","haserroroutput":false,"outputs":1,"x":1770,"y":520,"wires":[[]]},{"id":"d910b313f0c9cc35","type":"inject","z":"tab_loc_v3","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":510,"y":380,"wires":[["199e17fec38ba3f1"]]},{"id":"331727b4a8cc1411","type":"function","z":"tab_loc_v3","name":"function 17","func":"// ===================================================================\n// 4. STATUS FORMATTER FUNCTION - After SQLite query\n// ===================================================================\n// Process the status query results and format response\n\nconst data = msg.payload?.[0];\nif (!data) {\n    msg.payload = {\n        chatId: msg.chatId,\n        type: 'message',\n        content: '❌ No recent data available for your location'\n    };\n    return msg;\n}\n\n// ═══════════════════════════════════════════════════════════════════\n// SMART AQI ANALYSIS - Handle Multiple Scales\n// ═══════════════════════════════════════════════════════════════════\n\n// Get all air quality data sources\nif (!data) {\n    msg.payload = {\n        chatId: msg.chatId,\n        type: 'message',\n        content: '❌ No recent data available for your location'\n    };\n    return msg;\n}\n\n// Get all available air quality sources\nconst allAirData = msg.payload; // This should contain all air quality records\n\n// Smart AQI conversion function\nfunction convertAQIToStandard(aqi, source) {\n    if (!aqi) return null;\n\n    // OpenWeather uses 1-5 scale, convert to US AQI (0-500)\n    if (source === 'openweather' || source === 'meteo') {\n        const owToUS = {\n            1: 25,   // Good (0-50 average = 25)\n            2: 75,   // Fair (51-100 average = 75) \n            3: 125,  // Moderate (101-150 average = 125)\n            4: 175,  // Poor (151-200 average = 175)\n            5: 250   // Very Poor (201-300 average = 250)\n        };\n        return owToUS[aqi] || aqi;\n    }\n\n    // API Ninjas already uses US AQI scale (0-500)\n    if (source === 'api_ninjas') {\n        return aqi;\n    }\n\n    return aqi; // Default: assume US AQI scale\n}\n\n// Process air quality with smart source selection\nlet bestAQI = null;\nlet aqiSource = '';\nlet aqiAge = null;\nlet showMultipleSources = false;\nlet aqiComparison = '';\n\n// Get the most recent data from each source\nconst airSources = {};\nif (allAirData && Array.isArray(allAirData)) {\n    allAirData.forEach(record => {\n        if (record.overall_aqi && record.air_source) {\n            const source = record.air_source.toLowerCase();\n            if (!airSources[source] || record.air_age < airSources[source].age) {\n                airSources[source] = {\n                    raw_aqi: record.overall_aqi,\n                    converted_aqi: convertAQIToStandard(record.overall_aqi, source),\n                    age: record.air_age,\n                    pm25: record.pm2_5,\n                    pm10: record.pm10,\n                    no2: record.no2,\n                    o3: record.o3\n                };\n            }\n        }\n    });\n} else if (data.overall_aqi) {\n    // Single source fallback\n    const source = data.air_source?.toLowerCase() || 'unknown';\n    airSources[source] = {\n        raw_aqi: data.overall_aqi,\n        converted_aqi: convertAQIToStandard(data.overall_aqi, source),\n        age: data.air_age,\n        pm25: data.pm2_5,\n        pm10: data.pm10,\n        no2: data.no2,\n        o3: data.o3\n    };\n}\n\n// Smart source selection logic\nconst sourceKeys = Object.keys(airSources);\nif (sourceKeys.length > 1) {\n    // Multiple sources available - check for significant differences\n    const aqiValues = sourceKeys.map(s => airSources[s].converted_aqi);\n    const maxDiff = Math.max(...aqiValues) - Math.min(...aqiValues);\n\n    if (maxDiff > 50) {\n        // Significant difference - show both\n        showMultipleSources = true;\n        const sourceComparisons = sourceKeys.map(source => {\n            const s = airSources[source];\n            return `${source}: ${s.converted_aqi} (${s.age}h)`;\n        });\n        aqiComparison = `\\n⚠️ Sources differ: ${sourceComparisons.join(', ')}`;\n\n        // Trust OpenWeather if available, otherwise most recent\n        if (airSources['openweather']) {\n            bestAQI = airSources['openweather'].converted_aqi;\n            aqiSource = 'openweather (trusted)';\n            aqiAge = airSources['openweather'].age;\n        } else {\n            // Use most recent\n            const mostRecent = sourceKeys.reduce((best, curr) =>\n                airSources[curr].age < airSources[best].age ? curr : best);\n            bestAQI = airSources[mostRecent].converted_aqi;\n            aqiSource = mostRecent;\n            aqiAge = airSources[mostRecent].age;\n        }\n    } else {\n        // Similar values - use most recent\n        const mostRecent = sourceKeys.reduce((best, curr) =>\n            airSources[curr].age < airSources[best].age ? curr : best);\n        bestAQI = airSources[mostRecent].converted_aqi;\n        aqiSource = mostRecent;\n        aqiAge = airSources[mostRecent].age;\n    }\n} else if (sourceKeys.length === 1) {\n    // Single source\n    const source = sourceKeys[0];\n    bestAQI = airSources[source].converted_aqi;\n    aqiSource = source;\n    aqiAge = airSources[source].age;\n} else {\n    // No air quality data\n    bestAQI = null;\n}\n\n// Rest of the weather analysis\nconst temp = data.temperature;\nconst humidity = data.humidity;\nconst windSpeed = data.wind_speed;\nconst uvIndex = data.uv_index;\nconst pressure = data.pressure;\n\n// Traffic data\nconst incidents = data.incidents || 0;\nconst maxSev = data.max_severity || 0;\nconst avgDelay = data.avg_delay || 0;\n\n// Enhanced earthquake data with distance and timing\nconst quakes = data.quakes || 0;\nconst maxMagnitude = data.max_magnitude || 0;\nconst minDistance = data.min_distance_km || 0;\nconst hoursSinceLast = data.hours_since_last || 0;\n\n// Temperature status with threshold awareness\nlet tempStatus = '';\nlet tempIcon = '🌡️';\n\nif (temp >= msg.tempHigh) {\n    tempStatus = '🚨 **AT HIGH THRESHOLD**';\n    tempIcon = '🔥';\n} else if (temp >= (msg.tempHigh - 1)) {\n    tempStatus = '⚠️ **APPROACHING HIGH**';\n    tempIcon = '🌡️';\n} else if (temp <= msg.tempLow) {\n    tempStatus = '🧊 **AT LOW THRESHOLD**';\n    tempIcon = '❄️';\n} else if (temp <= (msg.tempLow + 1)) {\n    tempStatus = '⚠️ **APPROACHING LOW**';\n    tempIcon = '❄️';\n} else {\n    tempStatus = '✅ **NORMAL**';\n}\n\n// Enhanced air quality analysis with unified scale\nlet aqiStatus = '✅ Good';\nlet aqiIcon = '💚';\nlet aqiDetails = '';\n\nif (bestAQI) {\n    if (bestAQI >= 300) { aqiStatus = '🚨 Hazardous'; aqiIcon = '🔴'; }\n    else if (bestAQI >= 200) { aqiStatus = '🚨 Very Unhealthy'; aqiIcon = '🔴'; }\n    else if (bestAQI >= 150) { aqiStatus = '🚨 Unhealthy'; aqiIcon = '🔴'; }\n    else if (bestAQI >= 100) { aqiStatus = '⚠️ Sensitive Groups'; aqiIcon = '🟠'; }\n    else if (bestAQI >= 50) { aqiStatus = '🟡 Moderate'; aqiIcon = '🟡'; }\n}\n\n// Enhanced earthquake status with distance and timing\nlet quakeStatus = '✅ Quiet';\nif (quakes > 0) {\n    const distanceText = minDistance > 0 ? ` ${minDistance}km away` : '';\n    const timeText = hoursSinceLast > 0 ? ` ${hoursSinceLast}h ago` : '';\n    quakeStatus = `⚠️ ${quakes} recent (M${maxMagnitude?.toFixed(1)}${distanceText}${timeText})`;\n}\n\n// Enhanced traffic status - distinguish incidents vs flow\nlet trafficStatus = '✅ Clear';\nif (incidents > 0) {\n    const delayMin = Math.round(avgDelay / 60);\n    trafficStatus = `⚠️ ${incidents} incidents (S${maxSev}${delayMin > 0 ? `, +${delayMin}min delay` : ''})`;\n}\n\n// Overall safety assessment - Enhanced with new data\nlet overallSafety = '✅ SAFE TO GO OUT';\nlet safetyIcon = '✅';\nlet safetyReason = '';\n\n// Critical conditions\nif (temp >= msg.tempHigh + 2 || temp <= msg.tempLow - 2) {\n    overallSafety = '🚨 EXTREME TEMPERATURE';\n    safetyIcon = '🚨';\n    safetyReason = 'Dangerous temperature levels';\n} else if (bestAQI >= 200) {\n    overallSafety = '🚨 HAZARDOUS AIR QUALITY';\n    safetyIcon = '🚨';\n    safetyReason = 'Very unhealthy air quality';\n} else if (uvIndex >= 8) {\n    overallSafety = '⚠️ HIGH UV - PROTECTION NEEDED';\n    safetyIcon = '☀️';\n    safetyReason = 'Dangerous UV levels - use sunscreen';\n}\n// Warning conditions\nelse if (temp >= msg.tempHigh || temp <= msg.tempLow || bestAQI >= 150 || incidents >= 3) {\n    overallSafety = '⚠️ CAUTION ADVISED';\n    safetyIcon = '⚠️';\n    safetyReason = 'Multiple risk factors present';\n}\n\n// ═══════════════════════════════════════════════════════════════════\n// FORMAT ENHANCED STATUS MESSAGE WITH SMART AQI HANDLING\n// ═══════════════════════════════════════════════════════════════════\n\nlet message = `${safetyIcon} **Current Status - ${msg.city}**\\n\\n`;\n\n// Weather section (OpenWeather data)\nmessage += `${tempIcon} **Weather** (${data.weather_age}h ago)\\n`;\nmessage += `Temperature: ${temp?.toFixed(1) || 'N/A'}°C ${tempStatus}\\n`;\nmessage += `Humidity: ${humidity || 'N/A'}%`;\nif (windSpeed) message += ` | Wind: ${windSpeed.toFixed(1)} m/s`;\nif (uvIndex) message += `\\n☀️ UV Index: ${uvIndex} ${uvIndex >= 8 ? '🚨 EXTREME' : uvIndex >= 6 ? '⚠️ HIGH' : '✅'}`;\nmessage += `\\n\\n`;\n\n// Enhanced Air Quality section with smart source handling\nmessage += `${aqiIcon} **Air Quality**`;\nif (bestAQI) {\n    message += ` (${aqiAge}h ago)\\n`;\n    message += `Overall AQI: ${bestAQI} (${aqiStatus}) [${aqiSource}]`;\n    message += aqiComparison; // Show source differences if any\n\n    // Show individual pollutant levels if available from best source\n    const bestSourceData = airSources[aqiSource.replace(' (trusted)', '')];\n    if (bestSourceData) {\n        let pollutants = [];\n        if (bestSourceData.pm25) pollutants.push(`PM2.5: ${bestSourceData.pm25.toFixed(1)}`);\n        if (bestSourceData.pm10) pollutants.push(`PM10: ${bestSourceData.pm10.toFixed(1)}`);\n        if (bestSourceData.no2) pollutants.push(`NO2: ${bestSourceData.no2.toFixed(1)}`);\n        if (bestSourceData.o3) pollutants.push(`O3: ${bestSourceData.o3.toFixed(1)}`);\n        if (pollutants.length > 0) {\n            message += `\\n📊 ${pollutants.slice(0, 2).join(' | ')}`; // Show top 2\n        }\n    }\n} else {\n    message += `\\n❌ No recent data available`;\n}\nmessage += `\\n\\n`;\n\n// Enhanced Traffic section - NOTE: This currently shows incidents only\n// TODO: Add actual traffic flow data if you have a traffic flow API\nmessage += `🚗 **Traffic Incidents**: ${trafficStatus}\\n`;\nmessage += `📊 *Note: Traffic flow data not yet integrated*\\n`;\n\n// Enhanced Earthquake section with distance and timing\nmessage += `🌍 **Earthquakes**: ${quakeStatus}\\n\\n`;\n\n// Thresholds info\nmessage += `🎯 **Your Thresholds**\\n`;\nmessage += `High: ≥${msg.tempHigh}°C | Low: ≤${msg.tempLow}°C\\n\\n`;\n\n// Overall assessment\nmessage += `📊 **${overallSafety}**`;\nif (safetyReason) message += `\\n💡 ${safetyReason}`;\nmessage += `\\n\\n`;\n\n// Enhanced data freshness info\nmessage += `🕐 *Data age: Weather ${data.weather_age}h`;\nif (bestAQI) message += `, Air ${aqiAge}h`;\nmessage += `*`;\n\nmsg.payload = {\n    chatId: msg.chatId,\n    type: 'message',\n    content: message,\n    options: { parse_mode: 'Markdown' }\n};\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1110,"y":520,"wires":[["c6884bc0cb9da7e0"]]},{"id":"80cb8a72d5c428fd","type":"debug","z":"tab_loc_v3","name":"debug 23","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":850,"y":700,"wires":[]},{"id":"570b0c78bea72835","type":"debug","z":"tab_loc_v3","name":"debug 24","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1030,"y":400,"wires":[]},{"id":"inj_km","type":"inject","z":"8998a2850ec4892c","name":"02:05 UTC","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"86400","crontab":"","once":false,"onceDelay":0,"topic":"","payload":"","payloadType":"str","x":330,"y":320,"wires":[["build_sql"]]},{"id":"build_sql","type":"function","z":"8998a2850ec4892c","name":"build-SQL (same MM-DD)","func":"const lat = global.get('user_lat') ?? 37.9838;\nconst lon = global.get('user_lon') ?? 23.7275;\nif (lat == null || lon == null) { node.warn('pin unset'); return null; }\n\nmsg.lat = lat;\nmsg.lon = lon;\nconst mmdd = new Date().toISOString().slice(5, 10);\nmsg.topic =\n  `WITH parms(lat,lon,eps,mmdd,curYr) AS (\n    VALUES (${lat},${lon},0.0005,'${mmdd}',strftime('%Y','now'))\n  )\n  SELECT CAST(substr(date_utc,1,4) AS INT) AS yr, temp_mean\n  FROM   weather_climate_history, parms\n  WHERE  lat_round BETWEEN lat-eps AND lat+eps\n    AND  lon_round BETWEEN lon-eps AND lon+eps\n    AND  substr(date_utc,6,5) = parms.mmdd\n    AND  CAST(substr(date_utc,1,4) AS INT) < parms.curYr\n  ORDER BY yr;`;\n\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":850,"y":520,"wires":[["ff975842996d18e5"]]},{"id":"sqlite_select","type":"sqlite","z":"8998a2850ec4892c","mydb":"","sql":"","name":"fetch 25 temps","x":1860,"y":520,"wires":[["km_process"]]},{"id":"km_process","type":"function","z":"8998a2850ec4892c","name":"K-means + σ + anomaly","func":"/***********************************************************************\n * km_process – 1-D K-means on historical temps + today’s real mean\n * INPUT : msg.payload  → Array[{ yr, temp_mean }]\n *         msg.todayMean→ Number  (calculated in parse_today_mean)\n * OUTPUT0: { topic: <UPSERT SQL> }  → SQLite\n * OUTPUT1: { chatId, payload:{…} }  → Telegram (optional alert)\n ***********************************************************************/\n\nconst rows      = msg.payload || [];\nconst todayMean = msg.todayMean;             // comes from parse_today_mean\n\nif (!rows.length)  { node.warn('km_process: no history rows'); return null; }\nif (todayMean == null) { node.warn('km_process: no todayMean'); return null; }\n\n/* -------- build clustering vector (exclude current year) -------------- */\nconst thisYear = new Date().getUTCFullYear();\n\nconst temps = rows\n  .filter(r => r.yr !== thisYear && r.temp_mean != null)   // history only\n  .map(r   => r.temp_mean);\n\nif (temps.length < 4) {\n  node.warn(`km_process: need ≥4 temps, got ${temps.length}`);\n  return null;\n}\n\n/* -------- simple 1-D K-means (k = 4) ---------------------------------- */\nconst k = 4;\nlet centroids = temps.slice(0, k);           // seed with first k values\n\nfor (let iter = 0; iter < 30; iter++) {\n  const clusters = Array.from({ length: k }, () => []);\n  temps.forEach(t => {\n    const idx = centroids.reduce(\n      (best, c, i, arr) =>\n        Math.abs(t - c) < Math.abs(t - arr[best]) ? i : best,\n      0\n    );\n    clusters[idx].push(t);\n  });\n  centroids = clusters.map((c, i) =>\n    c.length ? c.reduce((a, b) => a + b, 0) / c.length : centroids[i]\n  );\n}\n\n/* -------- pick cluster closest to todayMean --------------------------- */\nconst cIdx = centroids.reduce(\n  (best, c, i, arr) =>\n    Math.abs(todayMean - c) < Math.abs(todayMean - arr[best]) ? i : best,\n  0\n);\n\nconst clusterVals = temps.filter(t => {\n  const idx = centroids.reduce(\n    (best, c, i, arr) =>\n      Math.abs(t - c) < Math.abs(t - arr[best]) ? i : best,\n    0\n  );\n  return idx === cIdx;\n});\n\nconst mu = centroids[cIdx];\nconst sigma =\n  Math.sqrt(\n    clusterVals.reduce((a, t) => a + (t - mu) ** 2, 0) / clusterVals.length\n  ) || 0.0001; // guard against zero\nglobal.set('climate_mu', mu);\nglobal.set('climate_sigma', sigma);\nglobal.set('climate_todayMean', todayMean); \n/* -------- UPSERT into climate_centroids ------------------------------- */\nconst lat  = Number(global.get('user_lat').toFixed(3));\nconst lon  = Number(global.get('user_lon').toFixed(3));\nconst mmdd = new Date().toISOString().slice(5, 10); // \"06-15\"\n\nconst upsert = `\nINSERT INTO climate_centroids\n  (mm_dd, lat_round, lon_round, k, mu, sigma, updated_at)\nVALUES\n  ('${mmdd}', ${lat}, ${lon}, ${k}, ${mu}, ${sigma},\n   datetime('now','utc'))\nON CONFLICT(mm_dd, lat_round, lon_round) DO UPDATE SET\n  k          = excluded.k,\n  mu         = excluded.mu,\n  sigma      = excluded.sigma,\n  updated_at = excluded.updated_at;\n`;\n\nnode.send([{ topic: upsert }, null]);        // output 0 → SQLite\n\n/* -------- optional anomaly alert -------------------------------------- */\nconst z = (todayMean - mu) / sigma;\nif (Math.abs(z) >= 2) {\n  const txt =\n    `🌡️ *Temp anomaly*` +\n    `\\nToday mean: ${todayMean.toFixed(1)} °C` +\n    `\\nClimatology: ${mu.toFixed(1)} ± ${sigma.toFixed(1)} °C (k=${k})` +\n    `\\n*z-score: ${z.toFixed(1)}*`;\n  node.send([\n    null,\n    {\n      chatId: global.get('default_chat'),\n      payload: {\n        chatId: global.get('default_chat'),\n        type: 'message',\n        content: txt\n      }\n    }\n  ]);\n}\n\nreturn null;\n","outputs":2,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":2130,"y":520,"wires":[["sqlite_write"],["07cc0cad6fecf427"]]},{"id":"sqlite_write","type":"sqlite","z":"8998a2850ec4892c","mydb":"","sql":"","name":"write centroids","x":2500,"y":420,"wires":[["49e04bd07f9ac9d1"]]},{"id":"ff975842996d18e5","type":"function","z":"8998a2850ec4892c","name":"meteo_forecast_url_builder","func":"/*************************************************************************\n * get_today_mean_OWM – OpenWeather One-Call 3.0 DAILY forecast\n *  IN : global.user_lat / user_lon  (or fall-back to Athens)\n *  OUT: makes HTTP URL in msg.url\n *************************************************************************/\n\nconst lat = global.get('user_lat') ?? 37.9838;\nconst lon = global.get('user_lon') ?? 23.7275;\nconst APPID = '11391688e640ec8af6ad02482a08686e';   // << your key\n\nmsg.lat = lat;          // forward for later use\nmsg.lon = lon;\n\nmsg.url =\n  `https://api.openweathermap.org/data/3.0/onecall` +\n  `?lat=${lat}&lon=${lon}` +\n  `&units=metric` +\n  `&exclude=minutely,hourly,alerts` +   // we only need daily[]\n  `&appid=${APPID}`;\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1180,"y":520,"wires":[["cfc720830f31c312"]]},{"id":"cfc720830f31c312","type":"http request","z":"8998a2850ec4892c","name":"","method":"GET","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":1410,"y":440,"wires":[["95e53b9d136aca96"]]},{"id":"95e53b9d136aca96","type":"function","z":"8998a2850ec4892c","name":"function 6","func":"const daily0 = msg.payload?.daily?.[0];\nif (!daily0 || !daily0.temp) {\n  node.warn('no daily mean'); return null;\n}\nmsg.payload = { temp: daily0.temp.day };\nmsg.topic   = 'met';\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1620,"y":520,"wires":[["sqlite_select"]]},{"id":"f486f26e5a6b38a6","type":"link in","z":"8998a2850ec4892c","name":"link in 3","links":["11d10040b77a0559"],"x":245,"y":520,"wires":[["build_sql"]]},{"id":"07cc0cad6fecf427","type":"function","z":"8998a2850ec4892c","name":"function 3","func":"// forward todayMean to Loc InstantInfo JOIN\nreturn {\n    topic: 'clim',\n    payload: global.get('climate_todayMean')   // set earlier in K-means node\n};\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2430,"y":720,"wires":[["0e3871e420c8efe4"]]},{"id":"0e3871e420c8efe4","type":"link out","z":"8998a2850ec4892c","name":"link out 1","mode":"link","links":["IN_LINK"],"x":2605,"y":740,"wires":[]},{"id":"49e04bd07f9ac9d1","type":"debug","z":"8998a2850ec4892c","name":"debug 7","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":2710,"y":480,"wires":[]},{"id":"52f50c20aafd2846","type":"link in","z":"b583a63a49201d7f","name":"loc_changed","links":["11d10040b77a0559"],"x":135,"y":560,"wires":[["fdbae2cdc263cdb8"]]},{"id":"fdbae2cdc263cdb8","type":"function","z":"b583a63a49201d7f","name":"build clim SQL","func":"const lat=(global.get('user_lat')??37.9838).toFixed(3);\nconst lon=(global.get('user_lon')??23.7275).toFixed(3);\nconst mmdd=new Date().toISOString().slice(5,10);\nmsg.topic=`WITH p(lat,lon,eps,mmdd,curYr) AS (VALUES (${lat},${lon},0.0005,'${mmdd}',strftime('%Y','now')))\nSELECT CAST(substr(date_utc,1,4) AS INT) AS yr,temp_mean\nFROM weather_climate_history,p\nWHERE lat_round BETWEEN lat-eps AND lat+eps\n  AND lon_round BETWEEN lon-eps AND lon+eps\n  AND substr(date_utc,6,5)=mmdd\n  AND CAST(substr(date_utc,1,4) AS INT) < curYr\nORDER BY yr;`;\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":300,"y":380,"wires":[["2abbc1698415b1af"]]},{"id":"2abbc1698415b1af","type":"sqlite","z":"b583a63a49201d7f","mydb":"","sqlquery":"msg.topic","sql":"","name":"select history","x":450,"y":600,"wires":[["1be10523f8f10dae"]]},{"id":"1be10523f8f10dae","type":"function","z":"b583a63a49201d7f","name":"stash rows","func":"msg.histRows=msg.payload;\nreturn msg;","outputs":1,"x":785,"y":640,"wires":[["f4d7622de9d7b37a"]]},{"id":"f4d7622de9d7b37a","type":"function","z":"b583a63a49201d7f","name":"OWM URL","func":"const lat=global.get('user_lat')??37.9838;\nconst lon=global.get('user_lon')??23.7275;\nconst APPID= '11391688e640ec8af6ad02482a08686e';\nmsg.url=`https://api.openweathermap.org/data/3.0/onecall?lat=${lat}&lon=${lon}&units=metric&exclude=minutely,hourly,alerts&appid=${APPID}`;\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":650,"y":420,"wires":[["c326c57977158294"]]},{"id":"c326c57977158294","type":"http request","z":"b583a63a49201d7f","name":"fetch OWM","method":"GET","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":770,"y":320,"wires":[["dc6cd483f6e2b153"]]},{"id":"dc6cd483f6e2b153","type":"function","z":"b583a63a49201d7f","name":"todayMean","func":"const d0=msg.payload?.daily?.[0];\nif(!d0||!d0.temp){node.warn('OWM daily missing');return null;}\nmsg.todayMean=d0.temp.day;\nmsg.rows=msg.histRows;\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1050,"y":300,"wires":[["b6e86d3bf792d19c"]]},{"id":"b6e86d3bf792d19c","type":"function","z":"b583a63a49201d7f","name":"K-means + σ + alert","func":"const rows=msg.rows||[];\nconst today=msg.todayMean;\nif(!rows.length||today==null)return null;\nconst temps=rows.map(r=>r.temp_mean).filter(n=>n!=null);\nif(temps.length<4)return null;\nconst k=4;let centroids=temps.slice(0,k);for(let it=0;it<30;it++){const clusters=Array.from({length:k},()=>[]);temps.forEach(t=>{const idx=centroids.reduce((b,c,i,a)=>Math.abs(t-c)<Math.abs(t-a[b])?i:b,0);clusters[idx].push(t);});centroids=clusters.map((c,i)=>c.length?c.reduce((a,b)=>a+b,0)/c.length:centroids[i]);}\nconst idx=centroids.reduce((b,c,i,a)=>Math.abs(today-c)<Math.abs(today-a[b])?i:b,0);\nconst mu=centroids[idx];\nconst clusterVals=temps.filter(t=>{const ii=centroids.reduce((b,c,i,a)=>Math.abs(t-c)<Math.abs(t-a[b])?i:b,0);return ii===idx;});\nconst sigma=Math.sqrt(clusterVals.reduce((a,t)=>a+(t-mu)**2,0)/clusterVals.length)||0.0001;\nconst latRound=(global.get('user_lat')??37.9838).toFixed(3);\nconst lonRound=(global.get('user_lon')??23.7275).toFixed(3);\nconst mmdd=new Date().toISOString().slice(5,10);\nglobal.set('climate_mu',mu);\nglobal.set('climate_sigma',sigma);\nglobal.set('climate_todayMean',today);\nmsg.topic=`INSERT INTO climate_centroids (mm_dd,lat_round,lon_round,k,mu,sigma,updated_at) VALUES ('${mmdd}',${latRound},${lonRound},${k},${mu},${sigma},datetime('now','utc')) ON CONFLICT(mm_dd,lat_round,lon_round) DO UPDATE SET mu=excluded.mu,sigma=excluded.sigma,updated_at=excluded.updated_at;`;\nnode.send([{topic:msg.topic},null]);\nconst z=(today-mu)/sigma;\nif(Math.abs(z)>=2){node.send([null,{chatId:global.get('default_chat'),payload:{content:`🌡️ *Temp anomaly*\nMean today: ${today.toFixed(1)} °C\nClimatology: ${mu.toFixed(1)} ± ${sigma.toFixed(1)} °C\n*z=${z.toFixed(1)}*`,options:{parse_mode:'Markdown'}}}]);}\nreturn null;","outputs":2,"x":1235,"y":560,"wires":[["bd623ace6b5e3d62"],["1257ec80ca3a47af"]]},{"id":"bd623ace6b5e3d62","type":"sqlite","z":"b583a63a49201d7f","mydb":"","sqlquery":"msg.topic","sql":"","name":"write centroids","x":1400,"y":260,"wires":[["b6ccce43b70c403f"]]},{"id":"1257ec80ca3a47af","type":"subflow:9f9b26a721ad1b8e","z":"b583a63a49201d7f","name":"","x":1500,"y":740,"wires":[[],[]]},{"id":"545f48b2408e7e4d","type":"function","z":"b583a63a49201d7f","name":"send clim","func":"return {topic:'clim',payload:global.get('climate_todayMean')};","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1580,"y":320,"wires":[["7d5f0371cdb4db28"]]},{"id":"7d5f0371cdb4db28","type":"link out","z":"b583a63a49201d7f","name":"to InstantInfo","links":[],"x":1735,"y":320,"wires":[]},{"id":"b6ccce43b70c403f","type":"debug","z":"b583a63a49201d7f","name":"debug 8","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1580,"y":140,"wires":[]},{"id":"89747a812cd3b206","type":"inject","z":"b583a63a49201d7f","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":150,"y":300,"wires":[["fdbae2cdc263cdb8"]]}]